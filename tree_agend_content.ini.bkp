agendamentos_web/
├─ classes/
│  ├─ controllers/
│  │  ├─ __init__.py
from .AgendamentoController import AgendamentoController
from .DatabaseController import DatabaseController
│  │  ├─ AgendamentoController.py
from classes.models import Agendamento, Produto, Composicao, JoinedComposicao, JoinedAgendamento
from classes.views import AgendamentoView
from classes.services import PdfService, SpreadsheetService
from .DatabaseController import DatabaseController
from datetime import datetime
import time
from base_jp_lab import Caller
from uuid import uuid4

class AgendamentoController:
    def __init__(self, db_controller:DatabaseController = None, caller_obj:Caller = None):
        self.agendamentos = []
        self.view = AgendamentoView()
        self.pdf_service = PdfService()
        self.csv_service = SpreadsheetService
        self.db_controller = db_controller
        self.caller = caller_obj

    #Busca nova chave Access Token
    #print(api_token_db(access_obj,))

    def insert_agendamento(self, id_bd:int = 0, id_agend_ml:str = '', id_tipo:int = 0, empresa:int = 0, id_mktp:int = 0, colaborador = '', entrada:datetime = None, centro_distribuicao:str = ''):
        self.agendamentos.append(Agendamento(id_bd, id_agend_ml, id_tipo, empresa, id_mktp, colaborador, entrada, centro_distribuicao))

    def insert_agendamento_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_agendamento_in_bd(agendamento.to_tuple())

    def search_agendamento(self, att_name:str = '', att_value:str = ''):
        return next((i for i in self.agendamentos if str(getattr(i, att_name)) == att_value), None)
    
    def insert_produto(self, agendamento:Agendamento = None,
                    id_bd:int = 0, 
                    id_tiny:str = '', 
                    id_ml:str = '', 
                    nome:str = '', 
                    sku:str = '', 
                    gtin:str = '', 
                    unidades:int = 0, 
                    estoque_error_flag:str = '',
                    imagem_url:str = ''):
        produto = Produto(id_agend=agendamento.id_bd, id_bd=id_bd, id_tiny=id_tiny, id_ml=id_ml, nome=nome, sku=sku, gtin=gtin, unidades=unidades, estoque_error_flag=estoque_error_flag, imagem_url=imagem_url) 
        agendamento.insert_produto(produto)

    def insert_produto_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_produto_in_bd(agendamento.return_produtos_in_tuple())

    def search_produto(self, agendamento:Agendamento, att_name:str = '', att_value:str = ''):
        return next((i for i in agendamento.produtos if str(getattr(i, att_name)) == att_value), None)

    def insert_composicao(self, produto:Produto = None, 
                        id_bd:int = 0, 
                        fk_id_prod:int = 0, 
                        nome:str = '', 
                        sku:str = '',
                        id_tiny:str = '',
                        gtin:str = '',
                        unidades_por_kit:int = 0,
                        unidades_de_kits:int = 0,
                        estoque_tiny:int = 0,
                        localizacao:str = '',
                        estoque_error_flag:str = ''):
        composicao = Composicao(id_bd=id_bd, fk_id_prod=fk_id_prod, nome=nome, sku=sku, prod_sku=produto.sku, id_tiny=id_tiny, gtin=gtin, prod_gtin=produto.gtin, unidades_por_kit=unidades_por_kit, unidades_de_kits=unidades_de_kits, estoque_tiny=estoque_tiny, localizacao=localizacao, estoque_error_flag=estoque_error_flag)
        produto.insert_composicao(composicao)

    def insert_composicao_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_composicao_in_bd(agendamento.return_all_composicoes_in_tuple())

    def insert_composicao_alteracao_in_bd(self, produto:Produto = None, comp_list_dict:list[dict] = []):
        comp_to_change = [produto.search_composicao('id_bd', i['id_bd']) for i in comp_list_dict]
        self.db_controller.insert_alteracao_in_bd([i.to_tuple_alteracao() for i in comp_to_change])

    def insert_composicao_compras_in_bd(self, produto:Produto = None, comp_list_dict:list[dict] = []):
        comp_to_change = [produto.search_composicao('id_bd', i['id_bd']) for i in comp_list_dict]
        self.db_controller.insert_compras_in_bd([i.to_tuple_compra() for i in comp_to_change])

    def search_composicao(self, produto:Produto, att_name:str = '', att_value:str = ''):
        return next((i for i in produto.composicoes if str(getattr(i, att_name)) == att_value), None)

    def create_agendamento_from_pdf(self, 
                                    pdf_path: str, 
                                    id_agend_ml: str, 
                                    id_tipo: int, 
                                    empresa: int, 
                                    id_mktp: int,
                                    colaborador: str,
                                    centro_distribuicao: None) -> Agendamento:
        """Create complete Agendamento with Produtos from PDF"""
        try:
            # Create base agendamento
            agendamento = Agendamento(
                id_agend_ml=id_agend_ml,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                centro_distribuicao=centro_distribuicao,
                colaborador=colaborador
            )
            
            # Parse PDF
            product_data_list = self.pdf_service.parse_pdf_to_dict(pdf_path)
            
            # Create products and add to agendamento
            for product_data in product_data_list:
                produto = Produto(
                    id_ml=product_data['id_ml'],
                    sku=product_data['sku'],
                    nome=product_data['nome'],
                    unidades=product_data['unidades'],
                    gtin=product_data['codigo_uni'],
                    etiqueta=product_data['etiqueta']
                )
                agendamento.insert_produto(produto)
                
                # For now assume simple products (no composition)
                # You would add composition logic here if needed
            
            self.agendamentos.append(agendamento)
            self.view.show_agendamento_created(agendamento)
            return agendamento
            
        except Exception as e:
            self.view.show_error(f"Failed to create agendamento: {str(e)}")
            raise
        
    
    def create_agendamento_from_excel(self,
                                  excel_path: str,
                                  id_tipo: int,
                                  empresa: int,
                                  id_mktp: int,
                                  colaborador: str,
                                  upload_uuid: str) -> Agendamento:
        """
        Cria um Agendamento com Produtos e Composições a partir de um arquivo
        (Excel ou CSV Magalu).
        """
        try:
            agendamento = Agendamento(
                id_agend_ml=upload_uuid,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                colaborador=colaborador
            )

            # Parse genérico (detecta extensão)
            rows = SpreadsheetService.parse_spreadsheet_to_dict(excel_path)
            for row in rows:
                # --- fluxo Excel (.xlsx/.xls) ---
                if 'sku_variacao' in row:
                    sku       = row['sku_variacao'] if row['sku_variacao'] != '-' else (row.get('sku_principal') or 'SKU não encontrado')
                    nome      = row.get('produto', '')
                    unidades  = int(row.get('unidades', 0))
                    id_ml     = str(row.get('item_id', ''))
                # --- fluxo CSV Magalu (.csv) ---
                elif 'sku' in row:
                    sku       = row['sku']
                    nome      = row.get('produto', '')
                    unidades  = int(row.get('unidades', 0))
                    id_ml     = ''
                else:
                    # linha inesperada: pula
                    continue

                produto = Produto(
                    id_ml     = id_ml,
                    nome      = nome,
                    sku       = sku,
                    unidades  = unidades
                )
                agendamento.insert_produto(produto)

            self.agendamentos.append(agendamento)
            self.view.show_agendamento_created(agendamento)
            return agendamento

        except Exception as e:
            self.view.show_error(f"Failed to create agendamento: {str(e)}")
            raise

    def create_agendamento_from_bd_data(self, agendamento:Agendamento = None):
        if agendamento is None:
            db_resp = self.db_controller.get_all_agendamentos()
            if type(db_resp) is tuple:
                # Este caso provavelmente não acontece, mas mantendo a lógica
                self.insert_agendamento(db_resp[0], db_resp[1], db_resp[2], db_resp[3], db_resp[4], db_resp[5], db_resp[7], db_resp[6])
            elif type(db_resp) is list:
                for tuple_data in db_resp:
                    # CORREÇÃO: Passando todos os parâmetros do banco de dados com os nomes corretos.
                    self.insert_agendamento(
                        id_bd=tuple_data[0],
                        id_agend_ml=tuple_data[1],
                        id_tipo=tuple_data[2],
                        empresa=tuple_data[3],
                        id_mktp=tuple_data[4],
                        colaborador=tuple_data[5],
                        centro_distribuicao=tuple_data[6],
                        entrada=tuple_data[7]
                    )
        else:
            db_resp = self.get_agendamento_by_id(agendamento)[0]
            agendamento.id_agend_ml = db_resp[1]
            agendamento.id_tipo = db_resp[2]
            agendamento.empresa = db_resp[3]
            agendamento.id_mktp = db_resp[4]
            agendamento.colaborador = db_resp[5]
            agendamento.centro_distribuicao = db_resp[6]
            entrada_db = db_resp[7] 
            if isinstance(entrada_db, str):
                try:
                    agendamento.entrada = datetime.strptime(entrada_db, '%Y-%m-%d %H:%M:%S')
                except (ValueError, TypeError):
                    agendamento.entrada = datetime.now()
            elif entrada_db is None: # Adiciona esta verificação
                agendamento.entrada = datetime.now()
            else:
                agendamento.entrada = entrada_db
            produtos = self.return_all_produtos_from_agendamento(agendamento)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9],
                                    imagem_url=prod_bd[10]
                                    )
                produto:Produto = agendamento.produtos[-1]
                composicoes = self.return_all_composicoes_from_produto(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        localizacao=comp_bd[9],
                                        estoque_error_flag=comp_bd[10])
                    
    def create_agendamento_for_alteracao(self):
        db_resp = self.db_controller.get_all_agendamentos_in_alteracoes()
        for resp in db_resp:
            self.insert_agendamento(resp[0], resp[1], resp[2], resp[3], resp[4], resp[5], resp[6])
            agendamento = self.get_last_made_agendamento()

            produtos = self.get_produtos_from_alteracoes(agendamento)
            print(produtos)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9]
                                    )
                produto:Produto = agendamento.produtos[-1]
                self.view.display_produto(produto)
                composicoes = self.get_composicao_from_alteracoes(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        estoque_error_flag=comp_bd[9])
                    
    def create_agendamento_for_compras(self):
        db_resp = self.db_controller.get_all_agendamentos_in_compras()
        for resp in db_resp:
            self.insert_agendamento(resp[0], resp[1], resp[2], resp[3], resp[4], resp[5], resp[6])
            agendamento = self.get_last_made_agendamento()

            produtos = self.get_produtos_from_compras(agendamento)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9]
                                    )
                produto:Produto = agendamento.produtos[-1]
                composicoes = self.get_composicao_from_compras(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        estoque_error_flag=comp_bd[9])
                    
    def create_joined_agendamento(self):
        join_agend = JoinedAgendamento()
        for agendamento in self.agendamentos:
            join_agend.insert_agendamento(agendamento)
        join_agend.set_produtos()
        return join_agend
    
    def return_joined_composicoes_from_joined_agend(self, join_agend:JoinedAgendamento = None):
        return join_agend.return_comp_grouped()

    def set_empresa_colaborador_agend(self, agendamento:Agendamento, empresa:int = 0, colaborador:str = ''):
        agendamento.set_colaborador(colaborador)
        agendamento.set_empresa(empresa)
        
    def get_compras_data(self):
        return self.db_controller.get_composicoes_from_compras()

    def get_produtos_from_alteracoes(self, agendamento:Agendamento = None):
        return self.db_controller.get_produtos_from_alteracoes(agendamento.id_bd)

    def get_composicao_from_alteracoes(self, produto:Produto = None):
        return self.db_controller.get_composicao_from_alteracoes(produto.id_bd)

    def get_produtos_from_compras(self, agendamento:Agendamento = None):
        return self.db_controller.get_produtos_from_compras(agendamento.id_bd)

    def get_composicao_from_compras(self, produto:Produto = None):
        return self.db_controller.get_composicao_from_compras(produto.id_bd)

    def get_last_made_agendamento(self) -> Agendamento:
        return self.agendamentos[-1]
    
    def get_last_made_agendamento_in_bd(self):
        return self.db_controller.get_last_agendamento()

    def get_agendamento_by_id(self, agendamento:Agendamento = None):
        return self.db_controller.get_agendamento_by_bd_id(agendamento.id_bd)

    def get_prod_data_tiny(self, agendamento:Agendamento = None):
        for produto in agendamento.produtos:
            # Faz a chamada à API
            resp = self.caller.make_call('produtos', params_add={'codigo': produto.sku})
            time.sleep(1.25)

            # --- CORREÇÃO INÍCIO ---
            # Verifica se a resposta é um dicionário e se contém a chave 'itens'
            if isinstance(resp, dict) and 'itens' in resp:
                itens = resp['itens']
                if len(itens) == 1 : 
                    produto.set_gtin(itens[0].get('gtin'))
                    produto.set_id_tiny(itens[0].get('id'))
                    produto.set_is_kit(itens[0].get('tipo'))
                elif len(itens) > 1:
                    item_ativo = next((i for i in itens if i.get('situacao') == 'A'), None)
                    if item_ativo is not None:
                        produto.set_gtin(item_ativo.get('gtin'))
                        produto.set_id_tiny(item_ativo.get('id'))
                        produto.set_is_kit(item_ativo.get('tipo'))
            else:
                # Se a chamada falhou, loga um aviso e continua para o próximo produto
                print(f"AVISO: Falha ao buscar dados do produto com SKU {produto.sku} no Tiny. Resposta: {resp}")
            # --- CORREÇÃO FIM ---


    def get_comp_tiny(self, agendamento:Agendamento = None):
        for produto in agendamento.produtos:
            if produto.is_kit:
                resp = self.caller.make_call(f'produtos/{produto.id_tiny}/kit')
                time.sleep(1.25)
                for r_comp in resp:
                    self.insert_composicao(produto, fk_id_prod=produto.id_bd, nome=r_comp['produto']['descricao'], sku=r_comp['produto']['sku'], id_tiny=r_comp['produto']['id'], unidades_por_kit=r_comp['quantidade'], unidades_de_kits=produto.unidades)
            else:
                self.insert_composicao(produto, 0, produto.id_bd, produto.nome, produto.sku, produto.id_tiny, produto.gtin, 1, produto.unidades, 0, '')


    def get_comp_data_tiny(self, agendamento:Agendamento = None):
        composicoes_dict = self.get_all_composicoes_grouped(agendamento)
        for id_tiny in composicoes_dict:
            resp = self.caller.make_call(f'produtos/{id_tiny}')
            time.sleep(1.25)
            
            # --- CORREÇÃO INÍCIO ---
            # Verifica se a resposta da API foi bem-sucedida (é um dicionário)
            if not isinstance(resp, dict):
                print(f"AVISO: Falha ao buscar dados da composição com id_tiny {id_tiny}. Resposta: {resp}")
                # Pula para a próxima iteração do loop
                continue

            gtin_value = resp.get('gtin')
            estoque_info = resp.get('estoque')

            # Aplica os valores para todas as composições com o mesmo id_tiny
            for composicao in composicoes_dict[id_tiny]:
                composicao.set_gtin(gtin_value if gtin_value is not None else '')

                if estoque_info:
                    composicao.set_estoque_tiny(estoque_info.get('quantidade', 0))
                    composicao.set_localizacao(estoque_info.get('localizacao', ''))
                else:
                    composicao.set_estoque_tiny(0)
                    composicao.set_localizacao('Indefinido')
            # --- CORREÇÃO FIM ---

    def set_id_bd_for_all(self, agendamento:Agendamento = None, last_id_agend:int = 0):
        agendamento.set_id_bd(last_id_agend)
        agendamento.set_id_agend_for_produtos()

    def get_all_composicoes_grouped(self, agendamento:Agendamento = None) -> dict:
        composicoes_dict = {}
        
        for produto in agendamento.produtos:
            for composicao in produto.composicoes:
                key = composicao.id_tiny
                
                if key in composicoes_dict:
                    composicoes_dict[key].append(composicao)
                else:
                    composicoes_dict[key] = [composicao]
        
        return composicoes_dict
    
    def return_all_produtos_from_agendamento(self, agendamento:Agendamento = None):\
        return self.db_controller.get_all_produtos_from_agendamento(agendamento.id_bd)

    def return_all_composicoes_from_produto(self, produto:Produto = None):
        return self.db_controller.get_all_composicoes_from_produto(produto.id_bd)

    def return_comp_grouped(self, agendamento:Agendamento = None) -> list[Composicao]:
        composicoes_dict = {}
        
        for produto in agendamento.produtos:
            for composicao in produto.composicoes:
                # Usando SKU como chave para agrupamento (pode ser id_tiny ou outro campo único)
                key = composicao.sku
                
                if key in composicoes_dict:
                    # Se já existe, soma as unidades
                    existing = composicoes_dict[key]
                    existing.unidades_totais += composicao.unidades_totais
                    existing.insert_comp_origem(composicao)
                    existing.insert_produto_origem(produto)
                else:
                    # Se não existe, adiciona ao dicionário
                    composicoes_dict[key] = JoinedComposicao(composicao.sku, composicao.id_tiny, composicao.estoque_tiny)
                    composicoes_dict[key].unidades_totais += composicao.unidades_totais
                    composicoes_dict[key].insert_comp_origem(composicao)
                    composicoes_dict[key].insert_produto_origem(produto)
        
        return list(composicoes_dict.values())
    
    def set_error_flags_composicoes(self, agendamento:Agendamento = None):
        comp_list:list[Composicao] = self.return_comp_grouped(agendamento)
        for i in comp_list:
            i.set_flag_in_joined_comp()
        for i in agendamento.produtos:
            i.set_estoque_error_flag()

    def update_empresa_colaborador_bd(self, agendamento:Agendamento = None):
        self.db_controller.update_empresa_colaborador_agend(agendamento.id_bd, agendamento.empresa, agendamento.colaborador)
    

    def update_agendamento(self, agendamento:Agendamento = None):
        self.db_controller.update_agendamento(agendamento.id_bd, agendamento.id_agend_ml, agendamento.id_tipo, agendamento.empresa, agendamento.id_mktp, agendamento.colaborador, agendamento.centro_distribuicao)

    def update_quant_compra(self, id_comp:int = 0, quant:int = 0):
        self.db_controller.update_quant_total_compras(id_comp, quant)
        self.db_controller.clean_compras(id_comp)

    def return_agend_in_dict(self, agendamento:Agendamento = None):
        return agendamento.to_dict()
    
    def return_produtos_agend_in_dict(self, agendamento:Agendamento = None):
        return [i.to_dict() for i in agendamento.produtos]
    
    def return_comp_produtos_in_dict(self, produto:Produto = None):
        return [i.to_dict() for i in produto.composicoes]
    
    def return_comp_produtos_in_dict_for_api(self, produto:Produto = None, attrs:list = []):
        return [i.to_dict_for_api(attrs) for i in produto.composicoes]
    
    def return_all_in_dict(self, agendamento:Agendamento = None):
        temp_dict = self.return_agend_in_dict(agendamento)
        temp_dict['produtos'] = self.return_produtos_agend_in_dict(agendamento)
        for produto in temp_dict['produtos']:
            produto['composicao'] = self.return_comp_produtos_in_dict(self.search_produto(agendamento, 'id_bd', str(produto['id_bd'])))
        return temp_dict
    
    def return_joined_agend_in_dict(self, joined_agend:JoinedAgendamento = None):
        joined_agend_list = []
        for agendamento in joined_agend.agend_origem:
            joined_agend_list.append(self.return_all_in_dict(agendamento))
        return joined_agend_list
    
    def return_agend_in_tuple(self, agendamento:Agendamento = None):
        return agendamento.to_tuple()
    
    def return_produtos_agend_in_tuple(self, agendamento:Agendamento = None):
        return [i.to_tuple() for i in agendamento.produtos]
    
    def return_comp_produtos_in_tuple(self, produto:Produto = None):
        return [i.to_tuple() for i in produto.composicoes]
    
    def return_all_composicoes_to_tuple(self, agendamento:Agendamento = None):
        temp_list = []
        for produto in agendamento.produtos:
            temp_list += produto.return_composicao_in_tuple()
        return temp_list
    
    def return_composicoes_to_alteracao(self, comp_list:list[Composicao] = []):
        return [i.to_tuple_alteracao() for i in comp_list]

    def clear_agendamentos(self):
        self.agendamentos = []

    def test_connection(self):
        return self.db_controller.test_connection()
    
    
    def update_pdf_agendamento(self, id_bd: int, colaborador: str, empresa: int, id_mktp: int, id_tipo: int, pdf_path: str, new_id_agend_ml: str, centro_distribuicao: None):
        try:
            # 1) carrega todos os agendamentos do DB em memória
            self.create_agendamento_from_bd_data()
            agendamento = self.search_agendamento("id_bd", str(id_bd))
            if not agendamento:
                return False, f"Agendamento com id_bd={id_bd} não encontrado."

            # --- INÍCIO DA CORREÇÃO ---
            # Guarda o centro de distribuição original antes de qualquer modificação
            centro_original = agendamento.centro_distribuicao
            # --- FIM DA CORREÇÃO ---

            # 2) atualiza meta-dados em memória, incluindo o novo número do pedido
            agendamento.id_agend_ml = new_id_agend_ml
            agendamento.set_colaborador(colaborador)
            agendamento.set_empresa(empresa)
            agendamento.set_mktp(id_mktp)
            agendamento.set_tipo(id_tipo)
            # --- CORREÇÃO ---
            # Usa o valor original que acabamos de guardar
            agendamento.set_centro(centro_original)

            # 3) limpa produtos e composições antigas do banco
            self.db_controller.delete_composicoes_by_agendamento(id_bd)
            self.db_controller.delete_produtos_by_agendamento(id_bd)

            # 4) reprocessa o PDF usando o novo id_agend_ml
            self.create_agendamento_from_pdf(
                pdf_path=pdf_path,
                id_agend_ml=new_id_agend_ml,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                # --- CORREÇÃO ---
                # Passa o valor original para o novo agendamento que será criado
                centro_distribuicao=centro_original,
                colaborador=colaborador
            )
            novo = self.agendamentos[-1]
            # mantém o mesmo id_bd
            self.set_id_bd_for_all(novo, id_bd)

            # 5) refaz integração com Tiny e reinserção no banco
            self.get_prod_data_tiny(novo)
            self.get_comp_tiny(novo)
            self.get_comp_data_tiny(novo)
            self.insert_produto_in_bd(novo)
            for tpl in self.return_all_produtos_from_agendamento(novo):
                produto = self.search_produto(novo, 'etiqueta', tpl[2])
                if produto:
                    produto.set_id_bd(tpl[0])
                    produto.set_id_bd_for_composicoes()
            self.set_error_flags_composicoes(novo)
            self.insert_composicao_in_bd(novo)

            # 6) finalmente atualiza o registro de agendamento com o novo número
            self.db_controller.update_agendamento(
                id_agend_bd=novo.id_bd,
                id_agend_ml=novo.id_agend_ml,
                id_agend_tipo=novo.id_tipo,
                empresa=novo.empresa,
                id_mktp=novo.id_mktp,
                colaborador=novo.colaborador,
                # --- CORREÇÃO ---
                # Garante que o valor final salvo no banco é o correto
                centro_distribuicao=novo.centro_distribuicao
            )

            return True, "Atualizado com sucesso."

        except Exception as e:
            return False, f"Erro ao atualizar agendamento: {str(e)}"


    def insert_agendamento_in_bd(self, agendamento: Agendamento):
        if self.db_controller.exists_agendamento_ml(agendamento.id_agend_ml):
            self.view.show_error(f"Já existe um agendamento com o número {agendamento.id_agend_ml}.")
            return False
        self.db_controller.insert_agendamento_in_bd(agendamento.to_tuple())
        return True

    def get_product_image_url(self, sku: str) -> str:
        """
        Busca a URL da imagem de um produto no Tiny a partir do SKU.
        Retorna uma string vazia se não encontrar.
        """
        imagem_url = ""
        if not sku:
            return imagem_url
            
        try:
            # Etapa 1: Buscar o ID do produto pelo SKU, considerando apenas produtos ativos
            params = {'codigo': sku, 'situacao': 'A'}
            resp_sku = self.caller.make_call("produtos", params_add=params)
            time.sleep(1.25)

            if resp_sku.get('itens') and len(resp_sku['itens']) > 0:
                id_tiny = resp_sku['itens'][0].get('id')
                
                if id_tiny:
                    # Etapa 2: Buscar os detalhes do produto pelo ID
                    resp_details = self.caller.make_call(f"produtos/{id_tiny}")
                    time.sleep(1.25)
                    
                    # Etapa 3: Extrair a URL do primeiro anexo, se existir
                    if resp_details.get('anexos') and len(resp_details['anexos']) > 0:
                        imagem_url = resp_details['anexos'][0].get('url', "")
        except Exception as e:
            # Em um ambiente de produção, seria ideal logar este erro
            print(f"CONTROLADOR: Erro ao buscar imagem para o SKU {sku}: {e}")
            return "" # Retorna vazio em caso de qualquer erro
            
        return imagem_url

    def excluir_agendamento_completo(self, id_agend_bd: int) -> bool:
        """
        Orquestra a exclusão de um agendamento e todos os seus dados relacionados.
        """
        try:
            self.db_controller.delete_agendamento_completo(id_agend_bd)
            return True
        except Exception as e:
            print(f"Erro ao excluir agendamento completo (ID: {id_agend_bd}): {e}")
            return False
│  │  └─ DatabaseController.py
from base_jp_lab import Access

class DatabaseController:
    def __init__(self, access_obj:Access = None):
        self.access = access_obj

    def get_all_agendamentos(self):
        return self.access.custom_select_query("SELECT * FROM agendamento")
    
    def get_agendamento_by_bd_id(self, id_agend_bd:int = 0):
        return self.access.custom_select_query("SELECT * FROM agendamento WHERE id_agend = %s", (id_agend_bd,))
        
    def insert_agendamento_in_bd(self, agendamento_tuple:tuple = ()):
        self.access.custom_i_u_query(
        "INSERT INTO agendamento (id_agend_ml, id_tipo_agend, empresa_agend, id_mktp, colaborador_agend, centro_distribuicao, entrada_agend) VALUES (%s, %s, %s, %s, %s, %s, %s);",
        [agendamento_tuple])

    def insert_produto_in_bd(self, produtos:list[tuple] = []):
        self.access.custom_i_u_query("INSERT INTO produtos_agend (id_agend_prod, id_prod_ml, id_prod_tiny, sku_prod, gtin_prod, unidades_prod, e_kit_prod, nome_prod, estoque_flag_prod, imagem_url_prod) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", produtos)

    def insert_composicao_in_bd(self, composicoes:list[tuple] = []):
        self.access.custom_i_u_query("INSERT INTO comp_agend (id_prod_comp, id_comp_tiny, gtin_comp, sku_comp, nome_comp, unidades_por_kit_comp, unidades_totais_comp, estoque_tiny_comp, localizacao_comp, estoque_flag_comp, imagem_url_comp) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", composicoes)

    def insert_alteracao_in_bd(self, composicoes:list[tuple] = []):
        print(composicoes)
        self.access.custom_i_u_query("INSERT IGNORE INTO alteracoes_agend (id_comp_alt, id_prod_alt, id_tiny, gtin_alt, sku_alt, nome_alt) VALUES (%s, %s, %s, %s, %s, %s);", composicoes)

    def insert_compras_in_bd(self, composicoes:list[tuple] = []):
        print(composicoes)
        self.access.custom_i_u_query("INSERT INTO compras_agend (id_comp_compra, id_prod_compra, id_tiny, gtin_compra, sku_compra, nome_compra, quant_comprar) VALUES (%s, %s, %s, %s, %s, %s, %s) ON DUPLICATE KEY UPDATE quant_comprar = (quant_comprar + VALUES(quant_comprar));", composicoes)

    def update_empresa_colaborador_agend(self, id_agend_bd:int = 0, id_mktp:int = 0, empresa:int = 0, colaborador:str = ''):
        self.access.custom_i_u_query("UPDATE agendamento SET empresa_agend = %s, id_mktp = %s, colaborador_agend = %s WHERE id_agend = %s;", [(empresa, id_mktp, colaborador, id_agend_bd)])

    def update_agendamento(self, id_agend_bd:int = 0, id_agend_ml:str = '', id_agend_tipo:int = 0, empresa:int = 0, id_mktp:int = 0, colaborador:str = '', centro_distribuicao:str = ''):
        self.access.custom_i_u_query(
            "UPDATE agendamento SET id_agend_ml = %s, id_tipo_agend = %s, empresa_agend = %s, id_mktp = %s, colaborador_agend = %s, centro_distribuicao = %s WHERE id_agend = %s;",
            (id_agend_ml, id_agend_tipo, empresa, id_mktp, colaborador, centro_distribuicao, id_agend_bd)
        )

    def update_quant_total_compras(self, id_comp:int = 0, quant:id = 0):
        self.access.custom_i_u_query("UPDATE compras_agend SET quant_comprar = quant_comprar - %s WHERE id_compra = %s;", [(quant, id_comp)])

    def clean_compras(self, id_comp:int = 0):
        self.access.custom_i_u_query("DELETE FROM compras_agend WHERE id_compra = %s AND quant_comprar <= 0;", [(id_comp,)])

    # ADICIONAR CONDIÇÃO PARA CASO NADA SEJA ENCONTRADO

    def get_last_agendamento(self):
        return self.access.custom_select_query("SELECT * FROM agendamento ORDER BY id_agend DESC LIMIT 1;")[0]
    
    def get_last_produto(self):
        return self.access.custom_select_query("SELECT * FROM produtos_agend ORDER BY id_prod DESC LIMIT 1;")[0]
    
    def get_last_composicao(self):
        return self.access.custom_select_query("SELECT * FROM comp_agend ORDER BY id_comp DESC LIMIT 1;")[0]
    
    def get_all_produtos_from_agendamento(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT * FROM produtos_agend WHERE id_agend_prod = %s;", (id_agendamento,))
    
    def get_all_composicoes_from_produto(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT * FROM comp_agend WHERE id_prod_comp = %s;", (id_produto,))
    
    def get_all_agendamentos_in_alteracoes(self):
        return self.access.custom_select_query("SELECT DISTINCT a.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend;")
    
    def get_produtos_from_alteracoes(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT p.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend\
                                                 WHERE a.id_agend = %s;", (id_agendamento,))
    
    def get_composicao_from_alteracoes(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT c.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 JOIN comp_agend c\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend AND al.id_comp_alt = c.id_comp\
                                                 WHERE p.id_prod = %s;", (id_produto,))
    
    def get_all_agendamentos_in_compras(self):
        return self.access.custom_select_query("SELECT DISTINCT a.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend;")
    
    def get_produtos_from_compras(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT p.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend\
                                                 WHERE a.id_agend = %s;", (id_agendamento,))
    
    def get_composicao_from_compras(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT c.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 JOIN comp_agend c\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend AND ca.id_comp_compra = c.id_comp\
                                                 WHERE p.id_prod = %s;", (id_produto,))
        
    def get_composicoes_from_compras(self):
        return self.access.custom_select_query("SELECT * FROM compras_agend;")
    
    def insert_excel_upload(self, upload_tuple: tuple):
        """Insere um registro de upload de Excel"""
        self.access.custom_i_u_query(
            "INSERT INTO excel_uploads (uuid, filename) VALUES (%s, %s);",
            [upload_tuple]
        )

    def get_excel_upload(self, uuid: str):
        """Busca um registro de upload pelo uuid"""
        return self.access.custom_select_query(
            "SELECT * FROM excel_uploads WHERE uuid = %s;", (uuid,)
        )[0]

    
    def test_connection(self):
        return self.access
    
    def delete_composicoes_by_agendamento(self, id_agendamento: int):
        return self.access.custom_i_u_query(
            """
            DELETE FROM comp_agend 
            WHERE id_prod_comp IN (
                SELECT id_prod 
                FROM produtos_agend 
                WHERE id_agend_prod = %s
            );
            """, [(id_agendamento,)]
        )

    def delete_produtos_by_agendamento(self, id_agendamento: int):
        return self.access.custom_i_u_query(
            "DELETE FROM produtos_agend WHERE id_agend_prod = %s;", [(id_agendamento,)]
        )
        
    def exists_agendamento_ml(self, ml_id: str) -> bool:
        sql = f"SELECT 1 FROM agendamento WHERE id_agend_ml = '{ml_id}'"
        return bool(self.access.custom_select_query(sql))

    def delete_agendamento_completo(self, id_agend_bd: int):
        """
        Executa a exclusão em cascata de um agendamento e todos os seus dados associados.
        A ordem das queries é fundamental para respeitar as chaves estrangeiras.
        """
        
        # Pega o id_agend_ml antes de excluir, para limpar tabelas que usam ele
        id_ml_result = self.access.custom_select_query("SELECT id_agend_ml FROM agendamento WHERE id_agend = %s;", (id_agend_bd,))
        id_agend_ml = id_ml_result[0][0] if id_ml_result else None

        # Lista de produtos associados ao agendamento
        produtos_result = self.access.custom_select_query("SELECT id_prod FROM produtos_agend WHERE id_agend_prod = %s;", (id_agend_bd,))
        id_produtos = tuple([row[0] for row in produtos_result])

        # --- INÍCIO DA CORREÇÃO ---
        if id_produtos:
            # Cria a string de placeholders, ex: "(%s, %s, %s)"
            placeholders = ', '.join(['%s'] * len(id_produtos))

            # 1. Limpa tabelas de logs/tracking usando a nova query formatada
            query_alteracoes = f"DELETE FROM alteracoes_agend WHERE id_prod_alt IN ({placeholders})"
            # O método custom_i_u_query espera uma lista de tuplas, então passamos [id_produtos]
            self.access.custom_i_u_query(query_alteracoes, [id_produtos])

            query_compras = f"DELETE FROM compras_agend WHERE id_prod_compra IN ({placeholders})"
            self.access.custom_i_u_query(query_compras, [id_produtos])
            
            # 2. Limpa as composições dos produtos
            query_composicoes = f"DELETE FROM comp_agend WHERE id_prod_comp IN ({placeholders})"
            self.access.custom_i_u_query(query_composicoes, [id_produtos])

            # 4. Limpa os produtos do agendamento (este DELETE estava correto, mas movemos para o final do bloco)
            self.access.custom_i_u_query("DELETE FROM produtos_agend WHERE id_agend_prod = %s;", [(id_agend_bd,)])
        # --- FIM DA CORREÇÃO ---


        if id_agend_ml:
            # 3. Limpa tabelas que usam o id_agend_ml (esta parte já estava correta)
            self.access.custom_i_u_query("DELETE FROM agendamento_produto_bipagem WHERE id_agend_ml = %s;", [(id_agend_ml,)])
            self.access.custom_i_u_query("DELETE FROM relatorio_agend WHERE id_agend_ml = %s;", [(id_agend_ml,)])
        
        # 5. Finalmente, exclui o agendamento principal (esta parte já estava correta)
        self.access.custom_i_u_query("DELETE FROM agendamento WHERE id_agend = %s;", [(id_agend_bd,)])
        
        return True
    
    def get_caixas_by_agendamento_ml(self, id_agend_ml: str) -> list:
        """
        Busca todas as caixas e seus respectivos itens para um determinado agendamento.
        Retorna uma lista de dicionários, onde cada dicionário representa uma caixa.
        """
        # Primeiro, busca todas as caixas do agendamento
        query_caixas = "SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml = %s ORDER BY caixa_num"
        caixas_result = self.access.custom_select_query(query_caixas, (id_agend_ml,))
        
        # Converte a lista de tuplas para uma lista simples de números de caixa
        numeros_caixas = [row[0] for row in caixas_result]
        
        resultado_final = []
        if not numeros_caixas:
            return resultado_final

        # Para cada caixa, busca seus itens
        for num in numeros_caixas:
            query_itens = """
                SELECT sku, quantidade 
                FROM embalagem_caixa_itens 
                WHERE id_agend_ml = %s AND caixa_num = %s
            """
            itens_result = self.access.custom_select_query(query_itens, (id_agend_ml, num))
            
            itens_da_caixa = [
                {"sku": item[0], "quantidade": item[1]} for item in itens_result
            ]
            
            resultado_final.append({
                "caixa_num": num,
                "itens": itens_da_caixa
            })
            
        return resultado_final
│  ├─ models/
│  │  ├─ __init__.py
from .AgendamentoModel import Agendamento
from .ProdutoModel import Produto
from .ComposicaoModel import Composicao
from .JoinedComposicaoModel import JoinedComposicao
from .DatabaseModel import Database
from .JoinedAgendamentoModel import JoinedAgendamento
│  │  ├─ AgendamentoModel.py
# agendamentos_web/classes/models/AgendamentoModel.py

from .ProdutoModel import Produto
from datetime import datetime

class Agendamento:
    """ Classe feita para gerenciar os dados de um agendamento """
    def __init__(self, 
                 id_bd:int = 0, 
                 id_agend_ml:str = '', 
                 id_tipo:int = 0,
                 empresa:int = 0,
                 id_mktp:int = 0,
                 colaborador = '',
                 entrada:datetime = datetime.now(),
                 centro_distribuicao: str = ''):
        """
        Instancia um objeto da classe Agendamento

        Args
        -----------    
            id_bd (int): ID da composição no Banco de dados.
            id_agend_ml (str): ID do agendamento no ML.
            id_tipo (int): ID do tipo do agendamento.
            empresa (int): ID da empresa do agendamento.
            colaborador (str): Nome do colaborador.

        Vars
        -----------
            produtos (list[Produto]): Lista com todos os produtos do agendamento.
        """
        self.id_bd = id_bd
        self.id_agend_ml = id_agend_ml
        self.id_tipo = id_tipo
        self.empresa = empresa
        self.id_mktp = id_mktp
        self.colaborador = colaborador
        self.centro_distribuicao = centro_distribuicao
        if isinstance(entrada, str):
            try:
                # Tenta converter a string para datetime (ajuste o formato se o do seu BD for diferente)
                self.entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M:%S')
            except (ValueError, TypeError):
                # Se a conversão falhar, usa a data/hora atual como fallback.
                self.entrada = datetime.now()
        elif entrada is None:
            # Se a entrada for None (valor padrão ou do BD), usa a data/hora atual.
            self.entrada = datetime.now()
        else:
            # Se já for um objeto datetime, apenas o atribui.
            self.entrada = entrada


        self.produtos:list[Produto] = []

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"Agendamento\
                \n\tID BD: {self.id_bd}\
                \n\tID agendamento: {self.id_agend_ml}\
                \n\tID tipo: {self.id_tipo}"

    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "id_agend_ml": self.id_agend_ml,
            "id_tipo": self.id_tipo,
            "empresa": self.empresa,
            "id_mktp": self.id_mktp,
            "colaborador": self.colaborador,
            "entrada_agend": self.entrada,
            "produtos": []
        }
    
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.id_agend_ml,
            self.id_tipo,
            self.empresa,
            self.id_mktp,
            self.colaborador,
            self.centro_distribuicao,
            self.entrada
        )

    def insert_produto(self, produto_obj:Produto = None):
        """ Insere um produto ao agendamento """
        self.produtos.append(produto_obj)

    def search_produto(self, att_name:str = '', att_value:str = ''):
        """ Busca por um produto baseado em um atributo e um valor """
        return next((i for i in self.produtos if getattr(i, att_name) == att_value), None)
    
    def set_id_bd(self, id_bd:int = 0):
        """ Insere o id do agendamento """
        self.id_bd = id_bd

    def set_colaborador(self, colaborador:str = ''):
        """ Insere o colaborador do agendamento """
        self.colaborador = colaborador

    def set_empresa(self, empresa:int = 0):
        """ Insere o id da empresa do agendamento """
        self.empresa = empresa
        
    def set_mktp(self, id_mktp:int = 0):
        """ Insere o id da empresa do agendamento """
        self.id_mktp = id_mktp
        
    def set_id_agend_for_produtos(self):
        """ Insere o id do agendamento a todos os produtos dentro dele """
        for produto in self.produtos:
            produto.set_id_agend(self.id_bd)
            
    def set_tipo(self, tipo:int = 0):
        """ Insere o tipo do agendamento """
        self.id_tipo = tipo

    # --- CORREÇÃO ADICIONADA AQUI ---
    def set_centro(self, centro_distribuicao: str = ''):
        """ Insere o centro de distribuição do agendamento """
        self.centro_distribuicao = centro_distribuicao
    # --- FIM DA CORREÇÃO ---

    def return_produtos_in_tuple(self):
        """ Retorna todos os produtos em tuples """
        return [produto.to_tuple() for produto in self.produtos]
    
    def return_all_composicoes_in_tuple(self):
        """ Retorna todas as composições em tuples """
        temp_list = []
        for produto in self.produtos:
            temp_list += produto.return_composicao_in_tuple()
        return temp_list
    
    def update_pdf_agendamento(self, id_bd: int, pdf_path: str):
        """
        Atualiza o PDF de um agendamento existente, deletando dados antigos
        e inserindo os novos a partir do novo PDF.
        """
        try:
            # 1. Confirma que o agendamento existe
            agend_data = self.db_controller.get_agendamento_by_bd_id(id_bd)
            if not agend_data:
                raise ValueError(f"Agendamento com ID {id_bd} não encontrado.")

            agendamento = Agendamento(id_bd=id_bd) # Objeto simplificado para o processo

            # 2. Deleta produtos e composições antigos (importante a ordem)
            self.db_controller.delete_composicoes_by_agend_id(id_bd)
            self.db_controller.delete_produtos_by_agend_id(id_bd)

            # 3. Processa o novo PDF
            product_data_list = self.pdf_service.parse_pdf_to_dict(pdf_path)
            
            for product_data in product_data_list:
                produto = Produto(
                    id_agend=agendamento.id_bd, # Vincula ao agendamento existente
                    id_ml=product_data.get('id_ml', ''),
                    sku=product_data.get('sku', ''),
                    nome=product_data.get('nome', ''),
                    unidades=product_data.get('unidades', 0),
                    gtin=product_data.get('codigo_uni', ''),
                    etiqueta=product_data.get('etiqueta', '')
                )
                agendamento.insert_produto(produto)

            # 4. Busca dados do Tiny para os novos produtos
            self.get_prod_data_tiny(agendamento)
            self.get_comp_tiny(agendamento)
            self.get_comp_data_tiny(agendamento)

            # 5. Insere os novos produtos e composições no BD
            self.insert_produto_in_bd(agendamento)
            
            # Recarrega o agendamento com os produtos recém-inseridos para obter os IDs
            # corretos, necessários para inserir as composições.
            agendamento.produtos = [] # Limpa a lista temporária
            self.create_agendamento_from_bd_data(agendamento)
            
            self.insert_composicao_in_bd(agendamento)

            # 6. Atualiza as flags de erro de estoque
            self.set_error_flags_composicoes(agendamento)
            
            return True, "PDF atualizado com sucesso."

        except Exception as e:
            self.view.show_error(f"Falha ao atualizar o PDF do agendamento: {str(e)}")
            return False, f"Falha ao atualizar o PDF: {str(e)}"
│  │  ├─ ComposicaoModel.py
class Composicao:
    """ Classe feita para gerenciar os dados de uma composição """
    def __init__(self, 
                id_bd:int = 0, 
                fk_id_prod:int = 0, 
                nome:str = '', 
                sku:str = '',
                prod_sku:str = '',
                id_tiny:str = '',
                gtin:str = '',
                prod_gtin:str = '',
                unidades_por_kit:int = 0,
                unidades_de_kits:int = 0,
                estoque_tiny:int = 0,
                localizacao:str = '',
                estoque_error_flag:str = '',
                imagem_url:str = ''):
        """
        Instancia um objeto da classe Composicao

        Args
        -----------   
            id_bd (int): ID da composição no Banco de dados.
            fk_id_prod (int): ID do produto no Banco de dados.
            nome (str): Nome da composição.
            sku (str): Sku da composição.
            prod_sku (str): Sku do produto que é pai dessa composição.
            id_tiny (str): ID da composição no Tiny.
            gtin (str): GTIN/EAN da composição.
            prod_gtin (Str): GTIN/EAN do produto que é pai dessa composição.
            unidades_por_kit (int): Unidades da composição por unidade do produto.
            unidades_de_kits (int): Unidades do produto.
            etiqueta (str): Etiqueta da composição.
            estoque_error_flag (str): Bandeira que diz se há algum erro na quantia de estoque.
            imagem_url (str): Imagem do anuncio do produto

        Vars
        -----------
            unidades_totais (int): Quantidade total de unidades da composição (un. por kit * un. de kits)
        """
        self.id_bd = id_bd
        self.fk_id_prod = fk_id_prod
        self.nome = nome
        self.sku = sku
        self.prod_sku = prod_sku
        self.id_tiny = id_tiny
        self.gtin = gtin
        self.prod_gtin = prod_gtin
        self.unidades_por_kit = unidades_por_kit  
        self.unidades_de_kits = unidades_de_kits
        self.unidades_totais:int = unidades_de_kits * unidades_por_kit 
        self.estoque_tiny = estoque_tiny
        self.localizacao = localizacao
        self.estoque_error_flag = estoque_error_flag
        self.imagem_url = imagem_url

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"\n\t -- Composicão -- \
                \n\t\tID BD: {self.id_bd}\
                \n\t\tID Prod BD: {self.fk_id_prod}\
                \n\t\tNome: {self.nome}\
                \n\t\tSKU: {self.sku}\
                \n\t\tGTIN: {self.gtin}\
                \n\t\tLocalização: {self.localizacao}\
                \n\t\tUnidades por kit: {self.unidades_por_kit}\
                \n\t\tUnidades de Kit: {self.unidades_de_kits}\
                \n\t\tUnidades Totais: {self.unidades_totais}"
                
    
    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "fk_id_prod": self.fk_id_prod,
            "nome": self.nome,
            "sku": self.sku,
            "id_tiny": self.id_tiny,
            "gtin": self.gtin,
            "unidades_por_kit": self.unidades_por_kit,
            "unidades_de_kits": self.unidades_de_kits,
            "unidades_totais": self.unidades_totais,
            "estoque_tiny": self.estoque_tiny,
            "localizacao": self.localizacao,
            "estoque_error_flag": self.estoque_error_flag,
            "imagem_url": self.imagem_url
        }
        
    def to_dict_for_api(self, attrs:list = []):
        temp_dict = {}
        for attr in attrs:
            temp_dict.update({attr: getattr(self, attr)})
        return temp_dict
        
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome,
            self.unidades_por_kit,
            self.unidades_totais, 
            self.estoque_tiny, 
            self.localizacao,
            self.estoque_error_flag,
            self.imagem_url
        )
    
    def to_tuple_alteracao(self):
        """ Transforma o objeto num tuple para enviar à tabela de alteração """
        return (
            self.id_bd,
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome
            )
        
    def to_tuple_compra(self):
        """ Transforma o objeto num tuple para enviar à tabela de compras """
        return (
            self.id_bd,
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome,
            self.unidades_totais
            )

    def set_gtin(self, gtin:str = ''):
        """ Insere o GTIN da composição """
        if gtin != '':
            self.gtin = gtin
        else:
            self.gtin = "GTIN/EAN não encontrado"

    def set_unidades_por_kit(self, unidades_por_kit:int = 0):
        """ Insere a quantidade de unidades por kit da composição """
        self.unidades_por_kit = unidades_por_kit

    def set_estoque_tiny(self, estoque_tiny:int = 0):
        """ Insere o estoque do tiny da composição """
        self.estoque_tiny = estoque_tiny

    def set_id_bd(self, id_bd:int = 0):
        """ Insere o ID da composição """
        self.id_bd = id_bd

    def set_fk_id_prod(self, fk_id_prod:int = 0):
        """ Insere o ID do produto pai da composição """
        self.fk_id_prod = fk_id_prod
    
    def set_localizacao(self, localizacao:str = ''):
        self.localizacao = localizacao

    def set_estoque_error_flag(self, estoque_error_flag):
        """ Insere a bandeira de estoque da composição """
        if estoque_error_flag in ['green', 'yellow', 'red']:
            self.estoque_error_flag = estoque_error_flag
        else:
            print("Valor de bandeira inválido")
            return
    
    def set_imagem_url(self, url: str): # NOVO MÉTODO
        """ Define a URL da imagem para esta composição. """
        self.imagem_url = url if url else ''
│  │  ├─ DatabaseModel.py
import mysql.connector

class Database:
    def __init__(self, user:str, password:str, host:str, port:str, name:str):
        self.user = user
        self.password = password
        self.host = host
        self.port = port
        self.name = name
        self.con = None
        self.cursor = None
    
    def __enter__(self):
        self.con = mysql.connector.connect(
            host=self.host, 
            user = self.user,
            password=self.password,
            database=self.name,
            port=self.port)
        self.cursor = self.con.cursor()

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.cursor.close()
        self.con.close()

        self.cursor = None
        self.con = None

    def custom_select_query(self, query:str) -> list|dict:
        """
        Processa uma query inteiramente feita pelo usuário
        
        Args
        ----------
            query (str): Query feita pelo usuário.
        """
        if self.con is not None:
            self.con.cursor.execute(query)
            return_val = self.con.cursor.fetchall()
            return return_val
        
    def custom_i_u_query(self, query:str, data:list) -> None:
        """
        Insere ou altera dados no banco baseado na query e nos dados enviados pelo usuário
        
        Args
        ----------
            query (str): Query feita pelo usuário.
            data (list): Lista com os dados que serão inseridos
        """
        self.con.cursor.executemany(query, data)
        self.con.db.commit()
        print('Dados inseridos/alterados')
        return
│  │  ├─ JoinedAgendamentoModel.py
from .AgendamentoModel import Agendamento
from .JoinedComposicaoModel import JoinedComposicao
from .ComposicaoModel import Composicao

class JoinedAgendamento:
    def __init__(self):
        self.agend_origem = []
        self.produtos = []
        self.joined_comps = []

    def insert_agendamento(self, agendamento:Agendamento = None):
        self.agend_origem.append(agendamento)

    def set_produtos(self):
        if len(self.agend_origem) > 0:
            for agend in self.agend_origem:
                self.produtos += agend.produtos

    def return_comp_grouped(self) -> list[Composicao]:
        composicoes_dict = {}
        
        for produto in self.produtos:
            for composicao in produto.composicoes:
                # Usando SKU como chave para agrupamento (pode ser id_tiny ou outro campo único)
                key = composicao.sku
                
                if key in composicoes_dict:
                    # Se já existe, soma as unidades
                    existing = composicoes_dict[key]
                    existing.unidades_totais += composicao.unidades_totais
                    existing.insert_comp_origem(composicao)
                    existing.insert_produto_origem(produto)
                else:
                    # Se não existe, adiciona ao dicionário
                    composicoes_dict[key] = JoinedComposicao(composicao.sku, composicao.id_tiny, composicao.estoque_tiny)
                    composicoes_dict[key].unidades_totais += composicao.unidades_totais
                    composicoes_dict[key].insert_comp_origem(composicao)
                    composicoes_dict[key].insert_produto_origem(produto)
        
        return list(composicoes_dict.values())
        
│  │  ├─ JoinedComposicaoModel.py
from .ComposicaoModel import Composicao
from .ProdutoModel import Produto

class JoinedComposicao:
    """ Classe feita para gerenciar os dados da união de várias composições """
    def __init__(self,
                sku:str = '',
                id_tiny:str = '',
                estoque_tiny:int = 0):
        self.sku = sku
        self.id_tiny = id_tiny
        self.estoque_tiny = estoque_tiny
        self.unidades_totais:int = 0
        self.comp_origem:list[Composicao] = []
        self.produto_origem:list[Produto] = []
        self.estoque_error_flag:str = ''

    def __repr__(self):
        return f"\n\t -- Junção de Composicões -- \
                    \n\t\tSKU: {self.sku}\
                    \n\t\tUnidades Totais: {self.unidades_totais}"
    
    def to_dict(self):
        return {
                "sku": self.sku,
                "id_tiny": self.id_tiny,
                "unidades_totais": self.unidades_totais,
                "composicao": [i.to_dict() for i in self.comp_origem],
                "produtos_origem": [i.to_dict() for i in self.produto_origem],
                "estoque_error_flag": self.estoque_error_flag
            }

    def insert_comp_origem(self, composicao:Composicao = None):
        self.comp_origem.append(composicao)

    def insert_produto_origem(self, produto:Produto = None):
        self.produto_origem.append(produto)

    def set_flag_in_joined_comp(self):
        joined_comp_flag = ''
        if self.unidades_totais > self.estoque_tiny:
            joined_comp_flag = 'red'
        elif self.unidades_totais < self.estoque_tiny:
            joined_comp_flag = 'green'

        if joined_comp_flag == 'green':
            for i in self.comp_origem:
                i.set_estoque_error_flag('green')
        else:
            for composicao in self.comp_origem:
                if composicao.unidades_totais > composicao.estoque_tiny:
                    composicao.set_estoque_error_flag('red')
                elif composicao.unidades_totais == composicao.estoque_tiny:
                    composicao.set_estoque_error_flag('yellow')            
│  │  └─ ProdutoModel.py
from .ComposicaoModel import Composicao

class Produto:
    """ Classe feita para gerenciar os dados de um produto """
    def __init__(self, 
                id_agend:int = 0,
                id_bd:int = 0,
                id_tiny:str = '',
                id_ml:str = '',
                nome:str = '',
                sku:str = '',
                gtin:str = '',
                etiqueta:str = '',
                unidades:int = 0,
                estoque_error_flag:str = '',
                imagem_url:str = ''):
        """
        Instancia um objeto da classe Produto

        Args
        -----------   
            id_agend (int): ID do agendamento no Banco de dados.
            id_bd (int): ID do produto no Banco de dados.
            id_tiny (str): ID do produto no Tiny.
            id_ml (str): ID do produto no ML.
            nome (str): Nome do produto.
            sku (str): Sku do produto.
            gtin (str): GTIN/EAN do produto.
            etiqueta (str): Etiqueta do produto.
            unidades (int): Unidades do produto.
            estoque_error_flag (str): Bandeira que diz se há algum erro na quantia de estoque.

        Vars
        -----------
            is_kit (bool): É ou não um kit
        """
        self.id_agend = id_agend
        self.id_bd = id_bd
        self.id_tiny = id_tiny
        self.id_ml = id_ml
        self.nome = nome
        self.sku = sku
        self.gtin = gtin
        self.etiqueta = etiqueta
        self.unidades = unidades
        self.estoque_error_flag = estoque_error_flag
        self.is_kit:bool = False 
        self.imagem_url = imagem_url

        self.composicoes:list[Composicao] = []

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"\n -- Produto -- \
                \n\tID BD: {self.id_bd}\
                \n\tID Agend BD: {self.id_agend}\
                \n\tID Tiny: {self.id_tiny}\
                \n\tNome: {self.nome}\
                \n\tSKU: {self.sku}\
                \n\tGTIN: {self.gtin}\
                \n\tEtiqueta: {self.etiqueta}\
                \n\tÉ kit: {self.is_kit}\
                \n\tUnidades: {self.unidades}"
    
    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "id_tiny": self.id_tiny,
            "id_ml": self.id_ml,
            "nome": self.nome,
            "sku": self.sku,
            "gtin": self.gtin,
            "etiqueta": self.etiqueta,
            "unidades": self.unidades,
            "estoque_error_flag": self.estoque_error_flag,
            "imagem_url": self.imagem_url,
            "composicao": []
        }
    
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.id_agend,
            self.id_ml,
            self.id_tiny,
            self.sku,
            self.gtin,
            self.unidades,
            self.is_kit, 
            self.nome, 
            self.estoque_error_flag,
            self.imagem_url
        )
    
    
    def set_id_tiny(self, id_tiny:str = ''):
        """ Insere o id do produto no Tiny """
        self.id_tiny = id_tiny

    def set_gtin(self, gtin:str = ''):
        """ Insere o GTIN/EAN """
        if gtin != '':
            self.gtin = gtin
        else:
            self.gtin = "GTIN/EAN não encontrado"

    def set_is_kit(self, is_kit:bool = False):
        """ Insere se é ou não um kit  """
        if is_kit == 'K':
            self.is_kit = True
        else:
            self.is_kit = False

    def insert_composicao(self, composicao_obj:Composicao = None):
        """ Insere uma composição no objeto """
        self.composicoes.append(composicao_obj)

    def search_composicao(self, att_name:str = '', att_value:str = ''):
        """ Busca por uma composição baseado em um atributo e um valor """
        return next((i for i in self.composicoes if getattr(i, att_name) == att_value), None)
    
    def set_id_bd(self, id_bd:int = 0):
        """ Insere o id do produto no banco de dados """
        self.id_bd = id_bd

    def set_id_agend(self, id_agend:int = 0):
        """ Insere o id do agendamento """
        self.id_agend = id_agend

    def set_estoque_error_flag(self):
        """ Vê as bandeiras em sua composição e, a partir delas, decide qual será a sua """
        flags = [i.estoque_error_flag for i in self.composicoes]
        if 'red' in flags:
            self.estoque_error_flag = 'red'
        elif 'yellow' in flags:
            self.estoque_error_flag = 'yellow'
        else:
            self.estoque_error_flag = 'green'

    def set_imagem_url(self, url: str): # <-- NOVO MÉTODO
        """ Define a URL da imagem para este produto. """
        self.imagem_url = url if url else ''
        
    def set_id_bd_for_composicoes(self):
        """ Insere o id_bd do produto em todas as suas composições """
        for composicao in self.composicoes:
            composicao.set_fk_id_prod(self.id_bd)
    
    def return_composicao_in_tuple(self):
        """ Retorna toda a composição do produto numa lista de tuples """
        return [comp.to_tuple() for comp in self.composicoes]

│  ├─ services/
│  │  ├─ __init__.py
from .PdfService import PdfService
from .SpreadsheetService import SpreadsheetService
│  │  ├─ PdfService.py
# PdfService.py
import pandas as pd
import camelot
import os
from typing import List, Dict

class PdfService:
    """Handles all PDF parsing and raw data extraction"""
    
    TEMP_FOLDER = 'temp'
    
    @staticmethod
    def parse_pdf_to_dict(pdf_path: str) -> list[Dict]:
        """Extract product data from PDF and return as list of dicts"""
        try:
            # Read PDF tables
            tables = camelot.read_pdf(pdf_path, pages='all')
            tables.export('temp/pdf_data.csv', f='csv')
            
            # Combine tables
            dfs = []
            for i in range(1, tables.n + 1):
                df = pd.read_csv(f'temp/pdf_data-page-{i}-table-1.csv', thousands=',')
                dfs.append(df)
                os.remove(f'temp/pdf_data-page-{i}-table-1.csv')
            
            combined_df = pd.concat(dfs, ignore_index=True)
            
            # Parse into product dictionaries
            products = []
            for _, row in combined_df.iterrows():
                product_str = row['PRODUTO'].replace('\n', ' ').replace(' ', ',')
                parts = product_str.split(',')
                
                product_data = {
                    'id_ml': parts[2],
                    'codigo_uni': parts[5],
                    'sku': parts[7],
                    'nome': ' '.join(parts[8:]).replace(',', ' ').strip(),
                    'unidades': row['UNIDADES'],
                    'etiqueta': row['ETIQUETA #'].split('#')[1]
                }
                products.append(product_data)
            
            os.remove(pdf_path)
            return products
            
        except Exception as e:
            raise ValueError(f"PDF parsing failed: {str(e)}")
│  │  └─ SpreadsheetService.py
# classes/services/SpreadsheetService.py
import pandas as pd
import os
from typing import List, Dict

class SpreadsheetService:
    """Manipula a leitura e processamento de planilhas (Excel, CSV Magalu, etc.)."""

    @staticmethod
    def parse_spreadsheet_to_dict(path: str) -> List[Dict]:
        """
        Detecta o tipo de arquivo e retorna uma lista de dicts normalizados.
        - .xlsx/.xls: fluxo genérico de marketplace (agrupa duplicatas etc.)
        - .csv     : fluxo Magalu (colunas fixas SKU, Nome do Produto, Pedidos Finalizados, mandar)
        """
        ext = os.path.splitext(path)[1].lower()

        if ext in (".xls", ".xlsx"):
            # fluxo atual de Excel (openpyxl)
            df = pd.read_excel(path, engine="openpyxl")

            # normalização de nomes de colunas
            df = df.rename(columns={
                'ID do Item':        'item_id',
                'Produto':           'produto',
                'ID da Variação':    'variacao_id',
                'Nome da Variação':  'nome_variacao',
                'SKU da Variação':   'sku_variacao',
                'SKU Principle':     'sku_principal',
                'Unidades (Pedido pago)': 'unidades'
            })

            # descartar linhas sem quantidade
            df = df[df['unidades'].notna()]

            # agrupar duplicatas somando 'unidades'
            df_agg = (
                df
                .groupby(
                    ['item_id','sku_variacao','sku_principal','produto','nome_variacao'],
                    as_index=False
                )
                .agg({'unidades':'sum'})
            )

            return df_agg.to_dict(orient='records')

        elif ext == ".csv":
            # fluxo específico para CSV Magalu
            try:
                df = pd.read_csv(path, sep=';')
            except UnicodeDecodeError:
                df = pd.read_csv(path, sep=';', encoding='latin-1')

            # renomeia colunas para o nosso esquema
            df = df.rename(columns={
                'SKU': 'sku',
                'Nome do Produto': 'produto',
                'mandar': 'unidades'
            })

            # mantém só o que importa
            df = df[['sku', 'produto', 'unidades']]

            # preenche strings faltantes e força tudo como texto
            df['sku']     = df['sku'].fillna('').astype(str)
            df['produto'] = df['produto'].fillna('').astype(str)

            # converte unidades para número, invalidando o que não for
            df['unidades'] = pd.to_numeric(df['unidades'], errors='coerce')

            # joga fora linhas sem unidades válidas (>0)
            df = df[df['unidades'].notna() & (df['unidades'] > 0)]

            # agora é seguro converter para int
            df['unidades'] = df['unidades'].astype(int)

            return df.to_dict(orient='records')


        else:
            raise ValueError(f"Formato não suportado pelo parser: {ext}")

│  ├─ views/
│  │  └─ __init__.py
from .AgendamentoView import AgendamentoView
│  └─ __init__.py
from .controllers import AgendamentoController, DatabaseController
from .models import Agendamento, Produto, Composicao
from .views import AgendamentoView
from .services import PdfService
├─ migrations/
│  └─ 001_create_excel_uploads.sql
CREATE TABLE
    excel_uploads (
        id SERIAL PRIMARY KEY,
        uuid VARCHAR(36) NOT NULL UNIQUE,
        filename TEXT NOT NULL,
        uploaded_at TIMESTAMP NOT NULL DEFAULT NOW ()
    );
├─ rotas/
│  ├─ __init__.py
from .homepage import *
from .auth import *
from .config import *
from .process_pdf import *
from .agendamentos import *
from .alteracoes import *
from .upload_pdf import *
from .retiradoEstoque import *
from .health_check import *
from .teste import *
from .alterar_agendamento import *
from .downloads import *
from .erro import *
from .imprimir_composicoes import *
from .atualizar_pdf import *
from .upload_excel import *
from .view_excel import *
from .reservados import *
from .embalar import *
from .expedicao import *
from .excluir_agendamento import * 
│  ├─ agendamentos.py
from main import app, render_template, agendamento_controller, ParametroInvalido
from flask import session
from datetime import datetime

""" Leva para as páginas 'novoAgendamento' e 'agendamentos' """
@app.route("/agendamentos/<acao>")
def agendamentos(acao):
    if acao == "criar":
        return render_template("novoAgendamento.html")
    elif acao == "ver":
        # 1) Carrega tudo em memória
        agendamento_controller.clear_agendamentos()
        agendamento_controller.create_agendamento_from_bd_data()
        todos = agendamento_controller.agendamentos

        # — Ordena do mais recente para o mais antigo pela data de entrada
        todos.sort(key=lambda a: a.entrada or datetime.min, reverse=True)
        # 2) Filtra pelo role
        role = session.get("role", "all")
        if role == "limp_conf":
            # só Limpeza (1) e Conferência (3)
            dados = [a for a in todos if a.id_tipo in (1, 3)]
        elif role == "emb_exp":
            # só Embalar (4) e Expedição (5)
            dados = [a for a in todos if a.id_tipo in (4, 5)]
        else:
            # 'all' ou qualquer outro role vê tudo
            dados = todos

        # 3) Renderiza só os permitidos
        return render_template("agendamentos.html", dados=dados)

    else:
        raise ParametroInvalido()

│  ├─ alteracoes.py
from main import (
    app, 
    render_template, 
    request, 
    redirect,
    url_for,
    jsonify,
    agendamento_controller, 
    caller, 
    ParametroInvalido, 
    MetodoInvalido, 
    LimiteRequests)
import time

""" Leva para as páginas 'alteracoes' e 'compras' """
@app.route("/alteracoes/<acao>", methods=["GET", "POST"])
def alteracoes(acao):
    if acao == "alterar":
        if request.method == "POST":
            agendamento_controller.clear_agendamentos()

            agendamento_controller.insert_agendamento(request.json["id_agend"])
            agendamento_obj = agendamento_controller.get_last_made_agendamento()
            agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
            # agendamento_controller.view.display_all_in_agend(agendamento_obj)

            produto_obj = agendamento_controller.search_produto(
                agendamento_obj, "id_bd", str(request.json["id_prod"])
            )

            agendamento_controller.insert_composicao_alteracao_in_bd(
                produto_obj, request.json["itens"]
            )

            return "Dados para serem alterados foram inseridos no banco de dados!"
        elif request.method == "GET":
            agendamento_controller.clear_agendamentos()
            agendamento_controller.create_agendamento_for_alteracao()
            joined_agend = agendamento_controller.create_joined_agendamento()

            return render_template(
                "alteracoes.html",
                dados=agendamento_controller.return_joined_composicoes_from_joined_agend(
                    joined_agend
                )
            )
        else:
            raise MetodoInvalido()
    elif acao == "comprar":
        if request.method == "POST":
            agendamento_controller.clear_agendamentos()

            agendamento_controller.insert_agendamento(request.json["id_agend"])
            agendamento_obj = agendamento_controller.get_last_made_agendamento()
            agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
            # agendamento_controller.view.display_all_in_agend(agendamento_obj)

            produto_obj = agendamento_controller.search_produto(
                agendamento_obj, "id_bd", str(request.json["id_prod"])
            )

            agendamento_controller.insert_composicao_compras_in_bd(
                produto_obj, request.json["itens"]
            )

            return "Dados para serem comprados foram inseridos no banco de dados!"
        else:
            agendamento_controller.clear_agendamentos()

            return render_template(
                "compras.html",
                dados=agendamento_controller.get_compras_data()
            )
    else:
        raise ParametroInvalido()


@app.route("/dados-compra-tiny/<id_tiny>")
async def teste(id_tiny):
    
    try:
        resp = caller.make_call(f"produtos/{id_tiny}")
        time.sleep(5)
    except BaseException:
        raise LimiteRequests()
    return resp

@app.route("/dados-estoque/<id_tiny>")
async def dados_estoque(id_tiny):
    try:
        resp = caller.make_call(f"estoque/{id_tiny}")
        time.sleep(5)
        if isinstance(resp, dict) and "status" in resp and resp["status"] >= 400:
            # Se caller.make_call retorna um dicionário com um status de erro
            return jsonify(resp), resp["status"]
        return jsonify(resp)
    except LimiteRequests:
        raise LimiteRequests()
    except Exception as e:
        print(f"Erro inesperado ao chamar a API externa: {e}")
        return jsonify({"error": "Erro interno ao processar a requisição"}), 500

@app.route('/remover-compra/<id>/<quant>')
async def remover(id, quant):
    agendamento_controller.update_quant_compra(id, quant)
    return render_template(
                "compras.html",
                dados=agendamento_controller.get_compras_data()
            )
│  ├─ alterar_agendamento.py
from main import (
    app,
    render_template,
    request,
    agendamento_controller,
    redirect,
    url_for,
    MetodoInvalido
)

@app.route("/alterar-agendamento", methods=["POST", "GET"])
def alt_agend():
    if request.method == "GET":
        # carregar em memória o agendamento a partir do BD
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=int(request.args["id"]))
        agend_obj = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend_obj)

        # se for chamada via AJAX (modal), devolve só o partial
        if request.args.get("modal") == "true":
            return render_template(
                "partials/form_editar_agendamento.html",
                dados=agendamento_controller.get_last_made_agendamento()
            )

        # caso contrário, página completa
        return render_template(
            "alterar_agendamento.html",
            dados=agendamento_controller.get_last_made_agendamento()
        )

    elif request.method == "POST":
        try:
            # 1) Pega o ID do agendamento que veio no form
            id_bd = int(request.form["inp_id"])

            # 2) Busca o registro atual no BD para extrair o colaborador
            registro = agendamento_controller.db_controller.get_agendamento_by_bd_id(id_bd)
            colaborador_atual = registro[0][5] if registro and registro[0][5] else ""
            centro_atual = registro[0][6] if registro and registro[0][6] else ""

            # 3) Recria em memória o objeto de agendamento (mantendo colaborador)
            agendamento_controller.clear_agendamentos()
            agendamento_controller.insert_agendamento(
                id_bd,
                request.form["inp_ml"],
                int(request.form["inp_tipo"]),
                int(request.form["inp_emp"]),
                int(request.form["inp_mktp"]),
                colaborador_atual,
                centro_distribuicao=centro_atual
            )

            # 4) Executa o UPDATE no BD
            agendamento_controller.update_agendamento(
                agendamento_controller.get_last_made_agendamento()
            )

            # resposta para AJAX
            if request.headers.get("X-Requested-With") == "XMLHttpRequest":
                return "ok", 200

            # redireciona com flag de sucesso
            return redirect(url_for("agendamentos", acao="ver", alterado="ok"))

        except Exception as e:
            print(f"Erro ao alterar agendamento: {e}")

            if request.headers.get("X-Requested-With") == "XMLHttpRequest":
                return "erro", 500

            return redirect(url_for("agendamentos", acao="ver", erro="alteracao"))

    else:
        raise MetodoInvalido()

│  ├─ atualizar_agend.py
from main import app, redirect, url_for, request, caller
from collections import Counter

""" Faz o BackEnd atualizar partes de um kit que foram alterados no tiny """
# NÃO FOI REPASSADO PARA A NOVA INFRA
@app.route('/atualizar')
def atualizar_agend():
    bd_data = caller.access.custom_select_query(f'SELECT  p.id_prod_tiny, c.id_comp_tiny FROM comp_agend c JOIN produtos_agend p WHERE id_prod_comp = {request.args['prod_id']} AND c.id_prod_comp = p.id_prod;')
    id_tiny = bd_data[0][0]
    ids_comp = [int(i[1]) for i in bd_data]
    resp = caller.make_call(f'produtos/{id_tiny}/kit')
    ids_kit = [i['produto']['id'] for i in resp]
    if Counter(ids_comp) == Counter(ids_kit):
        print("TUDO IGUAL")
    else:
        print(ids_comp)
        print(ids_kit)
        remove = [(i, request.args['prod_id']) for i in ids_comp if i not in ids_kit]
        caller.access.custom_i_u_query('UPDATE comp_agend SET substituido_comp = 1 WHERE id_comp_tiny = %s AND id_prod_comp = %s', remove)
    return redirect(url_for('retirado_estoque', id=request.args['id'], tipo=request.args['tipo']))
│  ├─ atualizar_pdf.py
import os
import time
from flask import request, redirect, url_for, flash
from werkzeug.utils import secure_filename

# Importe as variáveis globais da sua aplicação (app, controller, etc.)
from main import app, agendamento_controller 

@app.route('/atualizar-pdf', methods=['POST'])
def atualizar_pdf_route():
    # Valida se os campos necessários foram enviados no formulário
    if 'path' not in request.files or 'id_bd_atualizar' not in request.form:
        flash('Requisição inválida. Faltam parâmetros.', 'danger')
        # Redireciona para a página de visualização de agendamentos
        return redirect(url_for('agendamentos', acao='ver'))

    file = request.files['path']
    id_bd = request.form.get('id_bd_atualizar')

    if file.filename == '' or not id_bd:
        flash('Dados incompletos. Selecione um arquivo e tente novamente.', 'warning')
        return redirect(url_for('agendamentos', acao='ver'))

    # Verifica se o arquivo é um PDF
    if file and file.filename.endswith('.pdf'):
        try:
            # Garante um nome de arquivo seguro e único
            filename = secure_filename(f"update_{id_bd}_{int(time.time())}.pdf")
            
            # Define o caminho para salvar o arquivo (ajuste a pasta se necessário)
            upload_folder = app.config.get('UPLOAD_FOLDER', 'uploads') 
            if not os.path.exists(upload_folder):
                os.makedirs(upload_folder)
            pdf_path = os.path.join(upload_folder, filename)
            
            file.save(pdf_path)

            # Chama o método do controller para processar a atualização
            success, message = agendamento_controller.update_pdf_agendamento(int(id_bd), pdf_path)
            
            # Remove o arquivo temporário após o processamento
            os.remove(pdf_path) 

            if success:
                # Adiciona o parâmetro 'atualizado=ok' para o feedback no front-end
                return redirect(url_for('agendamentos', acao='ver', atualizado='ok'))
            else:
                flash(f'Erro na atualização: {message}', 'danger')
                return redirect(url_for('agendamentos', acao='ver'))

        except Exception as e:
            flash(f'Ocorreu um erro inesperado: {str(e)}', 'danger')
            return redirect(url_for('agendamentos', acao='ver'))
    
    # Se o arquivo não for um PDF
    flash('Formato de arquivo inválido. Por favor, envie um PDF.', 'warning')
    return redirect(url_for('agendamentos', acao='ver'))
│  ├─ auth.py
# rotas/auth.py
from flask import (
    Blueprint,
    render_template,
    request,
    redirect,
    url_for,
    session,
    flash
)
from hashlib import sha256
from base_jp_lab import Access

bp_auth = Blueprint(
    'auth',
    __name__,
    template_folder='../templates'   # ajusta se necessário
)

# instância de acesso; se preferir, mova para um arquivo de config comum
access = Access(
    "Bruno_Lallo",
    "ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF",
    "192.168.15.200",
    "3306",
    "jp_bd",
)

def render_error_page(error_title, error_msg, referrer):
    return render_template(
        'error_page.html',
        error_title=error_title,
        error_msg=error_msg,
        referrer=referrer
    )

@bp_auth.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return render_template('login.html')

    usuario = request.form.get('usuario', '').strip()
    senha    = request.form.get('senha', '')

    rows = access.custom_select_query(
        "SELECT id_usuario, nome_usuario, nome_display_usuario, senha_usuario, role "
        "FROM usuarios WHERE nome_usuario = %s",
        (usuario,)
    )

    # Se não encontrou ou a senha não bate, retorna o mesmo erro genérico
    if not rows or sha256(senha.encode()).hexdigest() != rows[0][3]:
        return render_template('login.html', login_error="Usuário ou senha incorretos")

    # Autenticação ok
    user_id, _, display_name, _, role = rows[0]
    session.clear()
    session['id_usuario']           = user_id
    session['nome_display_usuario'] = display_name
    session['role'] = role
    return redirect(url_for('homepage'))


@bp_auth.route('/logout')
def logout():
    session.clear()
    flash('Você saiu do sistema.', 'info')
    return redirect(url_for('auth.login'))

│  ├─ config.py
from main import app, render_template

DB_CONFIG = {
    "host": "192.168.15.200",
    "port": 3306,
    "user": "Bruno_Lallo",
    "password": "ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF",
    "database": "jp_bd",
    "autocommit": True,
}

""" Leva para a página 'config' """
@app.route('/config')
def config():
    return render_template('config.html')
│  ├─ downloads.py
from main import app, request, pd, send_from_directory, redirect, url_for, ParametroInvalido
import datetime

@app.route("/compra-planilha/<extensao>", methods=['POST'])
def compra_para_csv(extensao):
    if extensao == 'excel' or extensao == 'csv' or extensao == 'pdf':
        filename = f'compras-{datetime.datetime.today().strftime('%d-%m-%Y')}.{'csv' if extensao == 'csv' else 'xlsx'}'
        df = pd.DataFrame(eval(request.form['dados']))
        if extensao == 'csv':
            df.to_csv(f'temp/{filename}', index=False, encoding='utf-8')
        elif extensao == 'excel':
            df.to_excel(f'temp/{filename}', index=False)
        elif extensao == 'pdf':
            return 'IMPLEMENTAÇÃO AINDA NÃO FEITA' # TODO Implementar construção e download de PDF
        else:
            raise ParametroInvalido()
        return redirect(url_for('download_compra', filename=filename))
    else:
        return redirect(url_for('erro', error_title='Teste', error_msg='Teste-MSG'))
    
@app.route("/download-compra/<filename>")
def download_compra(filename):
    file = send_from_directory('temp', filename)
    return file

# TODO Limpar arquivos criados após o envio. FONTE: https://stackoverflow.com/questions/53747258/flask-send-file-not-sending-file
│  ├─ embalar.py
from flask import Blueprint, render_template, request, jsonify
from base_jp_lab import Caller
from classes.models.DatabaseModel import Database
from classes.controllers.DatabaseController import DatabaseController
from classes.controllers.AgendamentoController import AgendamentoController
import mysql.connector


bp_embalar = Blueprint("embalar", __name__, template_folder="templates")

# Configuração de acesso ao MySQL
_db_config = {
'host': '192.168.15.200',
'port': 3306,
'user': 'Bruno_Lallo',
'password': 'ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF',
'database': 'jp_bd',
'autocommit': True
}

@bp_embalar.route("/api/embalar/buscar_anuncios", methods=["GET"])
def buscar_anuncios():
    id_agendamento = request.args.get("id_agendamento")
    if not id_agendamento:
        return jsonify({"error": "ID do agendamento não fornecido."}), 400

    try:
        # 1) instanciar DB, Caller e controller de agendamento
        db = Database()
        db_ctrl = DatabaseController(db)
        caller = Caller()
        ag_ctrl = AgendamentoController(db_ctrl, caller)

        # 2) monta objeto Agendamento
        ag = ag_ctrl.create_agendamento_from_bd_data(id_agendamento)
        if not ag:
            return jsonify({"error": "Agendamento não encontrado."}), 404

        anuncios = []
        for produto in ag.produtos:
            pd = produto.to_dict()

            # === busca URL da imagem no Tiny ===
            try:
                detalhes = caller.make_call(f"produtos/{produto.id_tiny}")
                anexos = detalhes.get("anexos", [])
                pd["imagemUrl"] = anexos[0].get("url", "") if anexos else ""
            except Exception:
                pd["imagemUrl"] = ""

            # === busca composição real do kit no Tiny ===
            try:
                kits_resp = caller.make_call(f"produtos/{produto.id_tiny}/kits")
                kits = kits_resp.get("kits", [])
                pd["composicoes"] = [{
                    "nome":             kit.get("nome"),
                    "sku":              kit.get("sku"),
                    "unidades_totais":  kit.get("quantidade", 0),
                    # compara quantidade pedida x estoque disponível no Tiny (se houver)
                    "estoque_error_flag": (
                        "red" if kit.get("quantidade", 0) > kit.get("estoque_tiny", 0)
                        else "green"
                    )
                } for kit in kits]
            except Exception:
                # fallback para a composição que você já tinha
                pd["composicoes"] = [c.to_dict() for c in produto.composicoes]

            anuncios.append(pd)

        return jsonify({"success": True, "anuncios": anuncios})

    except Exception as e:
        print(f"Erro ao buscar anúncios: {e}")
        return jsonify({"error": "Erro interno do servidor ao buscar anúncios."}), 500

@bp_embalar.route("/api/embalar/bipar", methods=["POST"])
def bipar_embalagem():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    id_prod_ml = data.get("id_prod_ml")
    if not id_agend or not id_prod_ml: # E verificamos a nova variável
        return jsonify(error="Parâmetros 'id_agend_ml' e 'id_prod_ml' são obrigatórios."), 400

    insert_sql = """
        INSERT INTO embalagem_bipados (id_agend_ml, id_prod_ml, bipados)
        VALUES (%s, %s, 1)
        ON DUPLICATE KEY UPDATE bipados = bipados + 1
    """
    select_sql = """
        SELECT bipados FROM embalagem_bipados WHERE id_agend_ml = %s AND id_prod_ml = %s
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(insert_sql, (id_agend, id_prod_ml))
        cur.execute(select_sql, (id_agend, id_prod_ml))
        row = cur.fetchone()
        novo_total = row[0] if row else 0
        cur.close()
        conn.close()
        return jsonify(id_prod_ml=id_prod_ml, bipados=novo_total)
    except Exception as e:
        print(f"Erro em bipar_embalagem: {e}")
        return jsonify(error=str(e)), 500

@bp_embalar.route('/api/embalar/bipados/<id_agend_ml>')
def api_embalar_bipados(id_agend_ml):
    select_sql = """
        SELECT id_prod_ml, bipados
        FROM embalagem_bipados
        WHERE id_agend_ml = %s
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(select_sql, (id_agend_ml,))
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return jsonify([{'id_prod_ml': r[0], 'bipados': r[1]} for r in rows])
    except Exception as e:
        print(f"Erro em api_embalar_bipados: {e}")
        return jsonify(error=str(e)), 500
    
# cria uma nova caixa
@bp_embalar.route("/api/embalar/caixa", methods=["POST"])
def criar_caixa():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    if not id_agend:
        return jsonify(error="id_agend_ml obrigatório"), 400

    # conta quantas caixas já existem pra esse agendamento
    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM embalagem_caixas WHERE id_agend_ml=%s", (id_agend,))
    num = cur.fetchone()[0] + 1
    cur.execute("INSERT INTO embalagem_caixas (id_agend_ml, caixa_num) VALUES (%s, %s)",
                (id_agend, num))
    conn.commit()
    cur.close()
    conn.close()
    return jsonify(caixa_num=num), 201

@bp_embalar.route("/api/embalar/caixa/item", methods=["POST"])
def adicionar_item_caixa():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    caixa_num = data.get("caixa_num")
    sku = data.get("sku")
    if not all([id_agend, caixa_num, sku]):
        return jsonify(error="Parâmetros inválidos"), 400

    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor()
    # tenta inserir, ou incrementa se já existir
    cur.execute("""
        INSERT INTO embalagem_caixa_itens (id_agend_ml, caixa_num, sku, quantidade)
        VALUES (%s,%s,%s,1)
        ON DUPLICATE KEY UPDATE quantidade = quantidade + 1
    """, (id_agend, caixa_num, sku))
    conn.commit()
    # lê quantidade atual
    cur.execute("""
    SELECT quantidade FROM embalagem_caixa_itens
    WHERE id_agend_ml=%s AND caixa_num=%s AND sku=%s
    """, (id_agend, caixa_num, sku))
    qtd = cur.fetchone()[0]
    cur.close()
    conn.close()
    return jsonify(caixa_num=caixa_num, sku=sku, quantidade=qtd), 200

@bp_embalar.route("/api/embalar/caixa/<id_agend_ml>", methods=["GET"])
def buscar_caixas(id_agend_ml):
    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor(dictionary=True)
    # primeiro todas as caixas
    cur.execute("SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml=%s ORDER BY caixa_num", (id_agend_ml,))
    caixas = [r["caixa_num"] for r in cur.fetchall()]
    resultado = []
    for num in caixas:
        cur.execute("""
            SELECT sku, quantidade FROM embalagem_caixa_itens
            WHERE id_agend_ml=%s AND caixa_num=%s
        """, (id_agend_ml, num))
        rows = cur.fetchall()
        itens = [{"sku":   row["sku"],
            "quantidade": row["quantidade"]}
            for row in rows
        ]
        resultado.append({"caixa_num": num, "itens": itens})
    cur.close()
    conn.close()
    return jsonify(resultado)


@bp_embalar.route('/api/embalar/iniciar', methods=['POST'])
def iniciar_embalagem():
    """Cria um registro para um produto no início da embalagem com 0 bipados."""
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    id_prod_ml = data.get("id_prod_ml")

    if not id_agend or not id_prod_ml:
        return jsonify(error="Parâmetros 'id_agend_ml' e 'id_prod_ml' são obrigatórios."), 400

    # Insere com 0 ou atualiza para 0 se já existir por algum motivo
    sql = """
        INSERT INTO embalagem_bipados (id_agend_ml, id_prod_ml, bipados)
        VALUES (%s, %s, 0)
        ON DUPLICATE KEY UPDATE bipados = 0
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(sql, (id_agend, id_prod_ml))
        conn.commit()
        cur.close()
        conn.close()
        return jsonify(success=True, message="Produto iniciado na embalagem.")
    except Exception as e:
        print(f"Erro em iniciar_embalagem: {e}")
        return jsonify(error=str(e)), 500

│  ├─ erro.py
from main import app, render_template, ParametroInvalido, MetodoInvalido, LimiteRequests, ArquivoInvalido

def error_handler(err):
    err_txt = err.description.split('///')
    return render_template("erro.html", erro_title=err_txt[0], erro_msg_primary=err_txt[1], erro_msg_secondary=err_txt[2], erro_code=err.code)

app.register_error_handler(ParametroInvalido, error_handler)
app.register_error_handler(MetodoInvalido, error_handler)
app.register_error_handler(LimiteRequests, error_handler)
app.register_error_handler(ArquivoInvalido, error_handler)
│  ├─ excluir_agendamento.py
from main import app, jsonify, agendamento_controller

@app.route('/agendamento/excluir/<int:id_agendamento>', methods=['DELETE'])
def excluir_agendamento_route(id_agendamento):
    """
    Rota para lidar com requisições de exclusão de agendamentos.
    """
    if not id_agendamento:
        return jsonify({"success": False, "message": "ID do agendamento não fornecido."}), 400

    sucesso = agendamento_controller.excluir_agendamento_completo(id_agendamento)

    if sucesso:
        return jsonify({"success": True, "message": "Agendamento excluído com sucesso."})
    else:
        return jsonify({"success": False, "message": "Erro ao excluir o agendamento."}), 500
│  ├─ expedicao.py
from flask import jsonify, redirect, url_for, json
from main import app, render_template, agendamento_controller, db_controller, ParametroInvalido, access
from datetime import datetime


@app.route('/expedicao/<int:id_agend_bd>')
def expedicao(id_agend_bd: int):
    if not id_agend_bd:
        raise ParametroInvalido()

    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(id_bd=id_agend_bd)
    agendamento_obj = agendamento_controller.get_last_made_agendamento()
    agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)

    if not agendamento_obj or not agendamento_obj.id_agend_ml:
        return "Erro: Agendamento não encontrado no banco de dados.", 404

    caixas_data = db_controller.get_caixas_by_agendamento_ml(agendamento_obj.id_agend_ml)
    produtos_para_json = [p.to_dict() for p in agendamento_obj.produtos]

    # --- NOVA LÓGICA APLICADA AQUI ---
    for caixa in caixas_data:
        # Cria o identificador único no formato "agendamento/caixa"
        caixa['codigo_unico'] = f"{agendamento_obj.id_agend_ml}/{caixa['caixa_num']}"
        # Calcula o total de unidades
        caixa['total_unidades'] = sum(item.get('quantidade', 0) for item in caixa.get('itens', []))
    # --- FIM DA NOVA LÓGICA ---

    return render_template(
        "expedicao.html", 
        dados_agend=agendamento_obj,
        caixas=caixas_data, # Agora cada caixa tem a chave 'codigo_unico'
        todos_os_produtos_json=json.dumps(produtos_para_json)
    )
    
@app.route('/expedicao/finalizar/<int:id_agend_bd>', methods=['POST'])
def finalizar_embalagem(id_agend_bd):
    """
    Finaliza a fase de embalagem, gera um relatório e move o agendamento para a expedição.
    """
    try:
        # 1. Carrega o agendamento completo a partir do banco de dados
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=id_agend_bd)
        agend = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend)

        if not agend:
            return jsonify({"success": False, "message": "Agendamento não encontrado."}), 404

        # 2. Busca dados das caixas e itens embalados para o relatório
        caixas_result = access.custom_select_query(
            "SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml = %s ORDER BY caixa_num",
            (agend.id_agend_ml,)
        )
        
        caixas_relatorio = []
        if caixas_result:
            for caixa_row in caixas_result:
                caixa_num = caixa_row[0]
                # Busca os itens na caixa, incluindo o nome do produto
                itens_result = access.custom_select_query(
                    """SELECT i.sku, i.quantidade, p.nome_prod
                    FROM embalagem_caixa_itens i
                    LEFT JOIN produtos_agend p ON i.sku = p.sku_prod AND p.id_agend_prod = %s
                    WHERE i.id_agend_ml = %s AND i.caixa_num = %s
                    """,
                    (agend.id_bd, agend.id_agend_ml, caixa_num)
                )
                itens_caixa = [{"sku": item[0], "quantidade": item[1], "nome": item[2]} for item in itens_result] if itens_result else []
                caixas_relatorio.append({"caixa_numero": caixa_num, "itens": itens_caixa})

        # 3. Monta o payload do relatório de embalagem
        relatorio_payload = {
            "tipo_relatorio": "embalagem",
            "termino_embalagem": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            "detalhes_embalagem": {
                "total_caixas": len(caixas_relatorio),
                "caixas": caixas_relatorio
            }
        }

        # 4. Busca o relatório de conferência existente para adicionar as novas informações
        relatorio_final = {}
        relatorio_existente_raw = access.custom_select_query(
            "SELECT relatorio FROM relatorio_agend WHERE id_agend_ml = %s", (agend.id_agend_ml,)
        )
        if relatorio_existente_raw and relatorio_existente_raw[0][0]:
            relatorio_final = json.loads(relatorio_existente_raw[0][0])

        # Adiciona os dados de embalagem ao relatório geral
        relatorio_final['RelatorioEmbalagem'] = relatorio_payload

        # 5. Salva o relatório atualizado no banco
        access.custom_i_u_query(
            """INSERT INTO relatorio_agend (id_agend_ml, relatorio) VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE relatorio = VALUES(relatorio)""",
            [(agend.id_agend_ml, json.dumps(relatorio_final, ensure_ascii=False))]
        )

        # 6. Altera o tipo do agendamento para Expedição (ID 5)
        agend.set_tipo(5)
        agendamento_controller.update_agendamento(agend)

        return jsonify({"success": True, "message": "Embalagem finalizada. Agendamento movido para expedição."})

    except Exception as e:
        print(f"Erro ao finalizar embalagem: {e}")
        return jsonify({"success": False, "message": str(e)}), 500
│  ├─ health_check.py
from main import app, agendamento_controller, jsonify

@app.route("/health")
def health_check():
    try:
        # Test database connection
        agendamento_controller.test_connection()
        return jsonify({"status": "healthy", "database": "connected"}), 200
    except Exception as e:
        return jsonify({"status": "unhealthy", "error": str(e)}), 500

│  ├─ homepage.py
from main import app, render_template, session

""" Leva para a página 'index' e cria varíaveis na sessão """
@app.route('/')
def homepage():
    session['id_agendamento'] = ''
    session['agend_process_done'] = False
    session['estoque_tiny_done'] = False
    return render_template('index.html')
│  ├─ imprimir_composicoes.py
from main import app, render_template, agendamento_controller, jsonify

@app.get("/imprimir-comp/<id_agend>")
def imprimir_composicao(id_agend:int):
    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(id_bd=id_agend)
    
    agendamento_obj = agendamento_controller.get_last_made_agendamento()
    
    agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
    
    return_val = agendamento_controller.return_comp_grouped(agendamento_obj)
    
    print(return_val[0].comp_origem[0].localizacao)

    return render_template("imprimir_composicoes.html", comps=sorted(return_val, key=lambda obj: obj.comp_origem[0].localizacao), agendamento=agendamento_obj)

│  ├─ process_pdf.py
from main import app, redirect, url_for, agendamento_controller
from classes.models import Agendamento

""" Faz o BackEnd processar o arquivo PDF baixado e envia os dados ao banco de dados """
@app.route('/process-pdf/<path>/<type>')
def process_pdf(path, type):
    pdf_path = f"{app.config['UPLOAD_FOLDER']}/{path}"
    agendamento_controller.create_agendamento_from_pdf(
        pdf_path=pdf_path,
        id_agend_ml=path.split('-')[1],
        id_tipo=type,
        empresa=0,
        id_mktp=1,
        colaborador=''
    )
    agendamento:Agendamento = agendamento_controller.agendamentos[-1]
    agendamento_controller.get_prod_data_tiny(agendamento)
    agendamento_controller.get_comp_tiny(agendamento)
    agendamento_controller.get_comp_data_tiny(agendamento)

    agendamento_controller.insert_agendamento_in_bd(agendamento)
    # Como é feito após uma inserção, nunca acontecerá de não haver resposta
    id_agend_bd = agendamento_controller.get_last_made_agendamento_in_bd()[0]

    agendamento_controller.set_id_bd_for_all(agendamento, id_agend_bd)

    agendamento_controller.insert_produto_in_bd(agendamento)

    for i in agendamento_controller.return_all_produtos_from_agendamento(agendamento):
        produto = agendamento_controller.search_produto(agendamento, 'etiqueta', i[2])
        produto.set_id_bd(i[0])
        produto.set_id_bd_for_composicoes()

    agendamento_controller.set_error_flags_composicoes(agendamento)

    agendamento_controller.insert_composicao_in_bd(agendamento)

    return redirect(url_for('agendamentos', acao='ver'))

│  ├─ reservados.py
from main import app, render_template

@app.route('/reservados')
def reservados():
    # aqui você pode buscar os "reservados" no banco e passar ao template
    dados_reservados = []  # substitua pela sua lógica
    return render_template('reservados.html', dados=dados_reservados)

│  ├─ retiradoEstoque.py
import json
import mysql.connector
from flask import render_template, Blueprint, request, jsonify, current_app as app, redirect, url_for, make_response
from datetime import datetime
from classes.models import Agendamento
from main import agendamento_controller
import requests
from datetime import datetime, date
import re
import threading
import queue
import uuid
from typing import Literal, Optional
from datetime import datetime
import pytz

tz = pytz.timezone("America/Sao_Paulo")
data_str = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

bp_retirado = Blueprint('retirado', __name__)

_TINY_BASE = "https://api.tiny.com.br/public-api/v3"  # segue seu padrão

# Fila e status de tarefas em memória (simples; reinício do app limpa o estado)
_mov_queue: "queue.Queue[dict]" = queue.Queue()
_mov_status: dict[str, dict] = {}
_mov_worker_started = False

# Configuração de acesso ao MySQL
_db_config = {
    'host': '192.168.15.200',
    'port': 3306,
    'user': 'Bruno_Lallo',
    'password': 'ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF',
    'database': 'jp_bd',
    'autocommit': True
}

# ===================== WORKER (com retries) =====================

def _start_estoque_worker_once():
    """Inicia uma única thread daemon que consome _mov_queue e lança no Tiny (com logs detalhados)."""
    global _mov_worker_started
    if _mov_worker_started:
        print("[estoque-worker] já iniciado.")
        return

    def _estoque_worker():
        import time

        print("[estoque-worker] thread iniciada.")
        while True:
            task = _mov_queue.get()  # bloqueia até ter tarefa
            task_id = task["task_id"]
            print("\n[estoque-worker] >>> Nova task recebida:", task_id)
            print("[estoque-worker] Task bruta:", task)

            try:
                _mov_status[task_id]["status"] = "processando"

                id_produto: int = task["id_produto"]
                id_deposito: int = task["id_deposito"]
                quantidade: float = task["quantidade"]
                tipo_api: Literal["S", "E", "B"] = task["tipo_api"]
                token: str = task["token"]
                observacoes: Optional[str] = task.get("observacoes")
                preco_unitario: Optional[float] = task.get("preco_unitario")

                try:
                    tz = pytz.timezone("America/Sao_Paulo")
                    data_str = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
                except Exception:
                    data_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                quantidade_abs = abs(float(quantidade))
                url = f"{_TINY_BASE}/estoque/{id_produto}"

                current_token = token
                attempt_429 = 0
                did_swap_token = False

                print(f"[estoque-worker:{task_id}] url={url}")
                print(f"[estoque-worker:{task_id}] deposito={id_deposito} produto={id_produto} qtd={quantidade_abs} tipo={tipo_api}")
                print(f"[estoque-worker:{task_id}] token(recebido)={current_token[:5]}...{current_token[-5:] if len(current_token)>5 else current_token} (len={len(current_token)})")

                while True:
                    auth_header = _normalize_bearer(current_token)
                    print(f"[estoque-worker:{task_id}] Authorization header=Bearer <{len(current_token)} chars> (prefix ok={auth_header.lower().startswith('bearer ')})")

                    headers = {
                        "Authorization": auth_header,
                        "User-Agent": "AgendamentosWeb/1.0",
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                    }
                    body = {
                        "deposito": {"id": id_deposito},
                        "tipo": tipo_api,
                        "data": data_str,
                        "quantidade": quantidade_abs,
                        "precoUnitario": float(preco_unitario) if preco_unitario is not None else 0,
                        "observacoes": (observacoes or "")
                    }

                    print(f"[estoque-worker:{task_id}] POST -> Tiny (tentativa 429={attempt_429}, token_trocado={did_swap_token})")
                    try:
                        r = requests.post(url, headers=headers, json=body, timeout=30)
                    except requests.RequestException as req_err:
                        print(f"[estoque-worker:{task_id}] EXCEPTION requests: {req_err}")
                        _mov_status[task_id]["status"] = "falhou"
                        _mov_status[task_id]["error"] = {"exception": str(req_err)}
                        break

                    # Guarda payload essencial e status
                    _mov_status[task_id]["request"] = {
                        "url": url,
                        "body": {**body, "observacoes": "[omitted]" if body.get("observacoes") else ""},
                        "status_code": r.status_code
                    }

                    # Log de resposta
                    resp_text = (r.text or "")
                    short = (resp_text[:300] + ("..." if len(resp_text) > 300 else ""))
                    print(f"[estoque-worker:{task_id}] Tiny respondeu HTTP {r.status_code}")
                    print(f"[estoque-worker:{task_id}] Resumo resposta: {short}")

                    try:
                        resp_json = r.json()
                    except Exception:
                        resp_json = {"raw": resp_text}

                    if 200 <= r.status_code < 300:
                        print(f"[estoque-worker:{task_id}] ✅ CONCLUÍDO. JSON:", resp_json)
                        _mov_status[task_id]["status"] = "concluido"
                        _mov_status[task_id]["result"] = resp_json
                        break

                    # 401/403 -> tenta trocar token UMA vez
                    if r.status_code in (401, 403):
                        print(f"[estoque-worker:{task_id}] ⚠️ Auth falhou ({r.status_code}). Tentando buscar token no DB...")
                        if not did_swap_token:
                            new_tok = _get_fallback_token_from_db()
                            if new_tok and new_tok != current_token:
                                print(f"[estoque-worker:{task_id}] Token trocado: {current_token[:3]}... -> {new_tok[:3]}... (len {len(new_tok)})")
                                did_swap_token = True
                                current_token  = new_tok
                                continue  # reexecuta já com o novo token
                            else:
                                print(f"[estoque-worker:{task_id}] Nenhum token válido retornado do DB (new_tok={bool(new_tok)}).")
                        _mov_status[task_id]["status"] = "falhou"
                        _mov_status[task_id]["error"] = {
                            "status_code": r.status_code,
                            "response": resp_json,
                            "detail": "Falha de autenticação; troca de token indisponível/ineficaz."
                        }
                        break

                    # 429 -> backoff
                    if r.status_code == 429:
                        wait_s = _wait_backoff_429(attempt_429)
                        print(f"[estoque-worker:{task_id}] 429 recebido. Próxima espera: {wait_s}s")
                        attempt_429 += 1
                        if wait_s < 0:
                            print(f"[estoque-worker:{task_id}] ❌ Backoff máximo atingido; encerrando.")
                            _mov_status[task_id]["status"] = "falhou"
                            _mov_status[task_id]["error"] = {
                                "status_code": r.status_code,
                                "response": resp_json,
                                "detail": "Rate limit persistente; backoff máximo atingido."
                            }
                            break
                        time.sleep(wait_s)
                        continue

                    # Outros erros -> falha direta
                    print(f"[estoque-worker:{task_id}] ❌ Erro não tratado para retry (status={r.status_code}).")
                    _mov_status[task_id]["status"] = "falhou"
                    _mov_status[task_id]["error"] = {
                        "status_code": r.status_code,
                        "response": resp_json
                    }
                    break

            except Exception as e:
                print(f"[estoque-worker:{task_id}] EXCEPTION geral:", e)
                _mov_status[task_id]["status"] = "falhou"
                _mov_status[task_id]["error"] = {"exception": str(e)}
                try:
                    app.logger.exception("Falha no worker de estoque")
                except Exception:
                    pass
            finally:
                print(f"[estoque-worker] <<< Task finalizada: {task_id} (status={_mov_status[task_id]['status']})\n")
                _mov_queue.task_done()

    t = threading.Thread(target=_estoque_worker, daemon=True, name="estoque-worker")
    t.start()
    _mov_worker_started = True
    print("[estoque-worker] thread disparada.")
    
@bp_retirado.route('/api/bipagem/detalhe', methods=['GET'])
def api_bipagem_detalhe():
    """
    GET /api/bipagem/detalhe?id_agend_ml=123&sku=API1

    Retorna:
      - bipagem (1 linha de agendamento_produto_bipagem)
      - equivalentes (N linhas de agendamento_produto_bipagem_equivalentes)
      - totais (diretos, equivalentes_total, total)
    """
    try:
        id_agend_ml_raw = request.args.get('id_agend_ml')
        sku = (request.args.get('sku') or '').strip()

        # validações
        try:
            id_agend_ml = int(id_agend_ml_raw)
        except (TypeError, ValueError):
            return _cors_error("Query 'id_agend_ml' deve ser inteiro", 400)
        if not sku:
            return _cors_error("Query 'sku' é obrigatória", 400)
        if len(sku) > 30:
            return _cors_error("Query 'sku' excede 30 caracteres", 400)

        # SQL
        sql_bipagem = """
            SELECT id_agend_ml, sku, bipados
            FROM agendamento_produto_bipagem
            WHERE id_agend_ml = %s AND sku = %s
            LIMIT 1
        """
        sql_equivs = """
            SELECT
                id,
                id_agend_ml,
                sku_original,
                gtin_original,
                id_tiny_original,
                nome_equivalente,
                sku_bipado,
                gtin_bipado,
                id_tiny_equivalente,
                bipados,
                criado_por,
                criado_em,
                atualizado_em,
                observacao
            FROM agendamento_produto_bipagem_equivalentes
            WHERE id_agend_ml = %s AND sku_original = %s
            ORDER BY sku_bipado
        """

        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor(dictionary=True)

        # 1) Direto
        cur.execute(sql_bipagem, (id_agend_ml, sku))
        bipagem = cur.fetchone()  # dict | None

        # 2) Equivalentes
        cur.execute(sql_equivs, (id_agend_ml, sku))
        equivalentes = cur.fetchall()  # list[dict]

        cur.close(); conn.close()

        # helpers
        def serialize(v):
            if isinstance(v, (datetime, date)):
                return v.strftime("%Y-%m-%d %H:%M:%S")
            return v

        def to_int_safe(v, default=0):
            try:
                return int(v)
            except (TypeError, ValueError):
                return default

        # normaliza datas
        for row in (equivalentes or []):
            for k, v in list(row.items()):
                row[k] = serialize(v)

        # totais robustos
        bipados_diretos = to_int_safe(bipagem.get("bipados")) if bipagem else 0
        bipados_equivalentes_total = sum(to_int_safe(e.get("bipados")) for e in (equivalentes or []))
        bipados_total = bipados_diretos + bipados_equivalentes_total

        resp = make_response(jsonify({
            "ok": True,
            "id_agend_ml": id_agend_ml,
            "sku": sku,
            "bipagem": bipagem,                 # dict ou null
            "equivalentes": equivalentes,       # lista (0..N)
            "totais": {
                "bipados_diretos": bipados_diretos,
                "bipados_equivalentes_total": bipados_equivalentes_total,
                "bipados_total": bipados_total
            }
        }), 200)
        _set_cors_headers(resp)  # inofensivo se mesma origem
        return resp

    except Exception as e:
        app.logger.exception("Erro em /api/bipagem/detalhe [GET]")
        resp = make_response(jsonify(ok=False, error=str(e)), 500)
        _set_cors_headers(resp)
        return resp

@bp_retirado.route('/api/bipar', methods=['POST'])
def api_bipar():
    """
    Faz upsert em agendamento_produto_bipagem (bipe direto) e
    retorna o TOTAL = diretos + equivalentes para o sku original.
    """
    data     = request.get_json() or {}
    id_agend = data.get('id_agend')
    sku      = (data.get('sku') or '').strip()
    quant    = int(data.get('quant', 1))

    if not id_agend or not sku:
        return jsonify(error="Parâmetros 'id_agend' e 'sku' são obrigatórios"), 400

    insert_sql = """
        INSERT INTO agendamento_produto_bipagem (id_agend_ml, sku, bipados)
        VALUES (%s, %s, %s)
        ON DUPLICATE KEY UPDATE bipados = bipados + %s
    """
    select_diretos_sql = """
        SELECT bipados
        FROM agendamento_produto_bipagem
        WHERE id_agend_ml = %s AND sku = %s
    """
    select_equiv_sql = """
        SELECT COALESCE(SUM(bipados), 0)
        FROM agendamento_produto_bipagem_equivalentes
        WHERE id_agend_ml = %s AND sku_original = %s
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()

        # Upsert do bip "direto"
        cur.execute(insert_sql, (id_agend, sku, quant, quant))

        # Lê diretos atualizados
        cur.execute(select_diretos_sql, (id_agend, sku))
        row = cur.fetchone()
        diretos = int(row[0]) if row else 0

        # Soma equivalentes para este sku_original no mesmo agendamento
        cur.execute(select_equiv_sql, (id_agend, sku))
        equiv = int(cur.fetchone()[0] or 0)

        total = diretos + equiv

        cur.close()
        conn.close()

        # Mantive 'bipados' como TOTAL p/ não quebrar sua UI atual
        return jsonify(
            ok=True,
            sku=sku,
            bipados=total,                    # TOTAL (diretos + equivalentes)
            bipados_diretos=diretos,          # só diretos
            bipados_equivalentes=equiv        # só equivalentes
        )
    except Exception as e:
        app.logger.exception("Erro em api_bipar")
        return jsonify(error=str(e)), 500


def normalize_gtin(value):
    if value is None:
        return None
    s = str(value).strip()
    # Tratamentos comuns de "não encontrado"
    if s.lower() in {
        "gtin/ean não encontrado", "gtin nao encontrado", "gtin não encontrado",
        "ean não encontrado", "nao encontrado", "não encontrado", "not found", ""
    }:
        return None
    # Se vier um número, mantemos só dígitos; senão devolvemos original
    digits = re.sub(r'\D+', '', s)
    return digits if digits else s  # pode ser texto curto; coluna é VARCHAR(14)

def to_int_or_none(v):
    try:
        return int(v)
    except (TypeError, ValueError):
        return None

@bp_retirado.route('/api/equiv/bipar', methods=['POST'])
def api_equiv_bipar():
    data = request.get_json() or {}

    # obrigatórios
    id_agend     = data.get('id_agend')
    sku_original = (data.get('sku_original') or '').strip()
    sku_bipado   = (data.get('sku_bipado') or '').strip()

    # opcionais
    gtin_original       = normalize_gtin(data.get('gtin_original'))
    gtin_bipado         = normalize_gtin(data.get('gtin_bipado'))
    id_tiny_original    = to_int_or_none(data.get('id_tiny_original'))
    id_tiny_equivalente = to_int_or_none(data.get('id_tiny_equivalente'))
    nome_equivalente    = (data.get('nome_equivalente') or '').strip() or None   # <<< ADICIONADO
    usuario             = (data.get('usuario') or '').strip() or 'Desconhecido'
    observacao          = (data.get('observacao') or '').strip() or None

    # valida mínimos
    try:
        id_agend = int(id_agend)
    except (TypeError, ValueError):
        return jsonify(error="'id_agend' deve ser inteiro"), 400
    if not sku_original or not sku_bipado:
        return jsonify(error="Campos 'sku_original' e 'sku_bipado' são obrigatórios"), 400
    if len(sku_original) > 30 or len(sku_bipado) > 30:
        return jsonify(error="SKU excede 30 caracteres"), 400
    if gtin_original and len(str(gtin_original)) > 14:
        return jsonify(error="gtin_original excede 14 caracteres após normalização"), 400
    if gtin_bipado and len(str(gtin_bipado)) > 14:
        return jsonify(error="gtin_bipado excede 14 caracteres após normalização"), 400
    if observacao and len(observacao) > 255:
        return jsonify(error="observacao excede 255 caracteres"), 400
    if usuario and len(usuario) > 100:
        return jsonify(error="usuario excede 100 caracteres"), 400
    if nome_equivalente and len(nome_equivalente) > 255:                           # <<< ADICIONADO
        return jsonify(error="nome_equivalente excede 255 caracteres"), 400

    insert_sql = """
        INSERT INTO agendamento_produto_bipagem_equivalentes
          (id_agend_ml, sku_original, gtin_original, id_tiny_original,
           nome_equivalente,                                                   
           sku_bipado,  gtin_bipado,  id_tiny_equivalente,
           bipados, criado_por, observacao)
        VALUES (%s, %s, %s, %s,
                %s,
                %s, %s, %s,
                0, %s, %s)
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(
            insert_sql,
            (id_agend, sku_original, gtin_original, id_tiny_original,
             nome_equivalente,                                                     # <<< ADICIONADO
             sku_bipado, gtin_bipado, id_tiny_equivalente,
             usuario, observacao)
        )
        conn.commit()
        cur.close(); conn.close()

        return jsonify(
            ok=True, created=True,
            id_agend=id_agend,
            sku_original=sku_original, gtin_original=gtin_original, id_tiny_original=id_tiny_original,
            nome_equivalente=nome_equivalente,                                     # <<< ADICIONADO (não quebra nada)
            sku_bipado=sku_bipado,   gtin_bipado=gtin_bipado,   id_tiny_equivalente=id_tiny_equivalente,
            bipados=0, criado_por=usuario, observacao=observacao
        ), 201

    except mysql.connector.Error as e:
        from mysql.connector import errorcode
        if getattr(e, "errno", None) == errorcode.ER_DUP_ENTRY:
            return jsonify(ok=False, error="Equivalente já existe (id_agend_ml, sku_original, sku_bipado).", code="DUPLICATE"), 409
        if getattr(e, "errno", None) == errorcode.ER_NO_REFERENCED_ROW_2:
            return jsonify(ok=False, error="FK violada: (id_agend_ml, sku) não existe na tabela pai.", code="FK_FAIL"), 422
        app.logger.exception("Erro em /api/equiv/bipar")
        return jsonify(error=str(e)), 500
    
@bp_retirado.route('/api/equiv/add-unidades', methods=['POST'])
def api_equiv_add_unidades():
    data         = request.get_json() or {}
    id_agend     = data.get('id_agend')
    sku_original = (data.get('sku_original') or '').strip()
    sku_bipado   = (data.get('sku_bipado') or '').strip()
    quant        = int(data.get('quant', 1))

    if not id_agend or not sku_original or not sku_bipado:
        return jsonify(error="Campos 'id_agend', 'sku_original', 'sku_bipado' são obrigatórios"), 400
    if quant == 0:
        return jsonify(error="'quant' deve ser diferente de zero"), 400

    upd_sql = """
        UPDATE agendamento_produto_bipagem_equivalentes
           SET bipados = bipados + %s, atualizado_em = CURRENT_TIMESTAMP
         WHERE id_agend_ml=%s AND sku_original=%s AND sku_bipado=%s
    """
    sel_par_sql = """
        SELECT bipados
          FROM agendamento_produto_bipagem_equivalentes
         WHERE id_agend_ml=%s AND sku_original=%s AND sku_bipado=%s
    """
    sel_diretos_sql = """
        SELECT COALESCE(bipados,0)
          FROM agendamento_produto_bipagem
         WHERE id_agend_ml=%s AND sku=%s
    """
    sel_equiv_total_sql = """
        SELECT COALESCE(SUM(bipados),0)
          FROM agendamento_produto_bipagem_equivalentes
         WHERE id_agend_ml=%s AND sku_original=%s
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()

        # 1) soma no par equivalente (erro 404 se não existir)
        cur.execute(upd_sql, (quant, id_agend, sku_original, sku_bipado))
        if cur.rowcount == 0:
            cur.close(); conn.close()
            return jsonify(ok=False, error="Equivalente não encontrado para este agendamento/sku"), 404

        # (opcional) commit imediato da alteração
        conn.commit()

        # 2) valor do par (equivalente) após a soma
        cur.execute(sel_par_sql, (id_agend, sku_original, sku_bipado))
        row = cur.fetchone()
        bipados_par = int(row[0]) if row else 0

        # 3) diretos do sku_original
        cur.execute(sel_diretos_sql, (id_agend, sku_original))
        row = cur.fetchone()
        bipados_diretos = int(row[0]) if row else 0

        # 4) soma de TODOS os equivalentes para o sku_original
        cur.execute(sel_equiv_total_sql, (id_agend, sku_original))
        row = cur.fetchone()
        bipados_equivalentes_total = int(row[0]) if row and row[0] is not None else 0

        # 5) total final = diretos + equivalentes_total
        bipados_total = bipados_diretos + bipados_equivalentes_total

        cur.close(); conn.close()

        return jsonify(
            ok=True,
            id_agend=id_agend,
            sku_original=sku_original,
            sku_bipado=sku_bipado,
            incrementado=quant,
            bipados=bipados_par,                      # valor do PAR equivalente (como antes)
            bipados_diretos=bipados_diretos,          # só diretos
            bipados_equivalentes_total=bipados_equivalentes_total,  # soma de todos equivalentes
            bipados_total=bipados_total               # diretos + equivalentes_total
        )
    except Exception as e:
        app.logger.exception("Erro em /api/equiv/add-unidades")
        return jsonify(error=str(e)), 500

@bp_retirado.route('/api/bipados/<int:id_agend>')
def api_bipados_agend(id_agend):
    select_sql = """
        SELECT sku, bipados
        FROM agendamento_produto_bipagem
        WHERE id_agend_ml = %s
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(select_sql, (id_agend,))
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return jsonify([{'sku': r[0], 'bipados': r[1]} for r in rows])
    except Exception as e:
        app.logger.exception("Erro em api_bipados_agend")
        return jsonify(error=str(e)), 500

@bp_retirado.route('/api/bipados-total/<int:id_agend>')
def api_bipados_total(id_agend):
    sql = """
        SELECT
          x.sku_original,
          SUM(x.bipados) AS bipados_total
        FROM (
          SELECT
            apb.sku AS sku_original,
            COALESCE(apb.bipados, 0) AS bipados
          FROM agendamento_produto_bipagem apb
          WHERE apb.id_agend_ml = %s

          UNION ALL

          SELECT
            ape.sku_original AS sku_original,
            COALESCE(ape.bipados, 0) AS bipados
          FROM agendamento_produto_bipagem_equivalentes ape
          WHERE ape.id_agend_ml = %s
        ) x
        GROUP BY x.sku_original
        ORDER BY x.sku_original
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(sql, (id_agend, id_agend))
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return jsonify([{"sku_original": r[0], "bipados_total": int(r[1])} for r in rows])
    except Exception as e:
        app.logger.exception("Erro em api_bipados_total")
        return jsonify(error=str(e)), 500

@bp_retirado.route('/api/equiv/<int:id_agend>', methods=['GET'])
def api_equiv_listar(id_agend):
    sql = """
        SELECT
            id,
            id_agend_ml,
            sku_original,
            gtin_original,
            id_tiny_original,
            nome_equivalente,                 -- <<< ADICIONADO
            sku_bipado,
            gtin_bipado,
            id_tiny_equivalente,
            bipados,
            criado_por,
            criado_em,
            atualizado_em,
            observacao
        FROM agendamento_produto_bipagem_equivalentes
        WHERE id_agend_ml = %s
        ORDER BY sku_original, sku_bipado
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor(dictionary=True)
        cur.execute(sql, (id_agend,))
        rows = cur.fetchall()
        cur.close(); conn.close()

        def serialize(v):
            if isinstance(v, (datetime, date)):
                return v.strftime("%Y-%m-%d %H:%M:%S")
            return v

        return jsonify([
            {k: serialize(v) for k, v in row.items()}
            for row in rows
        ])
    except Exception as e:
        app.logger.exception("Erro em /api/equiv/<id>")
        return jsonify(error=str(e)), 500
    
@bp_retirado.route('/retirado', methods=['GET', 'POST'])
def retirado_estoque():
    if request.method == "GET":
        agendamento_controller.clear_agendamentos()
        # Corrigido para lidar com IDs que podem não ser inteiros inicialmente
        id_agendamento = request.args['id']
        agendamento_controller.insert_agendamento(id_bd=int(id_agendamento))
        agend: Agendamento = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend)
        agendamento_controller.set_error_flags_composicoes(agend)

        tipo = int(request.args.get('tipo', 0))

        if tipo == 1:
            return render_template(
            'limpeza.html',
            dados=agendamento_controller.search_agendamento('id_bd', str(agend.id_bd)),
            comps=agendamento_controller.return_all_in_dict(agend)
            )

        elif tipo == 4: # Fase "Embalar"
            comps = []
            for p in agend.produtos:
                pd = p.to_dict() 
                pd['imagemUrl'] = pd.pop('imagem_url', '') 
                pd['composicoes'] = []
                for c in p.composicoes:
                    comp_dict = c.to_dict()
                    comp_dict['imagem_url'] = comp_dict.get('imagem_url', '')
                    pd['composicoes'].append(comp_dict)
                comps.append(pd)
            return render_template(
                'embalar.html',
                dados=agend,
                comps=comps, 
                dados_agend=agend
            )

        elif tipo == 5:
            return redirect(url_for('expedicao', id_agend_bd=agend.id_bd))

        else:
            comps = []
            pode_mudar = request.args.get('mudar', 'False').lower() == 'true'
            for p in agend.produtos:
                pd = p.to_dict() 
                pd['imagemUrl'] = pd.pop('imagem_url', '') 
                pd['composicoes'] = []
                for c in p.composicoes:
                    comp_dict = c.to_dict()
                    comp_dict['imagem_url'] = comp_dict.get('imagem_url', '')
                    pd['composicoes'].append(comp_dict)
                comps.append(pd)
            
            # mapeamento marketplace no mesmo padrão do dicionário de empresa
            marketplace_map = {
                1: "Mercado Livre",
                2: "Magalu",
                3: "Shopee",
                4: "Amazon"
            }
            marketplace_nome = marketplace_map.get(getattr(agend, "id_mktp", 0), "Nenhuma")

            return render_template(
                'retiradoEstoque.html',
                dados=agendamento_controller.return_comp_grouped(agend),
                comps=comps,
                pode_mudar=pode_mudar,
                dados_agend=agendamento_controller.get_last_made_agendamento(),
                marketplace_nome=marketplace_nome
            )

    # ─── se for POST (finaliza e redireciona para embalar) ───────────────────
    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(request.form['inp_id_pedido'])
    agend: Agendamento = agendamento_controller.get_last_made_agendamento()
    agendamento_controller.create_agendamento_from_bd_data(agend)
    agendamento_controller.set_error_flags_composicoes(agend)
    agendamento_controller.set_empresa_colaborador_agend(
        agend,
        request.form.get('inp_nome_emp', ''),
        request.form.get('inp_nome_col', '')
    )
    agendamento_controller.update_empresa_colaborador_bd(agend)

    # Marca como embalar
    agend.set_tipo(4)
    agendamento_controller.update_agendamento(agend)

    # ─── Recria o comps serializável para o POST também ────────────────
    comps = []
    for p in agend.produtos:
        pd = p.to_dict()
        # Busca e adiciona a URL da imagem
        pd['imagemUrl'] = agendamento_controller.get_product_image_url(p.sku)
        pd['composicoes'] = [c.to_dict() for c in p.composicoes]
        comps.append(pd)
    # ────────────────────────────────────────────────────────────────────

    return render_template(
        'embalar.html',
        dados=agendamento_controller.search_agendamento('id_bd', agend.id_bd),
        comps=comps,
        dados_agend=agend
    )

@bp_retirado.route('/relatorio/finalizar/<int:id_agend>', methods=['POST'])
def finalizar_conferencia(id_agend):
    """
    Finaliza a fase de conferência, gera um relatório e move o agendamento para Embalar.
    """
    try:
        # Carrega o agendamento em memória
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=id_agend)
        ag = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(ag)

        # ----- O bloco de geração de relatório permanece o mesmo -----
        inicio = ag.entrada
        termino = datetime.now()
        duracao = termino - inicio
        informacoes = {
            "Agendamento": ag.id_agend_ml,
            "Empresa": {1:"Jaú Pesca",2:"Jaú Fishing",3:"L.T. Sports"}.get(ag.empresa, ""),
            "DataInicio": inicio.strftime("%d/%m/%Y %Hh %Mm %Ss"),
            "DataTerminoConferencia": termino.strftime("%d/%m/%Y %Hh %Mm %Ss"),
            "Permanencia": f"{duracao.seconds//3600:02d}h {(duracao.seconds%3600)//60:02d}m {duracao.seconds%60:02d}s"
        }
        colaboradores = [{"Colaborador": ag.colaborador}]
        rel = []
        for p in ag.produtos:
            total = sum(c.unidades_totais for c in p.composicoes) or p.unidades
            kits = [{"codigo_tiny_kit": c.id_tiny, "sku_kit": c.prod_sku} for c in p.composicoes]
            historico = []
            rel.append({
                "sku": p.sku, "codigo_de_barras":p.gtin, "codigo_tiny": p.id_tiny or None,
                "nome": p.nome, "unidades_totais": str(total), "faz_parte_de": kits, "historico": historico
            })
        payload = {
            "Informacoes": informacoes, "Colaboradores": colaboradores, "RelatorioConferencia": rel
        }
        # ----------------------------------------------------------------

        # Salva no banco
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(
            "INSERT INTO relatorio_agend (id_agend_ml, relatorio) VALUES (%s, %s) ON DUPLICATE KEY UPDATE relatorio = VALUES(relatorio)",
            (ag.id_agend_ml, json.dumps(payload, ensure_ascii=False))
        )
        conn.commit()
        cur.close()
        conn.close()

        # Marca como Embalar (ID 4)
        ag.set_tipo(4)
        agendamento_controller.update_agendamento(ag)

        # Retorna uma resposta de sucesso padronizada
        return jsonify({"success": True, "message": "Conferência finalizada! O agendamento foi movido para a Embalagem."})

    except Exception as e:
        app.logger.exception("Falha ao finalizar conferência e salvar relatório")
        return jsonify({"success": False, "message": f"Erro ao finalizar: {e}"}), 500


# ---------------------------------------------------------------
# 1) Proxy genérico para Tiny (GET + OPTIONS com CORS)
#    Front envia:
#      - Header "Path": ex. /public-api/v3/produtos
#      - Header "Authorization": ex. "Bearer xyz..."
#    Query string do request é repassada (ex.: ?codigo=JP123)
# ---------------------------------------------------------------
@bp_retirado.route('/api/tiny-proxy', methods=['GET', 'OPTIONS'])
def tiny_proxy():
    # Preflight CORS
    if request.method == 'OPTIONS':
        resp = make_response('', 204)
        _set_cors_headers(resp)
        return resp

    path = (request.headers.get('Path') or '').strip()
    auth = (request.headers.get('Authorization') or '').strip()

    if not path or not auth:
        return _cors_error('Headers "Path" e "Authorization" são obrigatórios', 400)

    # Normaliza e valida o Path para evitar SSRF
    if not path.startswith('/'):
        path = '/' + path

    # Permita só o prefixo da API pública do Tiny v3
    allowed_prefixes = ['/public-api/v3/']
    if not any(path.startswith(p) for p in allowed_prefixes):
        return _cors_error('Path inválido para proxy', 400)

    base_url = 'https://api.tiny.com.br'
    url = f'{base_url}{path}'

    # Copiamos a query string do request atual
    params = request.args.to_dict(flat=True)

    # Repassar somente o Authorization, definindo um UA simples
    headers = {
        'Authorization': auth,
        'User-Agent': 'AgendamentosWeb/1.0'
    }

    try:
        r = requests.get(url, headers=headers, params=params, timeout=20)
    except requests.RequestException as e:
        app.logger.exception('Falha ao chamar Tiny')
        return _cors_error(f'Erro ao contatar Tiny: {e}', 502)

    # Monta a resposta preservando status e content-type do Tiny
    resp = make_response(r.content, r.status_code)
    resp.headers['Content-Type'] = r.headers.get('Content-Type', 'application/json')
    _set_cors_headers(resp)
    return resp


# ---------------------------------------------------------------
# 2) Atalho: produto por SKU (POST JSON)
#    Body: { "sku": "JP123", "token": "Bearer xyz..." }  (ou mande o token no header Authorization)
# ---------------------------------------------------------------
@bp_retirado.route('/api/tiny/produto-por-sku', methods=['POST', 'OPTIONS'])
def tiny_produto_por_sku():
    if request.method == 'OPTIONS':
        resp = make_response('', 204)
        _set_cors_headers(resp)
        return resp

    data = request.get_json() or {}
    sku = (data.get('sku') or '').strip()
    token = (data.get('token') or request.headers.get('Authorization') or '').strip()

    if not sku or not token:
        return _cors_error('Parâmetros "sku" e "token" são obrigatórios', 400)

    # Garante prefixo Bearer (se já vier, mantemos)
    if not token.lower().startswith('bearer '):
        token = f'Bearer {token}'

    url = 'https://api.tiny.com.br/public-api/v3/produtos'
    headers = {'Authorization': token, 'User-Agent': 'AgendamentosWeb/1.0'}
    params = {'codigo': sku}

    try:
        r = requests.get(url, headers=headers, params=params, timeout=20)
    except requests.RequestException as e:
        app.logger.exception('Falha ao chamar Tiny (produto-por-sku)')
        return _cors_error(f'Erro ao contatar Tiny: {e}', 502)

    resp = make_response(r.content, r.status_code)
    resp.headers['Content-Type'] = r.headers.get('Content-Type', 'application/json')
    _set_cors_headers(resp)
    return resp


# ---------------------------------------------------------------
# Helpers CORS
# ---------------------------------------------------------------
def _set_cors_headers(resp):
    # Libere *apenas* o(s) origin(s) que você usa no front
    origin = request.headers.get('Origin') or '*'
    resp.headers['Access-Control-Allow-Origin'] = origin
    resp.headers['Vary'] = 'Origin'
    resp.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    resp.headers['Access-Control-Allow-Headers'] = 'Authorization, Path, Content-Type'
    resp.headers['Access-Control-Max-Age'] = '600'
    return resp

def _cors_error(msg, code):
    resp = make_response(jsonify(error=msg), code)
    _set_cors_headers(resp)
    return resp

def _to_str_first(v) -> str:
    """Converte para string. Se vier lista/tupla, usa o primeiro item.
    Se vier None -> '' . Se vier dict -> levanta ValueError (tipo inválido)."""
    if v is None:
        return ''
    if isinstance(v, (list, tuple)):
        v = v[0] if v else ''
    if isinstance(v, dict):
        raise ValueError("Tipo inválido (dict) para campo string")
    return str(v)

def _to_opt_str_first(v):
    """Como _to_str_first, mas retorna None se vazio após strip()."""
    s = _to_str_first(v).strip()
    return s if s else None


@bp_retirado.route('/transf-estoque', methods=['POST', 'OPTIONS'])
def transf_estoque():
    """
    Enfileira um lançamento de estoque no Tiny (S/E/B) para processamento em background.
    Body JSON:
      - id_deposito   (int|list[int])   -> obrigatório
      - id_produto    (int|list[int])   -> obrigatório
      - unidades      (number|list)     -> obrigatório (> 0)
      - tipo          (str|list[str])   -> "Saída" | "Entrada" | "Balanço" | "S" | "E" | "B"
      - auth_token    (str|list[str])   -> obrigatório (Bearer xyz... ou apenas xyz)
      - observacoes   (str|list[str])   -> opcional
      - preco_unitario(number|list)     -> opcional (default = 0)
    """
    if request.method == 'OPTIONS':
        resp = make_response('', 204)
        _set_cors_headers(resp)
        return resp

    try:
        _start_estoque_worker_once()
        data = request.get_json() or {}
        print("\n[/transf-estoque] payload recebido:", {k: (v if k!='auth_token' else '(omitido)') for k,v in data.items()})

        # --- Normalização defensiva ---
        try:
            _id_dep_raw = data.get('id_deposito')
            if isinstance(_id_dep_raw, (list, tuple)):
                _id_dep_raw = _id_dep_raw[0] if _id_dep_raw else None
            id_deposito = int(_id_dep_raw)

            _id_prod_raw = data.get('id_produto')
            if isinstance(_id_prod_raw, (list, tuple)):
                _id_prod_raw = _id_prod_raw[0] if _id_prod_raw else None
            id_produto = int(_id_prod_raw)

            _un_raw = data.get('unidades')
            if isinstance(_un_raw, (list, tuple)):
                _un_raw = _un_raw[0] if _un_raw else None
            quantidade = float(_un_raw)
        except (TypeError, ValueError):
            print("[/transf-estoque] erro de tipos nos campos id_deposito/id_produto/unidades")
            return _cors_error("Campos 'id_deposito', 'id_produto' devem ser inteiros e 'unidades' numérico", 400)

        if quantidade <= 0:
            print("[/transf-estoque] unidades <= 0")
            return _cors_error("Campo 'unidades' deve ser maior que zero", 400)

        try:
            tipo = _to_str_first(data.get('tipo')).strip()
            token = _to_str_first(data.get('auth_token')).strip()
            observacoes = _to_opt_str_first(data.get('observacoes'))
            _preco_raw = data.get('preco_unitario')
            if isinstance(_preco_raw, (list, tuple)):
                _preco_raw = _preco_raw[0] if _preco_raw else None
            preco_unit = float(_preco_raw) if _preco_raw is not None else None
        except ValueError as ve:
            print(f"[/transf-estoque] tipos inválidos no payload: {ve}")
            return _cors_error(f"Tipos inválidos no payload: {ve}", 400)

        if not token:
            print("[/transf-estoque] auth_token ausente")
            return _cors_error("Campo 'auth_token' é obrigatório", 400)

        # Mapeia tipo amigável -> API Tiny
        t = tipo.lower()
        if t in ('saida', 'saída', 's'):
            tipo_api = 'S'
        elif t in ('entrada', 'e'):
            tipo_api = 'E'
        elif t in ('balanco', 'balanço', 'b', 'ajuste'):
            tipo_api = 'B'
        else:
            print(f"[/transf-estoque] tipo inválido: {tipo}")
            return _cors_error("Campo 'tipo' deve ser 'Saída', 'Entrada' ou 'Balanço' (ou S/E/B)", 400)

        task_id = uuid.uuid4().hex
        print(f"[/transf-estoque] enfileirando task_id={task_id} deposito={id_deposito} produto={id_produto} qtd={quantidade} tipo={tipo_api}")

        _mov_status[task_id] = {
            "status": "enfileirado",
            "criado_em": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "params": {
                "id_produto": id_produto,
                "id_deposito": id_deposito,
                "unidades": quantidade,
                "tipo": tipo_api
            }
        }
        _mov_queue.put({
            "task_id": task_id,
            "id_produto": id_produto,
            "id_deposito": id_deposito,
            "quantidade": quantidade,
            "tipo_api": tipo_api,
            "token": token,
            "observacoes": observacoes,
            "preco_unitario": preco_unit,
        })

        resp = make_response(jsonify(ok=True, task_id=task_id, status="enfileirado"), 202)
        _set_cors_headers(resp)
        return resp

    except Exception as e:
        print(f"[/transf-estoque] EXCEPTION: {e}")
        try:
            app.logger.exception("Falha no POST /transf-estoque")
        except Exception:
            pass
        resp = make_response(jsonify(ok=False, error="Falha interna ao enfileirar lançamento", detalhe=str(e)), 500)
        _set_cors_headers(resp)
        return resp

@bp_retirado.route('/transf-estoque/status/<task_id>', methods=['GET', 'OPTIONS'])
def transf_estoque_status(task_id):
    if request.method == 'OPTIONS':
        resp = make_response('', 204)
        _set_cors_headers(resp)
        return resp

    print(f"[/transf-estoque/status] consulta status task_id={task_id}")
    st = _mov_status.get(task_id)
    if not st:
        print(f"[/transf-estoque/status] task não encontrada: {task_id}")
        return _cors_error("Task não encontrada", 404)

    resp = make_response(jsonify(st), 200)
    _set_cors_headers(resp)
    return resp

# ===================== HELPERS NOVOS =====================

def _wait_backoff_429(attempt_idx: int) -> int:
    """Backoff para 429 em segundos: 5, 10, 20, 40, 60, 120, 240, 480, 600. Ao estourar, retorna -1."""
    ladder = [5, 10, 20, 40, 60, 120, 240, 480, 600]
    return ladder[attempt_idx] if attempt_idx < len(ladder) else -1

def _get_fallback_token_from_db() -> Optional[str]:
    """
    Busca um access_token no MySQL:
      - Tenta pegar o MAIS RECENTE (quando houver carimbo de tempo/auto-inc).
      - Limpa aspas e espaços.
    Retorna a string do token (sem 'Bearer ') ou None.
    """
    try:
        print("[token-db] consultando DB por access_token (id_api_valor=13)")
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()

        # Se houver coluna de timestamp/auto-inc, isso pega o mais recente.
        # Caso não exista, ORDER BY id_api_valor DESC mantém compatível.
        cur.execute("""
            SELECT access_token
              FROM apis_valores
             WHERE id_api_valor = 13
             ORDER BY id_api_valor DESC
             LIMIT 1
        """)
        row = cur.fetchone()
        cur.close(); conn.close()

        if not row:
            print("[token-db] nenhuma linha encontrada.")
            return None

        raw = row[0]
        if raw is None:
            print("[token-db] access_token NULL no DB.")
            return None

        tok = str(raw).strip().strip('"').strip("'")
        # Token “limpo”:
        tok = tok.replace("\r", "").replace("\n", "").strip()

        if not tok:
            print("[token-db] access_token vazio após limpeza.")
            return None

        print(f"[token-db] token encontrado: {tok[:5]}...{tok[-5:] if len(tok)>5 else tok} (len={len(tok)})")
        return tok
    except Exception as e:
        print("[token-db] EXCEPTION ao buscar token no DB:", e)
        try:
            app.logger.exception("Falha ao buscar fallback token no DB")
        except Exception:
            pass
        return None

def _normalize_bearer(token: str) -> str:
    return token if token.lower().startswith("bearer ") else f"Bearer {token}"
│  ├─ teste.py
from main import app, render_template, agendamento_controller

@app.route('/teste-2')
def teste_2():
    agendamento_controller.clear_agendamentos()
    agendamento_controller.create_agendamento_for_compras()
    for i in agendamento_controller.agendamentos:
        print(len(i.produtos))
    dados = agendamento_controller.create_joined_agendamento()
    #print(dados)
    return render_template('teste.html', dados=agendamento_controller.return_joined_agend_in_dict(dados))
    #agendamento_controller.clear_agendamentos()
    #agendamento_controller.insert_agendamento(1)
    #agendamento_controller.create_agendamento_from_bd_data(agendamento_controller.get_last_made_agendamento())
    #return render_template('teste.html', dados=agendamento_controller.return_all_in_dict(agendamento_controller.get_last_made_agendamento()))
│  ├─ upload_excel.py
from werkzeug.utils import secure_filename
from main import (
    app,
    request,
    redirect,
    url_for,
    flash,
    render_template,
    session,
    ALLOWED_EXTENSIONS,
    MetodoInvalido,
    ArquivoInvalido,
    agendamento_controller,
    db_controller  
)
import os
import uuid
import random
import string
import pandas as pd

def mime_permitido(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/upload-excel', methods=['POST'])
def upload_excel():
    try:
        file = request.files.get('file')
        if not file or not mime_permitido(file.filename):
            flash("Arquivo inválido ou não selecionado", 'danger')
            raise ArquivoInvalido()

        # salva o arquivo no disco
        filename = secure_filename(file.filename)
        save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(save_path)

        # 1) registro do upload
        upload_uuid = str(uuid.uuid4())
        db_controller.insert_excel_upload((upload_uuid, filename))

        # 2) cria o Agendamento em memória a partir do Excel
        ag = agendamento_controller.create_agendamento_from_excel(
            excel_path=save_path,
            id_tipo=int(request.form.get('tipo', 0)),
            empresa=int(request.form.get('empresa', 0)),
            id_mktp=int(request.form.get('marketplace', 0)),
            colaborador=request.form.get('colaborador', ''),
            upload_uuid=upload_uuid
        )

        agendamento = agendamento_controller.agendamentos[-1]
        agendamento_controller.get_prod_data_tiny(agendamento)
        agendamento_controller.get_comp_tiny(agendamento)
        agendamento_controller.get_comp_data_tiny(agendamento)

        # ─── NOVO ───
        # 2.5) gera um pedido fake de 8 dígitos e sobrescreve o id_agend_ml
        fake_pedido = ''.join(random.choices(string.digits, k=8))
        ag.id_agend_ml = fake_pedido
        # ───────────

        # 3) insere o Agendamento no BD e pega seu id interno (id_bd)
        agendamento_controller.insert_agendamento_in_bd(ag)
        last_id = agendamento_controller.get_last_made_agendamento_in_bd()[0]
        agendamento_controller.set_id_bd_for_all(ag, last_id)

        # 4) insere os produtos
        agendamento_controller.insert_produto_in_bd(ag)

        # 5) atualiza os produtos em memória com o id_prod que foi gerado no insert
        for rec in agendamento_controller.return_all_produtos_from_agendamento(ag):
            inserted_prod_id = rec[0]    # id_prod do BD
            sku_prod          = rec[4]    # sku_prod vindo do tuple
            produto_obj = agendamento_controller.search_produto(ag, 'sku', sku_prod)
            if produto_obj:
                produto_obj.set_id_bd(inserted_prod_id)
                produto_obj.set_id_bd_for_composicoes()

        # 6) insere as composições (foreign-key já ajustado pelo passo 5)
        agendamento_controller.insert_composicao_in_bd(ag)

        # 7) redireciona para a view do Excel (ou cleaning) passando o uuid
        return redirect(url_for('agendamentos', acao='ver') + "?upload=ok_excel")

    except Exception as e:
        print(f"Erro ao processar EXCEL: {e}")
        erro_msg = "erro_desconhecido"
        err_str = str(e).lower()
        if "gtin" in err_str:
            erro_msg = "gtin_vazio"
        elif "arquivo inválido" in err_str:
            erro_msg = "arquivo_invalido"
        elif "excel" in err_str:
            erro_msg = "erro_excel"
        elif "database" in err_str:
            erro_msg = "erro_banco"

        return redirect(
            url_for('agendamentos', acao='ver')
            + f"?upload=fail&erro={erro_msg}"
        )

│  ├─ upload_pdf.py
import re
from mysql.connector import IntegrityError
from werkzeug.utils import secure_filename
from main import (
    app,
    request,
    redirect,
    url_for,
    flash,
    session,
    ALLOWED_EXTENSIONS,
    MetodoInvalido,
    ArquivoInvalido,
    agendamento_controller
)
import os


def mime_permitido(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/upload-pdf', methods=['POST'])
def upload():
    print(request.form)
    try:
        # 1) valida upload
        if 'path' not in request.files:
            flash("PDF não foi enviado")
            raise ArquivoInvalido()

        file = request.files['path']
        if file.filename == '' or not mime_permitido(file.filename):
            flash('Arquivo inválido ou não selecionado')
            raise ArquivoInvalido()

        # 2) salva o PDF
        filename = secure_filename(file.filename)
        path_pdf = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(path_pdf)

        # 3) extrai id do ML do nome do arquivo
        try:
            novo_id_ml = filename.split('-')[1]
        except IndexError:
            return redirect('/error/0')

        # 4) Dados do formulário
        id_bd_str = request.form.get('id_bd', '').strip() or '0'
        try:
            id_bd = int(id_bd_str)
        except ValueError:
            id_bd = 0

        colab   = session.get('nome_display_usuario', '')
        empresa = int(request.form.get('empresa', '0'))
        mktp    = int(request.form.get('marketplace', '0'))
        tipo    = int(request.form.get('tipo', '0'))
        centro  = request.form.get('centro_distribuicao', None) 
        
        id_agendamento = novo_id_ml

        # === ATUALIZAÇÃO ===
        if id_bd:
            sucesso, msg = agendamento_controller.update_pdf_agendamento(
                id_bd=id_bd,
                colaborador=colab,
                empresa=empresa,
                id_mktp=mktp,
                id_tipo=tipo,
                pdf_path=path_pdf,
                new_id_agend_ml=novo_id_ml,
                centro_distribuicao=centro
            )
            if not sucesso:
                raise Exception(msg)
            # CORREÇÃO: Mudei o parâmetro para 'atualizado=ok' para dar um feedback melhor ao usuário
            return redirect(url_for('agendamentos', acao='ver', atualizado='ok'))

        # === NOVO AGENDAMENTO ===

        # --- VERIFICAÇÃO DE DUPLICIDADE MOVIDA PARA CÁ ---
        # Agora, a checagem só acontece se NÃO for uma atualização (id_bd é 0 ou nulo)
        if agendamento_controller.db_controller.exists_agendamento_ml(id_agendamento):
            print(f"Tentativa de criar agendamento duplicado: {id_agendamento}")
            os.remove(path_pdf) 
            return redirect(url_for('agendamentos', acao='ver', upload='fail', erro='duplicado', pedido=id_agendamento))
        
        agendamento_controller.create_agendamento_from_pdf(
            pdf_path=path_pdf,
            id_agend_ml=id_agendamento,
            id_tipo=tipo,
            empresa=empresa,
            id_mktp=mktp,
            colaborador=colab,
            centro_distribuicao=centro
        )
        agendamento = agendamento_controller.agendamentos[-1]
        agendamento_controller.get_prod_data_tiny(agendamento)
        agendamento_controller.get_comp_tiny(agendamento)
        agendamento_controller.get_comp_data_tiny(agendamento)
        
        # O try/except aqui ainda é útil para outros erros de banco de dados
        try:
            agendamento_controller.insert_agendamento_in_bd(agendamento)
        except IntegrityError as e:
            if e.errno == 1062:
                pedido = agendamento.id_agend_ml
                return redirect(
                    url_for('agendamentos', acao='ver', upload='fail', erro='duplicado', pedido=pedido)
                )

        id_agend_bd = agendamento_controller.get_last_made_agendamento_in_bd()[0]
        agendamento_controller.set_id_bd_for_all(agendamento, id_agend_bd)
        agendamento_controller.insert_produto_in_bd(agendamento)

        for tpl in agendamento_controller.return_all_produtos_from_agendamento(agendamento):
            produto = agendamento_controller.search_produto(agendamento, 'id_ml', tpl[2])
            if not produto:
                app.logger.warning(f"Produto não encontrado para o id_ml {tpl[2]}")
                continue
            
            produto.set_id_bd(tpl[0])
            produto.set_id_bd_for_composicoes()

        agendamento_controller.set_error_flags_composicoes(agendamento)
        agendamento_controller.insert_composicao_in_bd(agendamento)

        return redirect(url_for('agendamentos', acao='ver') + "?upload=ok_pdf")

    except Exception as e:
        print(f"Erro ao processar PDF: {e}")
        msg = str(e).lower()

        # primeiro, testamos duplicado
        if "já existe" in msg or "duplicado" in msg:
            # tenta extrair o número do pedido de dentro da mensagem
            m = re.search(r'(\d+)', str(e))
            pedido = m.group(1) if m else ''
            return redirect(
                url_for('agendamentos', acao='ver')
                + f'?upload=fail&erro=duplicado&pedido={pedido}'
            )

        # senão, mapeamos os outros erros como antes
        erro_msg = "erro_desconhecido"
        if "gtin" in msg:
            erro_msg = "gtin_vazio"
        elif "arquivo inválido" in msg:
            erro_msg = "arquivo_invalido"
        elif "pdf" in msg:
            erro_msg = "erro_pdf"
        elif "database" in msg:
            erro_msg = "erro_banco"

        return redirect(
            url_for('agendamentos', acao='ver')
            + f'?upload=fail&erro={erro_msg}'
        )
│  └─ view_excel.py
from main import app, db_controller, render_template
import pandas as pd, os

@app.route('/view-excel/<uuid>')
def show_excel(uuid):
    rec = db_controller.get_excel_upload(uuid)
    _, _, filename, _ = rec
    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    df = pd.read_excel(path, engine='openpyxl')
    html = df.to_html(classes='table table-striped table-hover', index=False)
    return render_template('view_excel.html', filename=filename, data_table=html)


├─ static/
│  ├─ agendamentos/
│  │  ├─ agendamentos.css
body {
    background-color: #e9f1fb;
}

.status-limpeza {
    background-color: #4da6ff;
    color: white;
}

/* .status-separacao {
    background-color: #b266ff;
    color: white;
} */

.status-finalizado {
    background-color: #6c757d;  /* cinza */
    color: white;
}

.status-conferencia {
    background-color: #ff9933;
    color: white;
}

.status-embalar {
    background-color: #66cc66;
    color: white;
}

.status-expedicao {
    background-color: #ff6666;
    color: white;
}

.empresa-jaupesca {
    background-color: #1abc9c;
    color: white;
}

.empresa-jaufishing {
    background-color: #2c3e50;
    color: white;
}

.empresa-ltsports {
    background-color: #f1c40f;
    color: #333;
}

.empresa-nenhuma {
    background-color: #bdc3c7;
    /* cinza claro */
    color: #2c3e50;
    /* azul escuro para bom contraste */
    padding: 2px 8px;
    border-radius: 5px;
    font-size: 0.85rem;
}

.id_mktp-magalu {
    background-color: #0086FF;
    color: #FFFFFF;
}

.id_mktp-mercadolivre {
    background-color: #FFE600;
    color: #2B3276;
}

.id_mktp-amazon {
    background-color: #131921;
    color: #E3E3E4;
}

.id_mktp-shopee {
    background-color: #FA5330;
    color: #FFFFFF;
}

.pedido-numero {
    color: #2c3e50;
    font-weight: 600;
    font-size: 16px;
    letter-spacing: 2px;
}

.badge {
    font-weight: 600;
    padding: 5px 5px;
}

.hidden-class {
    display: none;
}

/* classe para o card de novo agendamento */
.add-new-agendamento {
    border: 2px dashed #6c757da1;
    background-color: #ffffff;
    cursor: pointer;
    transition: background-color .2s;
}

.add-new-agendamento:hover {
    background-color: #f8f9fa;
    border: 2px dashed #0d6efdb8;
    /* leve clarão ao passar o mouse */
}

/* remove underline e força o <a> ocupar todo o card */
.add-new-agendamento {
    display: block;
    color: inherit;
}

/* suaviza a animação de abrir/fechar o painel */
#filterPanel.collapse {
    transition: height 0.3s ease;
}

.list-scroll {
    max-height: 55vh;
    overflow-y: auto;
}

@media (max-width: 576px) {

    /* modal Upload de PDF */
    #modalUploadPdf .modal-dialog {
        max-width: 95%;
        /* evita que ocupe 100% da tela */
        margin: 0.5rem;
        /* espaçamento nas laterais */
    }

    #modalUploadPdf .modal-dialog {
        max-width: 95%;
        margin: 0.5rem;
    }

    .list-scroll {
        max-height: 70vh;
        font-size: 1.3rem;
    }

    .card-body>div:first-child {
        flex-direction: column;
        align-items: flex-start;
        /* Alinha o texto à esquerda */
        margin-bottom: 1rem;
        /* Adiciona um espaço entre o texto e os botões */
    }

    .card-body>div:first-child>span {
        margin-bottom: 0.2rem;
        /* Espaçamento entre cada linha de informação */
    }

    .card-body>div:last-child {
        width: 100%;
        /* Faz com que os botões ocupem a largura total */
        justify-content: center !important;
        /* Centraliza os botões */
    }

    .btn-group-sm>.btn,
    .btn-sm {
        padding: .25rem .5rem;
        font-size: 1.2rem;
        border-radius: .2rem;
    }

    .pedido-numero, .new-agend {
        font-size: 1.3rem;
    }

}
│  │  └─ agendamentos.js
function abrirModalMarketplace() {
    const modalEmpresa = bootstrap.Modal.getInstance(document.getElementById('modalSelecionarEmpresa'));
    modalEmpresa.hide();

    setTimeout(() => {
        new bootstrap.Modal(document.getElementById('modalSelecionarMarketplace')).show();
    }, 400);
}

function setMarketplace(idMktp) {
    $('#inp_mktp_pedido').val(idMktp);

    const modalMktp = bootstrap.Modal.getInstance(document.getElementById('modalSelecionarMarketplace'));
    modalMktp.hide();

    setTimeout(() => {
        new bootstrap.Modal(document.getElementById('modalTipoAgendamento')).show();
    }, 400);
}

function setTipoAgendamento(idTipo) {
    $('#inp_tipo_pedido').val(idTipo);

    const modalTipo = bootstrap.Modal.getInstance(document.getElementById('modalTipoAgendamento'));
    modalTipo.hide();

    setTimeout(() => {
        new bootstrap.Modal(document.getElementById('modalNomeColaborador')).show();
    }, 400);
}

function changeIdAgendamento(element) {
    let id_agend = element.id.split('--')
    $('#inp_id_pedido').val(id_agend[1])
    $('#inp_tipo_pedido').val(id_agend[2])
    $('#modal-emp-agend').text("Agendamento nº" + id_agend[1])
    $('#modal-col-agend').text("Agendamento nº" + id_agend[1])
}


function setFiltros() {
    let obj_array = Object.values($('.agendamento-container'))
    obj_array.pop()
    obj_array.pop()

    // limpa qualquer filtro anterior
    obj_array.forEach((x) => {
        if (x.classList.contains('hidden-class')) {
            x.classList.remove('hidden-class');
        }
    })

    let filtros = {
        "inp_emp": $('#inp_emp_pedido').find(':selected').val(),
        "inp_status": $('#inp_status_pedido').find(':selected').val(),
        "inp_mktp": $('#inp_mktp_pedido').find(':selected').val(),
        "inp_num": $('#inp_num_pedido').val()
    }

    let valores = Object.values(filtros)

    // === Atenção ao índice aqui: primeiro emp, status, depois mktp e, por fim, número ===
    let valor_emp = filtrarEmp(valores[0]);
    let valor_sta = filtrarStatus(valores[1]);
    let valor_mktp = filtrarMktp(valores[2]);
    let valor_num = filtrarNum(valores[3]);

    obj_array.forEach(x => {
        let classArr = x.classList;
        if (valor_emp != null && !classArr.contains(valor_emp)) {
            x.classList.add('hidden-class');
        }
        else if (valor_sta != null && !classArr.contains(valor_sta)) {
            x.classList.add('hidden-class');
        }
        else if (valor_mktp != null && !classArr.contains(valor_mktp)) {
            x.classList.add('hidden-class');
        }
        else if (valor_num != null && !classArr.contains(valor_num)) {
            x.classList.add('hidden-class');
        }
    });
}

function filtrarEmp(id_empresa) {
    if (id_empresa != 'Todas') {
        return "emp-" + id_empresa;
    } else {
        return null;
    }
}

function filtrarStatus(status_agend) {
    if (status_agend != 'Todos') {
        return "tipo-" + status_agend;
    } else {
        return null;
    }
}

function filtrarMktp(id_mktp) {
    if (id_mktp != 'Todas') {
        return "id_mktp-" + id_mktp;
    } else {
        return null;
    }
}

function filtrarNum(num_agend) {
    if (num_agend != '') {
        return "id-" + num_agend;
    } else {
        return null;
    }
}

// Ao clicar em “+ Novo Agendamento”
document.querySelector('.add-new-agendamento').addEventListener('click', function (e) {
    e.preventDefault();

    const idFake = Math.floor(Math.random() * 100000); // ID temporário ou real
    $('#inp_id_pedido').val(idFake);

    new bootstrap.Modal(document.getElementById('modalSelecionarEmpresa')).show();
});

// Etapa 1: Empresa → chama Marketplace
function abrirModalMarketplace() {
    const empresa = $('#nome_empresa').val();
    if (!empresa) return alert("Selecione a empresa!");

    $('#inp_nome_emp').val(empresa);

    bootstrap.Modal.getInstance(document.getElementById('modalSelecionarEmpresa')).hide();

    setTimeout(() => {
        new bootstrap.Modal(document.getElementById('modalSelecionarMarketplace')).show();
    }, 400);
}

// Etapa 2: Marketplace → chama Tipo
function abrirModalAgendamento() {
    const marketplace = $('#nome_marketplace').val();
    if (!marketplace) return alert("Selecione o marketplace!");

    // armazena no hidden do formulário
    $('#inp_mktp_pedido').val(marketplace);

    // se for Mercado Livre (valor “1”), mostra antes o modal de centro
    if (marketplace === '1') {
        bootstrap.Modal.getInstance(document.getElementById('modalSelecionarMarketplace')).hide();
        setTimeout(() => new bootstrap.Modal(document.getElementById('modalCentroDistribuicao')).show(), 300);
    } else {
        // fluxo normal para os outros marketplaces
        bootstrap.Modal.getInstance(document.getElementById('modalSelecionarMarketplace')).hide();
        setTimeout(() => new bootstrap.Modal(document.getElementById('modalTipoAgendamento')).show(), 300);
    }
}

function confirmarCentro() {
    const centro = $('#nome_centro_distribuicao').val();
    if (!centro) return alert("Selecione um centro!");

    $('#inp_centro_distribuicao').val(centro);

    // fecha e segue para o modal de tipo
    bootstrap.Modal.getInstance(document.getElementById('modalCentroDistribuicao')).hide();
    setTimeout(() => new bootstrap.Modal(document.getElementById('modalTipoAgendamento')).show(), 300);
}

// Etapa 3: Tipo → chama Colaborador
function abrirModalColaborador() {
    const tipo = $('#nome_tipo').val();
    if (!tipo) return alert("Selecione o tipo de agendamento!");

    $('#inp_tipo_pedido').val(tipo);

    bootstrap.Modal.getInstance(document.getElementById('modalTipoAgendamento')).hide();

    setTimeout(() => {
        new bootstrap.Modal(document.getElementById('modalNomeColaborador')).show();
    }, 400);
}

// Continua agendamento já iniciado
function continuePhase(ele) {
    const [_, id, tipo] = ele.id.split('--');

    // fluxo padrão para os outros tipos
    window.location.href = `/retirado?id=${id}&tipo=${tipo}&mudar=True`;
}
// function continuePhase(ele) {
//     const [_, id, tipo] = ele.id.split('--');

//     // se for modo Embalar (tipo 4), dispara o SweetAlert2 em loading
//     if (tipo === '4') {
//         Swal.fire({
//             title: 'Carregando',
//             html: 'Aguarde, preparando a tela de embalagem.',
//             allowOutsideClick: false,
//             allowEscapeKey: false,
//             didOpen: () => {
//                 Swal.showLoading();
//                 // redireciona imediatamente — o usuário continua vendo o modal até a página carregar
//                 window.location.href = `/retirado?id=${id}&tipo=${tipo}&mudar=True`;
//             }
//         });
//     } else {
//         // fluxo padrão para os outros tipos
//         window.location.href = `/retirado?id=${id}&tipo=${tipo}&mudar=True`;
//     }
// }

// Define ID do agendamento nos modais (caso use "Começar")
function changeIdAgendamento(element) {
    let [_, idAgend, tipo] = element.id.split('--');
    $('#inp_id_pedido').val(idAgend);
    $('#inp_tipo_pedido').val(tipo);
}

// Filtro visual da tabela de agendamentos
function setFiltros() {
    document.querySelectorAll('.agendamento-container').forEach(card => {
        card.classList.remove('hidden-class');
    });

    const emp = $('#inp_emp_pedido').val();
    const status = $('#inp_status_pedido').val();
    const mktp = $('#inp_mktp_pedido').val();
    const num = $('#inp_num_pedido').val().trim();

    document.querySelectorAll('.agendamento-container').forEach(card => {
        const classes = card.classList;

        if (emp !== 'Todas' && !classes.contains(`emp-${emp}`)) {
            return card.classList.add('hidden-class');
        }
        if (status !== 'Todos' && !classes.contains(`tipo-${status}`)) {
            return card.classList.add('hidden-class');
        }
        if (mktp !== 'Todas' && !classes.contains(`id_mktp-${mktp}`)) {
            return card.classList.add('hidden-class');
        }

        // novo: filtra pelo texto do span.pedido-numero
        if (num) {
            const textoPedido = card.querySelector('.pedido-numero')?.textContent.trim() || '';
            if (!textoPedido.includes(num)) {
                return card.classList.add('hidden-class');
            }
        }
    });
}

function abrirModalUpload() {
    // 1) valores já gravados nos hidden inputs e no campo colaborador
    const colaborador = $('#nome_colaborador').val();
    const empresa = $('#nome_empresa').val();
    const marketplace = $('#nome_marketplace').val();
    const tipo = $('#nome_tipo').val();

    // 2) seleciona form, file input e botões de upload
    const form = $('#form_upload_pdf');
    const fileInput = form.find('input[type="file"]');
    const btn = form.find('button[type="submit"]');
    const label = $('#modalUploadPdfLabel');
    const helpText = $('#upload_help_text');

    // 3) escolhe rota/upload de Excel vs PDF
    if (marketplace === '2' || marketplace === '3') {
        form.attr('action', '/upload-excel');
        fileInput.attr({ name: 'file', accept: '.xlsx,.xls,.csv' });
        btn.text('Enviar Excel');
        label.text('Upload do Excel');
        helpText.text('Selecione o arquivo Excel (.xlsx) do pedido:');
    } else {
        form.attr('action', '/upload-pdf');
        fileInput.attr({ name: 'path', accept: 'application/pdf' });
        btn.text('Enviar PDF');
        label.text('Upload do PDF');
        helpText.text('Selecione o arquivo PDF do pedido:');
    }

    // 4) preenche os hidden inputs do form
    $('#upload_colaborador').val(colaborador);
    $('#upload_empresa').val(empresa);
    $('#upload_marketplace').val(marketplace);
    $('#upload_tipo').val(tipo);

    // 5) fecha o modal de Tipo de Agendamento e abre o modal de Upload
    bootstrap.Modal
        .getInstance(document.getElementById('modalTipoAgendamento'))
        .hide();

    setTimeout(() => {
        new bootstrap.Modal(
            document.getElementById('modalUploadPdf')
        ).show();
    }, 300);
}


document
    .getElementById("form_upload_pdf")
    .addEventListener("submit", function (e) {
        // this é o <form>
        const form = this;
        // detecta se é upload de Excel pela action do form
        const isExcel = form.action.includes("/upload-excel");
        // ou, alternativamente, pelo accept do file input:
        // const fileInput = form.querySelector('input[type="file"]');
        // const isExcel = fileInput.accept.includes(".xlsx");

        Swal.fire({
            title: isExcel ? "Enviando CSV..." : "Enviando PDF...",
            text: "Aguarde o processamento.",
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading();
            },
        });
    });

window.addEventListener("load", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const upload = urlParams.get("upload");
    const erro = urlParams.get("erro");
    const pedido = urlParams.get("pedido");

    // 0) Se ainda estiver mostrando o "Enviando PDF...", fecha
    if (Swal.isVisible()) {
        Swal.close();
    }

    // 1) Excel OK
    if (upload === "ok_excel") {
        Swal.fire({
            icon: 'success',
            title: 'Excel processado!',
            text: 'O agendamento foi criado com sucesso.',
            confirmButtonText: 'OK'
        }).then(() => {
            window.history.replaceState({}, document.title, window.location.pathname);
        });
        return;
    }

    // 2) PDF OK
    if (upload === "ok_pdf") {
        Swal.fire({
            icon: 'success',
            title: 'PDF processado!',
            text: 'O agendamento foi criado com sucesso.',
            confirmButtonText: 'OK'
        }).then(() => {
            window.history.replaceState({}, document.title, window.location.pathname);
        });
        return;
    }

    // 3) Alteração OK
    if (urlParams.get("alterado") === "ok") {
        Swal.fire({
            icon: 'success',
            title: 'Alterações salvas!',
            text: 'O agendamento foi atualizado com sucesso.',
            confirmButtonText: 'OK'
        }).then(() => {
            window.history.replaceState({}, document.title, window.location.pathname);
        });
        return;
    }

    // 4) Duplicado
    if (upload === "fail" && erro === "duplicado") {
        Swal.fire({
            icon: 'warning',
            title: 'Pedido já existente',
            text: `Já existe um agendamento com o número ${pedido}.`,
            confirmButtonText: 'OK'
        }).then(() => {
            window.history.replaceState({}, document.title, window.location.pathname);
        });
        return;
    }

    // 5) Qualquer outro erro de upload
    if (upload === "fail") {
        Swal.fire({
            icon: 'error',
            title: 'Erro',
            text: 'Ocorreu um erro ao processar o pedido. Por favor, tente novamente.',
            confirmButtonText: 'OK'
        }).then(() => {
            window.history.replaceState({}, document.title, window.location.pathname);
        });
        return;
    }
});



function abrirModalAlteracoes(id) {
    const modal = new bootstrap.Modal(document.getElementById('modalEditarAgendamento'));
    const content = $('#editarAgendamentoContent');

    content.html('<p>Carregando...</p>');

    $.get(`/alterar-agendamento?id=${id}&modal=true`, function (data) {
        content.html(data);
        modal.show();
    }).fail(() => {
        content.html('<div class="alert alert-danger">Erro ao carregar o conteúdo.</div>');
    });
}

function abrirModalAtualizarPDF(id_bd, id_agend_ml) {
    // --- Início da Depuração ---
    console.clear(); // Limpa o console para facilitar a leitura
    console.log(`--- Iniciando Modal de Atualização para ID BD: ${id_bd} ---`);
    // --- Fim da Depuração ---

    const form = document.getElementById('form_upload_pdf');
    const modal = new bootstrap.Modal(document.getElementById('modalUploadPdf'));
    const modalLabel = document.getElementById('modalUploadPdfLabel');
    const infoParaUsuario = document.getElementById('info-atualizacao-pdf');

    form.action = '/upload-pdf';
    if (!document.getElementById('upload_id_bd')) {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'id_bd';
        hiddenInput.id = 'upload_id_bd';
        form.appendChild(hiddenInput);
    }
    document.getElementById('upload_id_bd').value = id_bd;

    const botao = document.getElementById(`btn-modal--${id_bd}--`);
    const card = botao.closest('.agendamento-container');

    // --- Início da Depuração ---
    console.log("Elemento do Card encontrado:", card);
    // --- Fim da Depuração ---

    const getClassValue = (prefix) => {
        const cls = [...card.classList].find(c => c.startsWith(prefix));
        return cls ? cls.replace(prefix, '') : '';
    };

    // --- INÍCIO DA CORREÇÃO E DEPURAÇÃO ---
    const centroDistribuicao = card.dataset.centro || '';
    console.log(`Valor lido do atributo 'data-centro': "${centroDistribuicao}"`); // <-- Ponto crucial da depuração

    // Preenche todos os campos hidden do formulário
    document.getElementById('upload_colaborador').value = card.querySelector('.text-primary')?.innerText || '';
    document.getElementById('upload_empresa').value = getClassValue('emp-');
    document.getElementById('upload_marketplace').value = getClassValue('id_mktp-');
    document.getElementById('upload_tipo').value = getClassValue('tipo-');
    document.getElementById('inp_centro_distribuicao').value = centroDistribuicao; // <-- A correção está aqui

    console.log(`Valor final do campo hidden 'centro_distribuicao': "${document.getElementById('inp_centro_distribuicao').value}"`);
    // --- FIM DA CORREÇÃO E DEPURAÇÃO ---

    modalLabel.textContent = 'Atualizar PDF do Pedido';
    infoParaUsuario.innerHTML = `Atualizando o agendamento do pedido: <strong>${id_agend_ml}</strong>`;
    infoParaUsuario.style.display = 'block';

    modal.show();
}

function iniciarExclusao(idAgendamento) {
    Swal.fire({
        title: 'Você tem certeza?',
        text: "Esta ação não pode ser revertida! Todos os produtos e dados associados a este agendamento serão permanentemente excluídos.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sim, excluir!',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            // Feedback de carregamento
            Swal.fire({
                title: 'Excluindo...',
                text: 'Por favor, aguarde.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Requisição DELETE
            fetch(`/agendamento/excluir/${idAgendamento}`, {
                method: 'DELETE',
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Excluído!',
                            'O agendamento foi excluído com sucesso.',
                            'success'
                        );

                        const cardParaRemover = document.querySelector(`.agendamento-container.id-${idAgendamento}`);
                        if (cardParaRemover) {
                            // Fade-out + reload
                            cardParaRemover.style.transition = 'opacity 0.5s ease';
                            cardParaRemover.style.opacity = '0';
                            setTimeout(() => {
                                cardParaRemover.remove();
                                location.reload();
                            }, 500);
                        } else {
                            // Se não achar o card, recarrega direto
                            location.reload();
                        }
                    } else {
                        Swal.fire(
                            'Erro!',
                            'Não foi possível excluir o agendamento. ' + (data.message || ''),
                            'error'
                        );
                    }
                })
                .catch(() => {
                    Swal.fire(
                        'Erro de Rede!',
                        'Não foi possível se comunicar com o servidor.',
                        'error'
                    );
                });
        }
    });
}

│  ├─ alteracoes/
│  │  ├─ alteracoes.css
body {
    font-weight: 500;
}

/* Card Wrapper */
.card {
    border: none;
    border-radius: 0.5rem;
}

.card-body {
    padding: 0;
}

/* Table Base Styles */
.table {
    font-size: 0.95rem;
    margin-bottom: 0;
}

.table-responsive {
    overflow-x: auto;
    /* permite scroll lateral sempre que necessário */
    border-radius: 0.5rem;
}

.table-responsive table {
    border-collapse: separate;
    border-radius: 0.5rem 0.5rem 0 0;
}

/* Header: blue background + white text */
.table thead {
    background-color: #007bff;
}

.table thead th {
    color: #fff;
    border: none;
    font-weight: 600;
    padding: 0.75rem 1rem;
}

/* Zebra stripes & hover */
.table tbody tr:nth-child(even) {
    background-color: #fbfcfd;
}

.table tbody tr:hover {
    background-color: #f1f5f9;
}

.table td,
.table th {
    padding: 0.75rem 1rem;
    vertical-align: middle;
}

/* “Abrir no Tiny” link */
.tiny-link {
    color: #4da6ff;
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
}

.tiny-link i {
    margin-right: 4px;
    font-size: 1em;
}

.tiny-link:hover {
    text-decoration: underline;
    color: #4091e8;
}

/* REMOVIDO: bloco @media que transformava em cards no mobile */

/* Garante que a tabela permita cantos arredondados */
.table-responsive table {
    border-collapse: separate;
    border-spacing: 0;
}

/* Aplica raio apenas nos cantos superiores */
.table thead th:first-child {
    border-top-left-radius: 0.5rem;
}

.table thead th:last-child {
    border-top-right-radius: 0.5rem;
}

/* Para que o wrapper "corte" corretamente os cantos da tabela */
.table-responsive {
    overflow: hidden;
    border-radius: 0.5rem;
}

@media (max-width: 768px) {
    .table thead {
        display: none;
        /* esconde os headers */
    }

    .table tbody,
    .table tr,
    .table td {
        display: block;
        width: 100%;
    }

    .table tr {
        margin-bottom: 1rem;
        background: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        padding: 0.75rem;
    }

    .table td {
        padding: 0.5rem 1rem;
        border: none;
        text-align: left;
        position: relative;
    }

    .table td::before {
        content: attr(data-label);
        position: absolute;
        left: 1rem;
        top: 0.5rem;
        font-weight: bold;
        color: #6c757d;
        font-size: 0.85rem;
        color: #0D6EFD;
    }

    .table td {
        padding-left: 7rem;
        /* espaço para o label */
    }
}
│  │  └─ alteracoes.js
│  ├─ alterar_agendamento/
│  │  ├─ alt_agend.css
body {
  background-color: #e9f1fb;
}

.card-form {
  background-color: #fff;
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
}

.btn-primary-custom {
  background-color: #4da6ff;
  border-color: #4da6ff;
  color: #fff;
}

.btn-primary-custom:hover {
  background-color: #4091e8;
  border-color: #4091e8;
}


select {
  background-image:
    linear-gradient(45deg, transparent 50%, gray 50%),
    linear-gradient(135deg, gray 50%, transparent 50%),
    linear-gradient(to right, #ccc, #ccc);
  background-position:
    calc(100% - 20px) calc(1em + 2px),
    calc(100% - 15px) calc(1em + 2px),
    calc(100% - 2.5em) 0.5em;
  background-size:
    5px 5px,
    5px 5px,
    1px 1.5em;
  background-repeat: no-repeat;
}

select:focus {
  background-image:
    linear-gradient(45deg, green 50%, transparent 50%),
    linear-gradient(135deg, transparent 50%, green 50%),
    linear-gradient(to right, #ccc, #ccc);
  background-position:
    calc(100% - 15px) 1em,
    calc(100% - 20px) 1em,
    calc(100% - 2.5em) 0.5em;
  background-size:
    5px 5px,
    5px 5px,
    1px 1.5em;
  background-repeat: no-repeat;
  border-color: green;
  outline: 0;
}


select:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 #000;
}

│  │  └─ alt_agend.js
│  ├─ compras/
│  │  ├─ compras.css
body {
    font-weight: 500;
}

/* --- Card Wrapper --- */
.card {
    border: none;
    border-radius: 0.5rem;
}

.card-body {
    padding: 0;
}

/* --- Estilos gerais de tabela --- */
.table {
    font-size: 0.95rem;
    margin-bottom: 0;
}

.table-hover tbody tr:hover {
    background-color: #f1f5f9;
}

/* --- Wrapper responsivo com cantos arredondados --- */
.table-responsive {
    overflow: hidden;
    border-radius: 0.5rem;
}

.table-responsive table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
}

/* --- Cabeçalho azul + branco --- */
.table thead {
    background-color: #007bff;
}

.table thead th {
    color: #fff;
    border: none;
    font-weight: 600;
    padding: 0.75rem 1rem;
}

/* --- Arredonda só o topo do thead --- */
.table thead th:first-child {
    border-top-left-radius: 0.5rem;
}

.table thead th:last-child {
    border-top-right-radius: 0.5rem;
}

/* --- Listras “zebra” e células --- */
.table tbody tr:nth-child(even) {
    background-color: #fbfcfd;
}

.table td,
.table th {
    padding: 0.75rem 1rem;
    vertical-align: middle;
}

/* Melhorias visuais do dropdown */
.dropdown-menu {
    min-width: 200px;
    font-size: 0.95rem;
}

.dropdown-menu .dropdown-item {
    padding: 0.6rem 1rem;
    transition: background 0.2s ease;
}

.dropdown-menu .dropdown-item:hover {
    background-color: #f1f5f9;
}

input[type="number"] {
    width: 70px;
    padding: 4px 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 6px;
    text-align: center;
    font-weight: bold;
    color: #333;
    background-color: #f9f9f9;
    transition: border-color 0.3s, box-shadow 0.3s;
}

input[type="number"]:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    outline: none;
    background-color: #fff;
}


/* --- Responsividade para telas pequenas --- */
@media screen and (max-width: 1024px) {
    .table thead {
        display: none;
    }

    .table tbody,
    .table tr,
    .table td {
        display: block;
        width: 100%;
    }

    .table tr {
        margin-bottom: 1rem;
        background: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        padding: 0.75rem;
    }

    .table td {
        padding: 1.5rem 1rem 0.5rem 1rem;
        border: none;
        text-align: left;
        position: relative;
    }

    .table td::before {
        content: attr(data-label);
        position: absolute;
        left: 1rem;
        top: 0.5rem;
        font-weight: bold;
        color: #6c757d;
        font-size: 0.85rem;
        display: block;
        width: 100%;
        margin-bottom: 0.25rem;
        color: #0D6EFD;
    }
}

.input-wrapper {
    display: inline-block;
    position: relative;
    max-width: 100%;
}

.input-wrapper input[type="number"] {
    width: auto;
    min-width: 60px;
    max-width: 100px;
    box-sizing: content-box;
}

.input-wrapper .input-mirror {
    position: absolute;
    top: 0;
    left: 0;
    visibility: hidden;
    white-space: pre;
    font-weight: bold;
    font-family: inherit;
    font-size: inherit;
    padding: 4px 8px;
}

@media print {
    body * {
        visibility: hidden;
    }

    #container-table,
    #container-table * {
        visibility: visible;
    }

    #container-table {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        overflow: visible !important;
        max-height: none !important;
    }

    .table-responsive {
        overflow: visible !important;
        max-height: none !important;
    }

    input[type="number"] {
        border: none !important;
        background: transparent !important;
        font-weight: normal;
        width: auto !important;
    }

    .input-wrapper .input-mirror {
        display: none !important;
    }
}

/* Esconde o cabeçalho de impressão na tela normal */
.print-header {
    display: none;
}

/* Estiliza o cabeçalho apenas na impressão */
@media print {
    .print-header {
        display: block;
        text-align: center;
        margin-bottom: 2rem;
    }

    .print-logo {
        max-width: 150px;
        margin-bottom: 1rem;
    }

    .print-title {
        font-size: 1.5rem;
        font-weight: bold;
    }
}

@media print {
    .print-meta {
        font-size: 0.9rem;
        margin-top: -1rem;
        margin-bottom: 2rem;
        color: #444;
    }

    .print-meta span {
        font-weight: bold;
    }
}
│  │  └─ compras.js
async function getTinyData(ele) {
    let id = ele.id.split('row-')[1]
    let quant_total = $(`#qnt-total-${id}`).text()
    console.log(quant_total)
    const response = await fetch(`https://agendamento.jaupesca.com.br/dados-compra-tiny/${id}`, { mode: 'cors' }) // TODO: Mudar para o IP correto
    if (!response.ok) {
        throw new Error(`Response status: ${response.status}`)
    }
    const texto = await response.json()
    console.log(texto['fornecedores'])
    if (texto['fornecedores'].length > 0) {
        $(`#fornecedor-${id}`).text(texto['fornecedores'][0]['nome'] != '' ? texto['fornecedores'][0]['nome'] : "Não achado")
        $(`#cod-fornecedor-${id}`).text(texto['fornecedores'][0]['codigoProdutoNoFornecedor'] != '' ? texto['fornecedores'][0]['codigoProdutoNoFornecedor'] : "Não achado")
    } else {
        $(`#fornecedor-${id}`).text("Não achado")
        $(`#cod-fornecedor-${id}`).text("Não achado")
    }
    $(`#qnt-faltante-${id}`).text(Math.max(0, quant_total - parseInt(texto['estoque']['quantidade'])))
    $(`#estoque-tiny-${id}`).text(texto['estoque']['quantidade'])
    $(`#qnt-compra-${id}`).val(0)
}

Array.from($('.tr-class')).forEach((x, index, arr) => {
    
   getTinyData(x) // TODO Reativar
})

function turnTableDataToJson(extensao) {
    let allData = []
    Array.from($('.tr-class')).forEach((produto) => {
        let children = $(produto).children()
        allData.push(JSON.stringify(
            {
                nome: children[0].textContent,
                fornecedor: children[1].textContent,
                cod_fornecedor: children[2].textContent,
                qnt_total: children[3].textContent,
                estoque_tiny: children[4].textContent,
                qnt_faltante: children[5].textContent,
                qnt_compra: $(children[6]).children()[0].value
            }))
    })
    let data = new FormData()
    data.append('dados', allData)
    fetch(`https://agendamento.jaupesca.com.br/compra-planilha/${extensao}`, { // TODO: Mudar para o IP correto
        mode: 'cors',
        method: 'POST',
        body: data
    }).then((response) => {
        window.location.replace(response.url);
    })
}

function autoResizeInput(input) {
    const mirror = input.nextElementSibling;
    mirror.textContent = input.value || "0";
    input.style.width = mirror.offsetWidth + "px";
}

function removeComprado(input) {
    quant = Array.from(input.parentElement.parentElement.children[0].children)[0].value
    id = input.id.split('remover-')[1]

    fetch(`https://agendamento.jaupesca.com.br/remover-compra/${id}/${quant}`, {mode: 'cors'}) //TODO - Localização do endereço
}

// Aplica ao carregar a tabela
window.addEventListener("load", () => {
    document.querySelectorAll(".input-wrapper input[type='number']").forEach(input => autoResizeInput(input));
});

window.addEventListener("load", () => {
    const hoje = new Date();
    const dataFormatada = hoje.toLocaleDateString('pt-BR') + ' ' + hoje.toLocaleTimeString('pt-BR');
    const spanData = document.getElementById("data-hoje");
    if (spanData) {
        spanData.innerText = dataFormatada;
    }
});

│  ├─ config/
│  │  └─ config.css
.printer-card {
    background-color: #ffffff;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 700px;
    margin: 20px auto;
    display: flex;
    align-items: center;
    gap: 15px;
}

.perfil-card {
    padding-bottom: 3.25rem;
    padding-top: 3rem;
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin: 20px auto;
    text-align: center;
}

.perfil-card .perfil-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    border: 3px solid #002B5C;
    object-fit: cover;
    display: block;
    margin: 0 auto 12px;
}

/* Botão de sair no perfil */
.perfil-card .btn-logout {
    margin-top: 12px;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    color: #F64650;
    border: 1px solid #F64650;
    background: transparent;
    padding: 6px 12px;
    border-radius: 4px;
    font-weight: bold;
    text-decoration: none;
}

.perfil-card .btn-logout:hover {
    background: rgba(246,70,80,0.1);
}

│  ├─ embalar/
│  │  ├─ BrowserPrint-3.1.250.min.js
var $jscomp = $jscomp || {}; $jscomp.scope = {}; $jscomp.checkStringArgs = function (e, g, k) { if (null == e) throw new TypeError("The 'this' value for String.prototype." + k + " must not be null or undefined"); if (g instanceof RegExp) throw new TypeError("First argument to String.prototype." + k + " must not be a regular expression"); return e + "" }; $jscomp.ASSUME_ES5 = !1; $jscomp.ASSUME_NO_NATIVE_MAP = !1; $jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (e, g, k) { e != Array.prototype && e != Object.prototype && (e[g] = k.value) }; $jscomp.getGlobal = function (e) { return "undefined" != typeof window && window === e ? e : "undefined" != typeof global && null != global ? global : e }; $jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function (e, g, k, h) { if (g) { k = $jscomp.global; e = e.split("."); for (h = 0; h < e.length - 1; h++) { var f = e[h]; f in k || (k[f] = {}); k = k[f] } e = e[e.length - 1]; h = k[e]; g = g(h); g != h && null != g && $jscomp.defineProperty(k, e, { configurable: !0, writable: !0, value: g }) } };
$jscomp.polyfill("String.prototype.startsWith", function (e) { return e ? e : function (e, k) { var h = $jscomp.checkStringArgs(this, e, "startsWith"); e += ""; var f = h.length, g = e.length; k = Math.max(0, Math.min(k | 0, h.length)); for (var q = 0; q < g && k < f;)if (h[k++] != e[q++]) return !1; return q >= g } }, "es6", "es3");
var BrowserPrint = function () {
    function e(a, c) { var b = new XMLHttpRequest; "withCredentials" in b ? b.open(a, c, !0) : "undefined" != typeof XDomainRequest ? (b = new XDomainRequest, b.open(a, c)) : b = null; return b } function g(a, c, b, d) { void 0 !== a && (void 0 === b && (b = a.sendFinishedCallback), void 0 === d && (d = a.sendErrorCallback)); return h(c, b, d) } function k(a, c, b) { void 0 === c && (c = f.defaultSuccessCallback); void 0 === b && (b = f.defaultErrorCallback); return h(a, c, b) } function h(a, c, b) {
        a.onreadystatechange = function () {
            a.readyState === XMLHttpRequest.DONE &&
                200 === a.status ? "" === a.responseType ? c(a.responseText) : c(a.response) : a.readyState === XMLHttpRequest.DONE && (b ? b(a.response) : console.log("error occurred with no errorCallback set."))
        }; return a
    } var f = {}, p = {}, q = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); navigator.userAgent.indexOf("Trident/7.0"); var m = "http://127.0.0.1:9100/"; q && "https:" === location.protocol && (m = "https://127.0.0.1:9101/"); f.Device = function (a) {
        var c = this; this.name = a.name; this.deviceType = a.deviceType; this.connection = a.connection;
        this.uid = a.uid; this.version = 2; this.provider = a.provider; this.manufacturer = a.manufacturer; this.readRetries = "bluetooth" === this.connection ? 1 : 0; this.sendErrorCallback = function (b) { }; this.sendFinishedCallback = function (b) { }; this.readErrorCallback = function (b) { }; this.readFinishedCallback = function (b) { }; this.send = function (b, a, l) {
            var d = e("POST", m + "write"); d && (g(c, d, a, l), d.send(JSON.stringify({
                device: {
                    name: this.name, uid: this.uid, connection: this.connection, deviceType: this.deviceType, version: this.version, provider: this.provider,
                    manufacturer: this.manufacturer
                }, data: b
            })))
        }; this.sendUrl = function (b, a, l, r) { var d = e("POST", m + "write"); d && (g(c, d, a, l), b = { device: { name: this.name, uid: this.uid, connection: this.connection, deviceType: this.deviceType, version: this.version, provider: this.provider, manufacturer: this.manufacturer }, url: b }, null != r && void 0 != r && (b.options = r), d.send(JSON.stringify(b))) }; this.sendFile = function (b, a, l) {
            if ("string" === typeof b) f.loadFileFromUrl(b, function (b) { c.sendFile(b, a, l) }, l); else {
                var d = e("POST", m + "write"); if (d) {
                    d.responseType =
                        "text"; k(d, a, l); var n = new FormData, g = {}; g.device = c; n.append("json", JSON.stringify(g)); n.append("blob", b); d.send(n)
                }
            }
        }; this.convertAndSendFile = function (b, a, l, c) { c || (c = {}); c.action || (c.action = "print"); f.convert(b, this, c, a, l) }; this.read = function (b, a) {
            var d = e("POST", m + "read"); d && (void 0 !== c && (void 0 === b && (b = c.readFinishedCallback), void 0 === a && (a = c.readErrorCallback)), h(d, b, a), d.send(JSON.stringify({
                device: {
                    name: this.name, uid: this.uid, connection: this.connection, deviceType: this.deviceType, version: this.version,
                    provider: this.provider, manufacturer: this.manufacturer
                }
            })))
        }; this.readUntilStringReceived = function (a, d, c, e, f) { f || (f = ""); void 0 === e && (e = this.readRetries); d = function (b, d, c, l, e) { return function (f) { if (f && 0 !== f.length) l = 0; else if (0 >= l) { d(e); return } f = e + f; "" !== a && -1 < f.indexOf(a) ? d(f) : b.readUntilStringReceived(a, d, c, l - 1, f) } }(this, d, c, e, f); this.read(d, c) }; this.readAllAvailable = function (a, d, c) { this.readUntilStringReceived("", a, d, c) }; this.sendThenRead = function (a, d, c) {
            this.send(a, function (a) {
                return function () {
                    a.read(d,
                        c)
                }
            }(this), c)
        }; this.sendThenReadUntilStringReceived = function (a, d, c, e, f) { this.send(a, function (a) { return function () { a.readUntilStringReceived(d, c, e, f) } }(this), e) }; this.sendThenReadAllAvailable = function (a, d, c, e) { this.send(a, function (a) { return function () { a.readUntilStringReceived("", d, c, e) } }(this), c) }
    }; f.defaultSuccessCallback = function () { }; f.defaultErrorCallback = function () { }; f.ApplicationConfiguration = function () { this.application = { version: "1.2.0.3", build_number: 3, api_level: 2, platform: "", supportedConversions: {} } };
    f.getLocalDevices = function (a, c, b) { var d = e("GET", m + "available"); d && (finishedFunction = function (c) { response = c; response = JSON.parse(response); for (var d in response) if (response.hasOwnProperty(d) && response[d].constructor === Array) for (arr = response[d], c = 0; c < arr.length; ++c)arr[c] = new f.Device(arr[c]); void 0 === b ? a(response) : (response.hasOwnProperty(b) || (response[b] = []), a(response[b])) }, k(d, finishedFunction, c), d.send()) }; f.getDefaultDevice = function (a, c, b) {
        var d = "default"; void 0 !== a && null != a && (d = d + "?type=" + a);
        if (a = e("GET", m + d)) finishedFunction = function (a) { response = a; "" === response ? c(null) : (response = JSON.parse(response), a = new f.Device(response), c(a)) }, a = k(a, finishedFunction, b), a.send()
    }; f.getApplicationConfiguration = function (a, c) { var b = e("GET", m + "config"); b && (finishedFunction = function (b) { response = b; "" === response ? a(null) : (response = JSON.parse(response), a(response)) }, k(b, finishedFunction, c), b.send()) }; f.readOnInterval = function (a, c, b) {
        if (void 0 === b || 0 === b) b = 1; readFunc = function () {
            a.read(function (d) {
                c(d); p[a] =
                    setTimeout(readFunc, b)
            }, function (c) { p[a] = setTimeout(readFunc, b) })
        }; p[a] = setTimeout(readFunc, b)
    }; f.stopReadOnInterval = function (a) { p[a] && clearTimeout(p[a]) }; f.bindFieldToReadData = function (a, c, b, d) { f.readOnInterval(a, function (a) { "" !== a && (c.value = a, void 0 !== d && null != d && d()) }, b) }; f.loadFileFromUrl = function (a, c, b) { request = e("get", a); console.log("ResponseType: " + request.responseType); request.responseType = "blob"; k(request, c, b); request.send() }; f.convert = function (a, c, b, d, l) {
        if (a) if ("string" === typeof a) f.loadFileFromUrl(a,
            function (e) { b.fromFormat || (b.fromFormat = a.substring(a.length - 3)); f.convert(e, c, b, d, l) }, l); else {
            var g = e("POST", m + "convert"); a.type && (a.type.startsWith("image/") || a.type.startsWith("application/")) && (b.fromFormat = a.type.toLowerCase().replace("image/", "").replace("application/", "").replace("x-ms-", "")); if (g) {
                g.responseType = "text"; var h = void 0; void 0 != d && (h = function (a) { d(JSON.parse(a)) }); k(g, h, l); h = new FormData; var t = {}; null != b && void 0 !== b && (t.options = b); c && (t.device = c); h.append("json", JSON.stringify(t));
                h.append("blob", a); g.send(h)
            }
        } else l ? l("Resource not specified") : f.defaultErrorCallback("Resource not specified")
    }; f.scanImage = function (a, c, b, d) {
        if (a) if ("string" === typeof a) f.loadFileFromUrl(a, function (e) { c.format || (c.format = a.substring(a.length - 3)); f.scanImage(e, c, b, d) }, d); else {
            var g = e("POST", m + "convert/scan"); a.type && (a.type.startsWith("image/") || a.type.startsWith("application/")) && (c.format = a.type.toLowerCase().replace("image/", "").replace("application/", "").replace("x-ms-", "")); if (g) {
                g.responseType =
                    "text"; var h = void 0; void 0 != b && (h = function (a) { b(JSON.parse(a)) }); k(g, h, d); h = new FormData; var n = {}; n.options = c; h.append("json", JSON.stringify(n)); h.append("blob", a); g.send(h)
            }
        } else d ? d("Resource not specified") : f.defaultErrorCallback("Resource not specified")
    }; return f
}();
│  │  ├─ BrowserPrint-Zebra-1.1.250.min.js
var $jscomp = $jscomp || {}; $jscomp.scope = {}; $jscomp.ASSUME_ES5 = !1; $jscomp.ASSUME_NO_NATIVE_MAP = !1; $jscomp.ASSUME_NO_NATIVE_SET = !1; $jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (e, h, g) { e != Array.prototype && e != Object.prototype && (e[h] = g.value) }; $jscomp.getGlobal = function (e) { return "undefined" != typeof window && window === e ? e : "undefined" != typeof global && null != global ? global : e }; $jscomp.global = $jscomp.getGlobal(this); $jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function () { $jscomp.initSymbol = function () { }; $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol) }; $jscomp.Symbol = function () { var e = 0; return function (h) { return $jscomp.SYMBOL_PREFIX + (h || "") + e++ } }();
$jscomp.initSymbolIterator = function () { $jscomp.initSymbol(); var e = $jscomp.global.Symbol.iterator; e || (e = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator")); "function" != typeof Array.prototype[e] && $jscomp.defineProperty(Array.prototype, e, { configurable: !0, writable: !0, value: function () { return $jscomp.arrayIterator(this) } }); $jscomp.initSymbolIterator = function () { } }; $jscomp.arrayIterator = function (e) { var h = 0; return $jscomp.iteratorPrototype(function () { return h < e.length ? { done: !1, value: e[h++] } : { done: !0 } }) };
$jscomp.iteratorPrototype = function (e) { $jscomp.initSymbolIterator(); e = { next: e }; e[$jscomp.global.Symbol.iterator] = function () { return this }; return e }; $jscomp.makeIterator = function (e) { $jscomp.initSymbolIterator(); var h = e[Symbol.iterator]; return h ? h.call(e) : $jscomp.arrayIterator(e) };
$jscomp.polyfill = function (e, h, g, l) { if (h) { g = $jscomp.global; e = e.split("."); for (l = 0; l < e.length - 1; l++) { var c = e[l]; c in g || (g[c] = {}); g = g[c] } e = e[e.length - 1]; l = g[e]; h = h(l); h != l && null != h && $jscomp.defineProperty(g, e, { configurable: !0, writable: !0, value: h }) } }; $jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function (e) {
    function h() { this.batch_ = null } function g(b) { return b instanceof c ? b : new c(function (a, f) { a(b) }) } if (e && !$jscomp.FORCE_POLYFILL_PROMISE) return e; h.prototype.asyncExecute = function (b) { null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_()); this.batch_.push(b); return this }; h.prototype.asyncExecuteBatch_ = function () { var b = this; this.asyncExecuteFunction(function () { b.executeBatch_() }) }; var l = $jscomp.global.setTimeout; h.prototype.asyncExecuteFunction = function (b) {
        l(b,
            0)
    }; h.prototype.executeBatch_ = function () { for (; this.batch_ && this.batch_.length;) { var b = this.batch_; this.batch_ = []; for (var a = 0; a < b.length; ++a) { var f = b[a]; delete b[a]; try { f() } catch (k) { this.asyncThrow_(k) } } } this.batch_ = null }; h.prototype.asyncThrow_ = function (b) { this.asyncExecuteFunction(function () { throw b; }) }; var c = function (b) { this.state_ = 0; this.result_ = void 0; this.onSettledCallbacks_ = []; var a = this.createResolveAndReject_(); try { b(a.resolve, a.reject) } catch (f) { a.reject(f) } }; c.prototype.createResolveAndReject_ =
        function () { function b(b) { return function (k) { f || (f = !0, b.call(a, k)) } } var a = this, f = !1; return { resolve: b(this.resolveTo_), reject: b(this.reject_) } }; c.prototype.resolveTo_ = function (b) { if (b === this) this.reject_(new TypeError("A Promise cannot resolve to itself")); else if (b instanceof c) this.settleSameAsPromise_(b); else { a: switch (typeof b) { case "object": var a = null != b; break a; case "function": a = !0; break a; default: a = !1 }a ? this.resolveToNonPromiseObj_(b) : this.fulfill_(b) } }; c.prototype.resolveToNonPromiseObj_ = function (b) {
            var a =
                void 0; try { a = b.then } catch (f) { this.reject_(f); return } "function" == typeof a ? this.settleSameAsThenable_(a, b) : this.fulfill_(b)
        }; c.prototype.reject_ = function (b) { this.settle_(2, b) }; c.prototype.fulfill_ = function (b) { this.settle_(1, b) }; c.prototype.settle_ = function (b, a) { if (0 != this.state_) throw Error("Cannot settle(" + b + ", " + a | "): Promise already settled in state" + this.state_); this.state_ = b; this.result_ = a; this.executeOnSettledCallbacks_() }; c.prototype.executeOnSettledCallbacks_ = function () {
            if (null != this.onSettledCallbacks_) {
                for (var b =
                    this.onSettledCallbacks_, a = 0; a < b.length; ++a)b[a].call(), b[a] = null; this.onSettledCallbacks_ = null
            }
        }; var d = new h; c.prototype.settleSameAsPromise_ = function (b) { var a = this.createResolveAndReject_(); b.callWhenSettled_(a.resolve, a.reject) }; c.prototype.settleSameAsThenable_ = function (b, a) { var f = this.createResolveAndReject_(); try { b.call(a, f.resolve, f.reject) } catch (k) { f.reject(k) } }; c.prototype.then = function (b, a) {
            function f(a, f) { return "function" == typeof a ? function (f) { try { k(a(f)) } catch (n) { d(n) } } : f } var k, d, e = new c(function (a,
                f) { k = a; d = f }); this.callWhenSettled_(f(b, k), f(a, d)); return e
        }; c.prototype.catch = function (b) { return this.then(void 0, b) }; c.prototype.callWhenSettled_ = function (b, a) { function f() { switch (k.state_) { case 1: b(k.result_); break; case 2: a(k.result_); break; default: throw Error("Unexpected state: " + k.state_); } } var k = this; null == this.onSettledCallbacks_ ? d.asyncExecute(f) : this.onSettledCallbacks_.push(function () { d.asyncExecute(f) }) }; c.resolve = g; c.reject = function (b) { return new c(function (a, f) { f(b) }) }; c.race = function (b) {
            return new c(function (a,
                f) { for (var k = $jscomp.makeIterator(b), d = k.next(); !d.done; d = k.next())g(d.value).callWhenSettled_(a, f) })
        }; c.all = function (b) { var a = $jscomp.makeIterator(b), f = a.next(); return f.done ? g([]) : new c(function (b, d) { function k(a) { return function (f) { c[a] = f; e--; 0 == e && b(c) } } var c = [], e = 0; do c.push(void 0), e++, g(f.value).callWhenSettled_(k(c.length - 1), d), f = a.next(); while (!f.done) }) }; return c
}, "es6", "es3"); function dbg(e) { }
var Zebra = function () {
    function e(c, d) { if (d instanceof g.Printer.Status && l[c.device.uid]) { if (d.offline) { if (c.errors++, c.errors < c.errorsForOffline) return } else c.errors = 0; var b = l[c.device.uid].status, a = JSON.stringify(b); c.status = d; statusStr = JSON.stringify(d); if (statusStr !== a) c.onchange(b, d) } } function h(c) { return 2 !== c.charCodeAt(0) || 3 !== c.charCodeAt(c.length - 1) ? (dbg("Response did not contain proper control characters"), !1) : !0 } var g = {}, l = {}; setInterval(function () {
        for (var c in l) l.hasOwnProperty(c) && (c =
            l[c], function (d) { d.device.getStatus(function (b) { e(d, b) }, function (b) { e(d, new g.Printer.Status("")) }) }(c))
    }, 2E3); g.Printer = function (c) {
        BrowserPrint.Device.call(this, c); g.Printer.Status = function (a) {
            this.raw = a; this.isFlagSet = function (a) { return "1" === this.raw.charAt(a) }; this.offline = !1; a || (a = ""); a = a.trim(); h(a) ? (this.offline = !1, this.paperOut = this.isFlagSet(5), this.paused = this.isFlagSet(7), this.headOpen = this.isFlagSet(43), this.ribbonOut = this.isFlagSet(45)) : (this.offline = !0, this.ribbonOut = this.headOpen = this.paused =
                this.paperOut = !1); this.isPrinterReady = function () { return !(this.paperOut || this.paused || this.headOpen || this.ribbonOut || this.offline) }; this.getMessage = function () { return this.isPrinterReady() ? "Ready" : this.offline ? "Offline" : this.paperOut ? "Paper Out" : this.headOpen ? "Head Open" : this.ribbonOut ? "Ribbon Out" : this.paused ? "Paused" : "Ready" }
        }; g.Printer.Info = function (a) { if (!a) throw "Invalid Response"; this.raw = a; a = a.trim(); if (!h(a)) throw "Invalid Response"; a = a.split(","); this.model = a[0].substring(1); this.firmware = a[1] };
        g.Printer.Configuration = function (a) {
            if (!a) throw "Invalid Response"; this.raw = a = a.trim(); this.settings = {}; if (!h(a)) throw "Invalid Response"; a = a.replace(String.fromCharCode(2), ""); a = a.replace(String.fromCharCode(3), ""); a = a.split("\n"); for (var f = 0; f < a.length; ++f) { var b = a[f].trim(), d = b.substring(20); b = b.substring(0, 20).trim(); this.settings[d] = b } this.darkness = parseFloat(this.settings.DARKNESS); this.printSpeed = parseInt(this.settings["PRINT SPEED"].replace("IPS", "").trim()); this.printWidth = parseInt(this.settings["PRINT WIDTH"]);
            this.labelLength = parseInt(this.settings["LABEL LENGTH"]); this.firmwareVersion = this.settings.FIRMWARE.replace("<-", "").trim(); this.linkOSVersion = this.settings.hasOwnProperty("LINK-OS VERSION") ? this.settings["LINK-OS VERSION"] : "0"
        }; var d = this; this.configuration = void 0; this.device_request_queue = []; this.clearRequestQueue = function () { var a = this.device_request_queue[0]; this.device_request_queue = []; a && a.started && (this.device_request_queue[0] = a) }; this.Request = function (a, f, b, c, e) {
            this.type = a; this.command = f;
            this.received = b; this.success = c; this.error = function (a) { return function (f) { a(f); d.executeNextRequest() } }(e); this.execute = function () { this.started = !0; "info" == this.type || "config" == this.type || "status" == this.type ? d.sendThenReadUntilStringReceived(this.command, String.fromCharCode(3), this.received, this.error) : d.sendThenReadAllAvailable(this.command, this.received, this.error) }
        }; this.executeNextRequest = function () { d.device_request_queue.shift(); d.executeRequest() }; this.executeRequest = function () {
            dbg("Requests in queue: " +
                d.device_request_queue.length); 0 < d.device_request_queue.length && (dbg("Executing next request..."), d.device_request_queue[0].execute())
        }; this.queueRequest = function (a) { dbg("Queueing request " + a.type + ": " + d.device_request_queue.length); d.device_request_queue.push(a); 1 === d.device_request_queue.length && a.execute() }; this.onStatusResponse = function (a) {
            dbg("received status response"); var f = void 0; try { f = new g.Printer.Status(a) } catch (k) { a = d.device_request_queue[0], a.error(k), d.executeNextRequest() } for (; 0 < d.device_request_queue.length;)if (a =
                d.device_request_queue[0], "status" === a.type) dbg("delivering status..."), a.success(f), d.device_request_queue.shift(); else { dbg("delivered to all status requests."); break } d.executeRequest()
        }; this.onResponse = function (a, f) { dbg("received info response"); var b = d.device_request_queue[0]; if (void 0 != f) try { a = new f(a) } catch (m) { b.error && b.error(m); d.executeNextRequest(); return } b.success && b.success(a); d.executeNextRequest() }; this.onSGDResponse = function (a) { dbg("received sgd response"); d.onResponse(a) }; this.onInfoResponse =
            function (a) { dbg("received info response"); d.onResponse(a, g.Printer.Info) }; this.onConfigurationResponse = function (a) { dbg("received config response"); try { d.configuration = new g.Printer.Configuration(a) } catch (f) { } d.onResponse(a, g.Printer.Configuration) }; this.setSGD = function (a, f, b, c) { if (!b && !c) return new Promise(function (b, c) { d.setSGD(a, f, b, c) }); d.send('! U1 setvar "' + a + '" "' + f + '"\r\n', b, c) }; this.getSGD = function (a, b, c) {
                if (!b && !c) return new Promise(function (b, f) { d.getSGD(a, b, f) }); b = new this.Request("sgd",
                    '! U1 getvar "' + a + '"\r\n', this.onSGDResponse, b, c); this.queueRequest(b)
            }; this.setThenGetSGD = function (a, b, c, e) { if (!c && !e) return new Promise(function (f, c) { d.setThenGetSGD(a, b, f, c) }); this.setSGD(a, b, function () { d.getSGD(a, c, e) }, e) }; this.getInfo = function (a, b) { if (!a && !b) return new Promise(function (a, b) { d.getInfo(a, b) }); a = new this.Request("info", "~hi\r\n", this.onInfoResponse, a, b); this.queueRequest(a) }; this.getConfiguration = function (a, b) {
                if (!a && !b) return new Promise(function (a, b) { d.getConfiguration(a, b) });
                a = new this.Request("config", "^XA^HH^XZ", this.onConfigurationResponse, a, b); this.queueRequest(a)
            }; this.getStatus = function (a, b) { if (!a && !b) return new Promise(function (a, b) { d.getStatus(a, b) }); a = new this.Request("status", "~hs\r\n", this.onStatusResponse, a, b); d.queueRequest(a) }; this.query = function (a, b, c) { if (!b && !c) return new Promise(function (b, c) { d.query(a, b, c) }); b = new this.Request("", a, this.onResponse, b, c); this.queueRequest(b) }; this.isPrinterReady = function (a, b) {
                if (!a && !b) return new Promise(function (a, b) {
                    d.isPrinterReady(a,
                        b)
                }); this.getStatus().then(function (c) { c.isPrinterReady() ? a(c.getMessage()) : b(c.getMessage()) })
            }; this.printImageAsLabel = function (a, c, e, g) { if (!e && !g) return new Promise(function (b, f) { d.printImageAsLabel(a, c, b, f) }); b().then(function (b) { c.fitTo = { width: b.printWidth, height: b.labelLength }; c.action = "print"; BrowserPrint.convert(a, d, c, e, g) }).catch(g) }; this.getConvertedResource = function (a, c, e, g) {
                if (!e && !g) return new Promise(function (b, f) { d.getConvertedResource(a, c, b, f) }); b().then(function (b) {
                    c.action = "return";
                    BrowserPrint.convert(a, d, c, e, g)
                }).catch(g)
            }; this.storeConvertedResource = function (a, c, e, g) { if (!e && !g) return new Promise(function (b, e) { d.storeConvertedResource(a, c, b, e) }); b().then(function (b) { c.action = "store"; BrowserPrint.convert(a, d, c, e, g) }).catch(g) }; var b = function () { return new Promise(function (a, b) { if (d.configuration) a(d.configuration); else return d.getConfiguration().then(function (a) { d.configuration = a; return d.configuration }).catch(function (a) { b(a) }) }) }; this.configTimeout = function () {
                d.configuration ||
                d.getConfiguration().then(function (a) { return d.configuration = a }).catch(function () { setTimeout(d.configTimeout, 1E3) })
            }; this.configTimeout()
    }; g.watch = function (c, d, b) { b || (b = 2); l[c.uid] = { device: c, status: "", onchange: d, errors: 0, errorsForOffline: b } }; g.stopWatching = function (c) { delete l[c.uid] }; return g
}();

│  │  ├─ embalar.css
/* embalar.css - Estilos para a página de embalagem */

body {
  background-color: #e9f1fb;
}

/* --- CABEÇALHO --- */
.header-bar {
  background-color: #0D6EFD;
  color: #fff;
  font-weight: bold;
}

.header-bar h5 {
  font-size: 1.25rem;
  margin-bottom: 0.5rem;
}

.header-bar strong {
  color: #FDD484;
}

/* --- LISTA DE PRODUTOS PRINCIPAL (DIREITA) --- */
#lista-anuncios {
  list-style: none;
  margin: 0;
  padding: 0;
  max-height: 68vh;
  /* Aumentei um pouco para ocupar mais espaço vertical */
  overflow-y: auto;
}

#lista-anuncios .produto-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.75rem 1rem;
  margin-bottom: 0.5rem;
  overflow: hidden;
  transition: background-color 0.3s ease-in-out;
}

#lista-anuncios .produto-info {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-right: 1rem;
}

#lista-anuncios .produto-meta {
  flex-shrink: 0;
  display: flex;
  gap: 1rem;
  align-items: center;
}

#lista-anuncios .produto-meta .sku {
  color: #28a745;
  font-weight: 400;
}

#lista-anuncios .produto-meta .sku.etiqueta {
  color: #0D6EFD !important;
}

#lista-anuncios .produto-item.produto-concluido {
  background-color: #198754;
  color: white;
  border-color: #146c43;
}

#lista-anuncios .produto-item.produto-concluido .produto-info,
#lista-anuncios .produto-item.produto-concluido .produto-meta,
#lista-anuncios .produto-item.produto-concluido .produto-meta .sku,
#lista-anuncios .produto-item.produto-concluido .bi-info-circle {
  color: white !important;
}

/* --- CAIXAS (ESQUERDA) --- */
#caixas-container {
  max-height: 40vh;
  overflow-y: auto;
  padding-right: 10px;
}

.caixa-card {
  transition: all 0.3s ease-in-out;
  border: 1px solid #dee2e6;
}

.caixa-aberta {
  border-color: #0d6efd;
  border-width: 2px;
  box-shadow: 0 4px 12px rgba(13, 110, 253, 0.25);
}

.caixa-aberta .card-header {
  background-color: #0d6efd;
  color: white;
  font-weight: bold;
}

.caixa-fechada {
  background-color: #f8f9fa;
}

.caixa-fechada .card-header {
  background-color: #e9ecef;
  color: #6c757d;
}

.caixa-vazia-mensagem {
  color: #6c757d;
  font-style: italic;
  text-align: center;
  padding: 1rem;
}

.item-caixa-novo {
  animation: flash-animation 0.7s ease;
}

@keyframes flash-animation {
  0% {
    background-color: #cfe2ff;
  }

  100% {
    background-color: transparent;
  }
}

.add-new-box {
  margin: 0px 10px 15px 0px;
  border: 2px dashed #6c757da1;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.add-new-box:hover {
  background-color: #f8f9fa;
  border-color: #0d6efdb8 !important;
  color: #0d6dfdfd;
}

.add-new-box.bg-success:hover {
  background-color: #146c43 !important;
  /* Um verde mais escuro */
  border-color: #146c43 !important;
}

.ajuste_btn_finalizar {
  margin: 0px 10px 20px 0px;
}

/*
--- NOVOS ESTILOS PARA O MODAL DE CONFIRMAÇÃO ---
*/

/* Aumenta a largura do modal de confirmação */
#modalConfirmeAnuncio .modal-dialog {
  max-width: 800px;
}

/* Layout principal do modal com Flexbox */
.modal-main-layout {
  display: flex;
  gap: 1.5rem;
  /* Espaço entre a imagem e a lista */
  align-items: flex-start;
}

.modal-image-container {
  flex: 0 0 250px;
  /* Largura fixa para a imagem */
  text-align: center;
}

.modal-image-container img {
  max-width: 100%;
  border-radius: 0.25rem;
  border: 1px solid #dee2e6;
}

.modal-list-container {
  flex: 1;
  /* A lista ocupa o espaço restante */
}

/* Estilo dos itens da lista de componentes */
.lista-componentes {
  padding: 0;
  margin: 0;
  list-style: none;
}

.lista-componentes .componente-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #e9ecef;
}

.lista-componentes .componente-item:last-child {
  border-bottom: none;
}

.componente-nome {
  font-size: 0.95rem;
  font-weight: 500;
}

.componente-status {
  font-weight: bold;
  white-space: nowrap;
  margin-left: 1rem;
}

/* Input de bipagem no rodapé do modal */
.modal-footer-input {
  margin-top: 1.5rem;
}

/* Cores de status dinâmicas */
.status-pendente .componente-nome,
.status-pendente .componente-status {
  color: #dc3545;
  /* Vermelho */
}

.status-progresso .componente-nome,
.status-progresso .componente-status {
  color: #fd7e14;
  /* Laranja */
}

.status-concluido .componente-nome,
.status-concluido .componente-status {
  color: #198754;
  /* Verde */
}

.status-concluido {
  background-color: #f0fff0;
  /* Fundo verde bem claro */
}
│  │  └─ embalar.js
document.addEventListener("DOMContentLoaded", async () => {
  // 1) Dados iniciais e imagem padrão
  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);
  const placeholderImage = document.getElementById("placeholder-image").dataset.url;
  const headerBar = document.querySelector(".header-bar");
  const idAgendMl = headerBar ? headerBar.dataset.idMl : null;
  const idAgendBd = headerBar ? headerBar.dataset.idBd : null;

  const agendamentoCompleto = {};

  // Pega os dados principais dos atributos data-* do cabeçalho
  if (headerBar) {
    agendamentoCompleto.id_agend_ml = headerBar.dataset.idMl;
    agendamentoCompleto.id_bd = headerBar.dataset.idBd;
    agendamentoCompleto.empresa = headerBar.dataset.empresa;
    // LINHA NOVA: Captura o centro de distribuição
    agendamentoCompleto.centro_distribuicao = headerBar.dataset.centro;
  }

  // Pega os dados que estão como texto no cabeçalho
  const divsInfo = headerBar.querySelectorAll(".d-flex.flex-wrap > div");
  divsInfo.forEach(div => {
    const textContent = div.textContent.trim();
    if (textContent.startsWith("Colaborador:")) {
      agendamentoCompleto.colaborador = textContent.replace("Colaborador:", "").trim();
    } else if (textContent.startsWith("Data:")) {
      agendamentoCompleto.data = textContent.replace("Data:", "").trim();
    } else if (textContent.startsWith("Hora:")) {
      agendamentoCompleto.hora = textContent.replace("Hora:", "").trim();
    }
  });

  // Adiciona a lista de produtos (que já inclui as composições)
  agendamentoCompleto.produtos = produtos;

  // Finalmente, exibe o objeto completo no console
  console.log("Dados do Agendamento (reconstruídos pelo JS):", agendamentoCompleto);





  const empresa = parseInt(headerBar.dataset.empresa, 10);
  const sellerIdMap = {
    1: '539172427',   // Jaú Pesca
    2: '1111253828',  // Jaú Fishing
    3: '491881969'    // L.T. Sports
  };
  const sellerId = sellerIdMap[empresa] || '';

  // Variáveis de estado para as caixas
  let caixas = [];
  let caixaAtivaIndex = -1;
  let caixaStartTime = null;

  function imprimirNaImpressoraDeRede(zpl) {
    BrowserPrint.getLocalDevices(
      devices => {
        const termos = ['deskjp12', '192.168.15.152'];
        const printer = devices.find(d =>
          d.connection === 'driver' &&
          termos.some(t => d.uid.toLowerCase().includes(t))
        );
        if (!printer) {
          console.error("❌ Impressora compartilhada não encontrada.");
          return;
        }
        printer.send(
          zpl,
          () => console.log("✅ Enviado via driver Windows!"),
          err => console.error("❌ Erro ao imprimir via driver:", err)
        );
      },
      err => console.error("❌ Erro ao listar dispositivos:", err),
      "printer"
    );
  }


  function printViaBrowserPrint(zpl) {
    BrowserPrint.getDefaultDevice("printer", function (printer) {
      printer.send(zpl,
        () => console.log("enviado!"),
        err => console.error("erro printer:", err)
      );
    }, err => console.error("nenhuma impressora:", err));
  }

  if (!idAgendMl) {
    console.error("Não foi possível encontrar o ID do Agendamento (id_agend_ml) no HTML.");
    Swal.fire("Erro Crítico", "Não foi possível identificar o agendamento. A página não funcionará corretamente.", "error");
    return;
  }

  // 2) Instâncias dos modais (Bootstrap 5)
  const modalSelecione = new bootstrap.Modal(document.getElementById("modalSelecioneAnuncio"));
  const modalConfirme = new bootstrap.Modal(document.getElementById("modalConfirmeAnuncio"));

  // 3) Elementos da UI
  const inputSku = document.getElementById("input-embalar");
  const bodySelecione = document.getElementById("modalSelecioneAnuncioBody");
  const bodyConfirme = document.getElementById("modalConfirmeAnuncioBody");
  const btnConfirmar = document.getElementById("btnConfirmarAnuncio");
  const caixasContainer = document.getElementById("caixas-container");
  // NOVO: Container dos botões e caixas
  const caixaActionsContainer = document.getElementById("caixa-actions-container");
  const contadorFinalizadosEl = document.getElementById("finalizadosP");
  const listaPrincipalEl = document.getElementById("lista-anuncios");
  const templateNovaCaixa = document.getElementById("template-nova-caixa");
  // NOVO: Template do botão finalizar
  const templateFinalizar = document.getElementById("template-finalizar-embalagem");

  async function carregarCaixasSalvas() {
    try {
      const resp = await fetch(`/api/embalar/caixa/${idAgendMl}`);
      if (!resp.ok) return;
      const caixasData = await resp.json();
      caixasData.forEach(box => {
        // recria cada caixa fechada no DOM
        const num = box.caixa_num;
        const totalItens = box.itens.reduce((s, i) => s + i.quantidade, 0);
        // adiciona ao state
        const idx = caixas.length;
        caixas.push({
          id: num,
          itens: box.itens.reduce((acc, i) => ({ ...acc, [i.sku]: i.quantidade }), {}),
          fechada: true,
          element: null
        });
        // monta o card
        const caixaDiv = document.createElement("div");
        caixaDiv.className = "card caixa-card caixa-fechada";
        caixaDiv.innerHTML = `
          <div class="card-header">Caixa ${num} - (${totalItens} ${totalItens > 1 ? 'itens' : 'item'})</div>
          <div class="card-body">
            <ul class="list-unstyled mb-0"></ul>
          </div>`;
        caixas[idx].element = caixaDiv;
        caixasContainer.prepend(caixaDiv);
        // popula itens na lista
        const ul = caixaDiv.querySelector("ul");
        box.itens.forEach(i => {
          const li = document.createElement("li");
          li.className = "d-flex justify-content-between p-1";
          li.innerHTML = `<span>${i.sku}</span><span class="fw-bold">Unidades: ${i.quantidade}</span>`;
          ul.appendChild(li);
        });
      });
      caixaAtivaIndex = -1;
      verificarModoEtiqueta();
    } catch (error) {
      console.error("Erro ao carregar caixas salvas:", error);
    }
  }

  function atualizarPainelEsquerdo() {
    const totalProdutos = produtos.length;
    const produtosConcluidos = listaPrincipalEl.querySelectorAll(".produto-concluido").length;
    const existeCaixaAberta = caixaAtivaIndex !== -1 && !caixas[caixaAtivaIndex].fechada;

    // Limpa a área de botões (mas não as caixas)
    const btnNovaCaixa = document.getElementById('btn-nova-caixa');
    const btnFinalizar = document.getElementById('btn-finalizar-embalagem');
    if (btnNovaCaixa) btnNovaCaixa.remove();
    if (btnFinalizar) btnFinalizar.remove();
    if (totalProdutos === produtosConcluidos && totalProdutos > 0) {
      // Se todos os produtos foram concluídos...
      // A lógica para fechar uma caixa aberta (se houver) está correta e deve permanecer
      if (existeCaixaAberta) {
        fecharCaixaAtiva();
        return; // Interrompe para evitar adicionar o botão de finalizar antes da hora
      }
      // Se não há caixa aberta, adicionamos o botão "Finalizar Embalagem"
      const clone = templateFinalizar.content.cloneNode(true);
      // Pegamos a referência do botão dentro do template
      const botaoFinalizar = clone.querySelector('#btn-finalizar-embalagem');
      // AQUI ESTÁ A MUDANÇA: Adicionamos o "escutador de eventos" de clique
      // que chama a função que você já adicionou no final do seu arquivo.
      botaoFinalizar.addEventListener('click', handleFinalizarEmbalagem);
      // Finalmente, adicionamos o botão já funcional à página
      caixaActionsContainer.prepend(clone);
    } else {
      // AINDA HÁ PRODUTOS PENDENTES
      const algumProdutoProntoParaEmbalar = produtos.some(p => p.bipados !== undefined);
      if (algumProdutoProntoParaEmbalar && !existeCaixaAberta) {
        const clone = templateNovaCaixa.content.cloneNode(true);
        caixaActionsContainer.prepend(clone);
        document.getElementById('btn-nova-caixa').addEventListener('click', abrirNovaCaixa);
      }
    }
  }

  function abrirModalConfirmacao(prod) {
    if (!prod) {
      console.error("Tentativa de abrir modal de confirmação sem um produto válido.");
      return;
    }

    bodyConfirme.dataset.skuConferindo = prod.sku;
    bodyConfirme.dataset.idMlConferindo = prod.id_ml;

    const imgUrl = prod.imagemUrl || placeholderImage;
    let lisHtml;

    if (prod.composicoes && prod.composicoes.length > 0) {
      lisHtml = prod.composicoes.map((c) => {
        const requerido = c.unidades_por_kit || 1;
        return `<li class="componente-item status-pendente" data-sku-esperado="${c.sku}" data-gtin-esperado="${c.gtin}" data-requerido="${requerido}" data-bipado="0">
                        <span class="componente-nome">${c.nome}</span>
                        <span class="componente-status"><span class="contador-bipagem">(0/${requerido})</span></span>
                    </li>`;
      }).join("");
    } else {
      const requerido = 1;
      lisHtml = `<li class="componente-item status-pendente" data-sku-esperado="${prod.sku}" data-gtin-esperado="${prod.gtin}" data-requerido="${requerido}" data-bipado="0">
                       <span class="componente-nome">${prod.nome}</span>
                       <span class="componente-status"><span class="contador-bipagem">(0/${requerido})</span></span>
                   </li>`;
    }

    bodyConfirme.innerHTML = `
        <div class="modal-main-layout">
            <div class="modal-image-container"><img src="${imgUrl}" alt="${prod.nome}"></div>
            <div class="modal-list-container"><ul class="lista-componentes">${lisHtml}</ul></div>
        </div>
        <div class="modal-footer-input">
            <input type="text" id="sku-confirmacao-unico" class="form-control" placeholder="Bipar SKU do componente aqui...">
        </div>`;

    modalSelecione.hide();
    modalConfirme.show();
    setTimeout(() => { document.getElementById("sku-confirmacao-unico")?.focus(); }, 500);
  }


  // ===================================================================
  // LÓGICA DE GERENCIAMENTO DAS CAIXAS
  // ===================================================================

  function verificarModoEtiqueta() {
    const algumProdutoProntoParaEmbalar = produtos.some(p => p.bipados !== undefined);
    const existeCaixaAberta = caixaAtivaIndex !== -1 && !caixas[caixaAtivaIndex].fechada;
    const btnNovaCaixa = document.getElementById('btn-nova-caixa');

    if (algumProdutoProntoParaEmbalar && !existeCaixaAberta && !btnNovaCaixa) {
      const clone = templateNovaCaixa.content.cloneNode(true);
      caixasContainer.prepend(clone);
      document.getElementById('btn-nova-caixa').addEventListener('click', abrirNovaCaixa);
    } else if ((!algumProdutoProntoParaEmbalar || existeCaixaAberta) && btnNovaCaixa) {
      btnNovaCaixa.remove();
    }
  }

  async function abrirNovaCaixa() {
    // 1) ajusta o índice da caixa ativa
    caixaAtivaIndex = caixas.length;

    // 2) cria o objeto da caixa e empurra no state
    //    usei 'caixaObj' + var para evitar TDZ
    var caixaObj = {
      id: null,      // vai receber o num do servidor
      itens: {},        // sku → quantidade
      fechada: false,
      persisted: false,
      element: null,
    };
    caixaObj.startTime = new Date();
    caixas.push(caixaObj);

    // 3) monta o card no DOM
    const numero = caixas.length;
    const caixaDiv = document.createElement('div');
    caixaDiv.className = 'card caixa-card caixa-aberta';
    caixaDiv.innerHTML = `
    <div class="card-header">Caixa ${numero}</div>
    <div class="card-body">
      <ul class="list-unstyled mb-0"></ul>
    </div>
  `;
    // salva a referência ao elemento
    caixaObj.element = caixaDiv;

    // 4) adiciona na lista de caixas à esquerda
    caixasContainer.prepend(caixaDiv);

    // 5) atualiza os botões (Nova caixa / Finalizar)
    atualizarPainelEsquerdo();
  }

  function gerarEtiquetaCustom(caixa) {
    const idAgendamento = idAgendMl;
    const numeroCaixa = caixa.id;

    // Busca o centro de distribuição
    const centro = agendamentoCompleto.centro_distribuicao;
    // Configuração por centro
    const centerConfig = {
      BRSP11: {
        text: '(Endere_C3_A7o correto: Rua Concretex_2C 800 Galp_C3_A3o H_2C Cumbica_2C Guarulhos)_2C Centro log_C3_ADstico Guarulhos - BRSP11',
        y: 965
      },
      BRRC02: {
        text: 'Centro log_C3_ADstico Sumar_C3_A9 - BRRC02',
        y: 970
      },
      BRRC01: {
        text: 'Centro log_C3_ADstico Perus - BRRC01',
        y: 970
      },
      BRSP10: {
        text: 'Centro log_C3_ADstico SP10 - BRSP10',
        y: 970
      },
      SP06: {
        text: 'Centro log_C3_ADstico Ara_C3_A7ariguama - BRSP06',
        y: 970
      }
    };
    const cfg = centerConfig[centro] || {
      text: `Centro log_C3_ADstico ${centro}`,
      y: 970
    };

    // Monta o JSON interno do QR
    const qrPayload = {
      id: `${idAgendamento}/${numeroCaixa}`,
      reference_id: `${idAgendamento}/${numeroCaixa}`,
      t: "inb",
      ops_data: {
        source: "seller",
        container_type: "box"
      }
    };

    // Toda a lista de linhas ZPL, incluindo as duas dinâmicas para o centro
    const zpl = [
      '^XA',
      '^MCY',
      '^CI28',
      '^LH5,15',
      '^FX  HEADER  ^FS',
      '^FX Logo_Meli ^FS',
      '^FO20,10^GFA,800,800,10,,:::::::::::O0FF,M07JFE,L07FC003FE,K07EL07E,J01EN078,J07P0E,I01CP038,I07R0E,001CK01FK038,003L0IFK0C,0078J03803CJ0E,0187J06I07I01D8,0300F00F8J0FEFE0C,02003IFK01J06,04I01C6P02,08K0401FM01,1L08060CM083K0100C02M0C2M01001M046K0306I0CL064K0198I02L024Q01L02CR08K03CR04K03FR02K03FFQ01J07!C1FQ0C007E3C03EP0203F03C0078O010F003CI0EF1N0F8003CI070C4M06I03CI02003CL02I03CI02P02I036I03N0106I066I01J08J0C4I067J0EI08J078I0E38I03I0E00406I01C3CI01800100204I01C3CJ0FI080118I03C1EJ03800801FJ0780FK0C008018J0F,078J07C0823J01F,07EJ01C1C36J07E,03FK031C3K0FC,01FCJ01E18J01F8,00FER07F,007F8P01FE,003FFP0FFC,I0FFEN07FF,I03FFCL03FFC,J0IFCJ03IF,J07PFE,K0PF,K01NF8,L01LF8,N0JF,,:::::::::::^FS',
      `^FO120,30^A0N,24,24^FH^FD#${sellerId}^FS`,
      `^FO560,20^GFA,1584,1584,24,,:::::::::::::L03IFC,L07IFC,:L07IF8,L0JF8,L0JF,K01JFM0JFE007C001FI0FK07C,K01JFM0JFE007C001F001FK07C,K03IFEM0JFE007C001F001FK078,K03IFCM0JFE0078001E001FK0F8,K03IFCL01F8K0F8003E001EK0F8,K07IF8L01FL0F8003E003EK0F8,:K07IF8L01EL0F8003E003EK0F,K0JFM01EL0FI03C003EK0F,K0JFM03EK01FI03C007EJ01F,K0JFM03EK01FI07C007CJ01F,K0MFJ03EK01FI07C007CJ01F,J01MFJ03IFE001FI07C007CJ01E,J01LFEJ03IFE001EI07800FCJ01E,J03LFCJ07IFE003EI0F800FCJ03E,J03LF8J07IFE003EI0F800F8J03E,J03LFK07CK03EI0F800F8J03E,J07KFEK0FCK07E001F800F8J03E,J07KFCK0F8K07E001F001FK07C,M01FFCK0F8K07E001F001FK07C,N0FF8K0F8K07E001F001FK07C,N0FFL0F8K07E003E001FK07C,M01FEK01F8K07E007E001FK0FC,M01FCK01FL03F80FC001F8J0FC,M01F8K01FL01JF8003JF80JFE,M03FL01FM0JFI03JF80JFE,M03FL01EM07FFEI03JF00JFC,M03EV0FF,M07C,M078,M07,M0E,:M0C,L018,L01,,:::::::::^FS`,
      `^FO120,60^A0N,24,24^FH^FB550,2,0,L^FDEnvio: ${idAgendamento}/${numeroCaixa}^FS`,
      `^FO300,150^GB500,45,3^FS`,
      `^FO325,163^A0N,27,27^FB460,1,0,C^FR^FH^FDENTREGAR NA FULL^FS`,
      `^FO325,210^A0N,27,27^FB460,1,0,C^FR^FH^FDN_c3_83O V_c3_81LIDA PARA COLETA^FS`,
      `^FO400,235^GB127,0,2^FS`,
      `^FX  QR Code  ^FS`,
      `^FO280,320^BY2,2,1^BQN,2,6^FDLA,${JSON.stringify(qrPayload)}^FS`,
      `^FO0,590^A0N,35,35^FB800,1,0,C^FD${idAgendamento}/${numeroCaixa}^FS`,
      // ← Linhas dinâmicas por centro:
      `^FO0,670^A0N,150,150^FB810,1,0,C^FD${centro}^FS`,
      `^FO30,${cfg.y}^A0N,30,30^FB550,3,5,L^FH^FD${cfg.text}^FS`,
      '^FX  END CUSTOM_DATA  ^FS',
      '^FO0,900^GB800,0,2^FS',
      '^FO30,930^A0N,30,30^FB551,2,0,L^FH^FDVOLUMES^FS',// Exemplo estático se precisar como fallback
      `^FO30,1070^A0N,30,30^FH^FDEnvio: ${idAgendamento}/${numeroCaixa}^FS`,
      '^FX  END_FOOTER  ^FS',
      '^XZ'
    ].join('\n');

    console.log(zpl);
    imprimirNaImpressoraDeRede(zpl);
  }



  window.addEventListener('keydown', (e) => {
    if (e.key === 'F1' || e.key === 'F2') {
      e.preventDefault();

      const idx = caixaAtivaIndex;
      const caixa = caixas[idx];
      if (!caixa || caixa.fechada) {
        Swal.fire("Atenção", "Nenhuma caixa aberta para fechar.", "warning");
        return;
      }

      // 1) fecha a caixa (sem imprimir)
      fecharCaixaAtiva();

      // 2) imprime as etiquetas conforme a tecla
      if (e.key === 'F1') {
        gerarEtiquetaCaixa(caixa);
        gerarEtiquetaCustom(caixa);
      } else {
        // F2: só a custom
        gerarEtiquetaCustom(caixa);
      }

      // 3) atualiza botões, contador etc.
      atualizarPainelEsquerdo();
    }
  });


  function gerarEtiquetaCaixa(caixa) {
    const headerBar = document.querySelector('.header-bar');
    const freteId = headerBar.dataset.idMl;
    const dataStr = caixa.startTime.toLocaleDateString('pt-BR');
    const horaIni = caixa.startTime.toLocaleTimeString('pt-BR', { hour12: false });
    const horaFim = caixa.endTime.toLocaleTimeString('pt-BR', { hour12: false });

    const linhas = [
      '^XA^CI28',
      '^LH0,0',
      `^FO30,30^BQN,2,15^FDLA,Frete:${freteId} - Data: ${dataStr} - Inicio: ${horaIni} - Termino: ${horaFim}^FS`,
      `^FO390,40^A0N,32,32^FDFrete: ${freteId}^FS`,
      `^FO390,90^A0N,32,32^FDData: ${dataStr}^FS`,
      `^FO390,140^A0N,32,32^FDInicio: ${horaIni}^FS`,
      `^FO390,190^A0N,32,32^FDTermino: ${horaFim}^FS`,

      // Logo do mercado livre
      '^FO620,225^GFA,0,4150,30,,::::::::::::::::::::::::::::::::::::::::::Y03KFE,W01OF8,V01JF800JFC,U01FFEM03FFC,U0FF8O01FF8,T07F8Q01FF,S03FCS01FC,S0FEU03F8,R07FW07E,R0F8W01F8,Q03EY07E,Q0F8Y01F8,P03EgG07C,P078gG01F,O01FP03IFO078,O03CO01KFN03C,O07CO07F807FCN0F,O0FF8M01F8I03F8M0F8,N03CFFM03EK0FEL07FC,N0781FEK03F8K01FCJ03F8E,N0F003FEI03FEM07FE007FE07,M01EI07FE03FFCN0LF0038,M03CJ0LF8N01JFI01C,M038K0IF87X0E,M07P0EI03F8R07,M0EO01CI0FFER07,L01CO038003F1FR038,L01CO07I07807CQ01C,L038O0E001E001ER0C,L03O01C003CI0FR0E,L07O0380078I038Q06,L06O03001EJ01CQ07,L0EO03003CK0FQ03,L0CO03C0F8K078P038,K01CO01FFEL03CP018,K018P07F8M0EP018,K018g07P01C,K038g03CP0C,K038g01EP0C,K03CgG0FP0C,K03FCg078N07E,K03FFCY01CM07FE,K031FFCY0EL07FFE,K0301FF8X07K03FF0E,K03001FFX03CI01FF80E,K03I01FCW01EI0FF800E,K03J03F8W0F003FCI0E,K03K0FEW0381FEJ0E,K03K01F8FCQ04001C7FK0E,K038K07IF7FO06I0FF8K0E,K038K01F87FFCN03I07CL0E,K038L0E03C1EN0180038K01E,K038L0E01807FN0E001CK01E,K03CL0E01007FCM07001CK01C,K03CL0EJ031EM03801CK01C,K03CL0EL07M01C01CK03C,K01EL06L03N0E01CK03C,K01EL07L038I03I07038K078,K01FL03FCJ018I018003FFL078,L0FL01FCJ018J0C001FEL0F8,L0F8L07CJ03FJ0E001F8K01F8,L0FCM0EJ03FCI070018L01F,L07CM06J031EI038038L03F,L07EM078K07I01C038L07E,L03FM03EEJ031800E0FM07E,L03F8L01FEJ038C007FEM0FC,L01FCM07FJ0187007FCL01FC,L01FEN07J0183803FM03F8,M0FFN03C700181C07N07F,M07F8M01FF00380E0FN0FF,M03FCN07F003007BEM03FE,M03FEO03807807FCM07FC,M01FF8N01C0FE0FFN0FF8,N0FFCO0KFEN03FF8,N07FFO07F87F8N07FF,N03FF8N01EQ01FFE,N01FFEgG03FFC,O0IF8g0IF8,O07FFEY03FFE,O03IF8W01IFC,P0IFEW07IF8,P07IFCU03IFE,P01JF8S01JFC,Q0KF8R0KF,Q03KF8P0KFE,R0LFCM01LF8,R03MFCI03MFE,S0YF,S01WFC,T07UFE,U0UF,V0SF8,W0QF,X03MFE,gG0IF8,,:::::::::::::::::::::::::::::::::::::::::^FS',

      '^FO30,380^GB750,2,2^FS',
      '^FO30,400^A0N,40,40^FDEtiqueta/UN^FS',
      `^FO600,400^A0N,40,40^FDCaixa: ${caixa.id}^FS`,
      '^FO30,450^GB750,2,2^FS'
    ];

    // agora renderiza cada SKU/qtde na sequência
    let y = 480;
    const step = 50;
    Object.entries(caixa.itens).forEach(([sku, qtd]) => {
      linhas.push(`^FO25,${y}^A0N,30,30^FD ${sku} / ${qtd}^FS`);
      y += step;
    });

    linhas.push('^XZ');

    const zpl = linhas.join('\n');
    console.log(zpl)
    imprimirNaImpressoraDeRede(zpl);
  }



  function fecharCaixaAtiva() {
    if (caixaAtivaIndex === -1 || caixas[caixaAtivaIndex].fechada) {
      return;
    }

    const caixa = caixas[caixaAtivaIndex];
    const caixaEl = caixa.element;
    const totalItens = Object.values(caixa.itens).reduce((sum, count) => sum + count, 0);

    if (totalItens === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Ação Inválida',
        text: 'Você não pode fechar uma caixa vazia.'
      });
      return;
    }

    // 1) marca a caixa como fechada no front
    caixa.fechada = true;
    caixaEl.classList.remove('caixa-aberta');
    caixaEl.classList.add('caixa-fechada');

    // 2) atualiza o header com número e total de itens
    const header = caixaEl.querySelector('.card-header');
    header.textContent = `Caixa ${caixa.id} - (${totalItens} ${totalItens > 1 ? 'itens' : 'item'})`;

    // 3) registra o timestamp de término
    caixa.endTime = new Date();

    // 4) “desativa” a caixa atual antes de gerar a etiqueta
    caixaAtivaIndex = -1;

    // 5) gera uma ZPL só para esta caixa (use o startTime que você já setou em abrirNovaCaixa)

    // 6) atualiza botões (“Nova Caixa” / “Finalizar”) conforme o estado
    atualizarPainelEsquerdo();
  }


  async function adicionarItemNaCaixa(etiqueta) {
    if (caixaAtivaIndex === -1 || caixas[caixaAtivaIndex].fechada) {
      Swal.fire("Atenção", "Nenhuma caixa aberta. Crie uma nova caixa antes.", "warning");
      throw new Error("Nenhuma caixa aberta.");
    }

    const caixa = caixas[caixaAtivaIndex];

    // ==== 1) se ainda não persistiu a caixa, cria agora no servidor ====
    if (!caixa.persisted) {
      try {
        const resp = await fetch("/api/embalar/caixa", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id_agend_ml: idAgendMl })
        });
        if (!resp.ok) throw new Error("Falha ao criar caixa");
        const { caixa_num } = await resp.json();
        caixa.id = caixa_num;
        caixa.persisted = true;
        // atualiza o header do card
        caixa.element.querySelector('.card-header').textContent = `Caixa ${caixa.id}`;
      } catch (err) {
        console.error(err);
        Swal.fire("Erro", "Não foi possível criar a caixa no servidor.", "error");
        return;
      }
    }

    // ==== 2) agora sim adiciona o item no front e no back ====
    caixa.itens[etiqueta] = (caixa.itens[etiqueta] || 0) + 1;

    const ul = caixa.element.querySelector('ul');
    let li = ul.querySelector(`li[data-etiqueta="${etiqueta}"]`);
    if (!li) {
      li = document.createElement('li');
      li.dataset.etiqueta = etiqueta;
      li.className = 'd-flex justify-content-between p-1';
      ul.appendChild(li);
    }
    li.innerHTML = `
    <span>${etiqueta}</span>
    <span class="fw-bold">Unidades: ${caixa.itens[etiqueta]}</span>
  `;
    li.classList.add('item-caixa-novo');
    setTimeout(() => li.classList.remove('item-caixa-novo'), 700);

    // ==== 3) persiste o item no servidor ====
    try {
      await fetch("/api/embalar/caixa/item", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id_agend_ml: idAgendMl,
          caixa_num: caixa.id,
          sku: etiqueta
        })
      });
    } catch (err) {
      console.error("Erro ao salvar item na caixa:", err);
    }
  }

  async function biparEmbalagem(idProdMl) { // ALTERADO: Recebe o id_ml único
    try {
      const response = await fetch("/api/embalar/bipar", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        // ALTERADO: Envia o id_prod_ml para o backend
        body: JSON.stringify({ id_agend_ml: idAgendMl, id_prod_ml: idProdMl }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Erro na API: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Falha ao registrar bipagem:", error);
      Swal.fire("Erro", `Não foi possível registrar a bipagem: ${error.message}`, "error");
      throw error;
    }
  }

  async function iniciarEmbalagem(idProdMl) {
    try {
      const response = await fetch("/api/embalar/iniciar", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id_agend_ml: idAgendMl, id_prod_ml: idProdMl }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Falha ao iniciar embalagem no servidor");
      }
      return await response.json();
    } catch (error) {
      console.error("Erro ao iniciar embalagem:", error);
      Swal.fire("Erro", "Não foi possível registrar o início da embalagem no banco de dados.", "error");
      throw error; // Lança o erro para que a função que chamou saiba que falhou
    }
  }

  function atualizarStatusProduto(idMlParaAtualizar, bipadosAtuais) {
    const produtoData = produtos.find(p => p.id_ml === idMlParaAtualizar);
    if (!produtoData) return;

    const itemLi = listaPrincipalEl.querySelector(`li[data-id-ml="${idMlParaAtualizar}"]`);
    if (!itemLi) return;

    const totalNec = produtoData.unidades;
    const bipadosCapped = Math.min(bipadosAtuais, totalNec);

    // --- INÍCIO DA CORREÇÃO ---
    // A propriedade 'bipados' no objeto em memória só é definida aqui.
    // Se for 0, significa que acabamos de validar o SKU.
    if (produtoData.bipados === undefined && bipadosCapped === 0) {
      produtoData.bipados = 0; // Define como 0 para marcar como "iniciado"
    } else {
      produtoData.bipados = bipadosCapped;
    }

    const skuSpan = itemLi.querySelector(".sku");
    const unidadesSpan = itemLi.querySelector(".unidades");

    // Condição corrigida: troca para etiqueta assim que o produto é iniciado (bipados >= 0)
    if (typeof produtoData.bipados === "number") {
      itemLi.dataset.sku = produtoData.id_ml; // Muda o SKU do item para a etiqueta
      skuSpan.textContent = produtoData.id_ml;
      skuSpan.classList.add("etiqueta");
    }

    unidadesSpan.textContent = `Bipados: ${produtoData.bipados}/${totalNec}`;
    // --- FIM DA CORREÇÃO ---

    if (produtoData.bipados >= totalNec) {
      itemLi.classList.add("produto-concluido");
      if (!itemLi.querySelector("i.bi-check-circle-fill")) {
        itemLi.querySelector(".produto-info").insertAdjacentHTML("afterbegin", '<i class="bi bi-check-circle-fill me-2"></i>');
      }
    } else {
      itemLi.classList.remove("produto-concluido");
      itemLi.querySelector("i.bi-check-circle-fill")?.remove();
    }

    atualizarContadorFinalizados();
    atualizarPainelEsquerdo();
  }

  // VERSÃO CORRIGIDA
  function atualizarContadorFinalizados() {
    const contagem = listaPrincipalEl.querySelectorAll(".produto-concluido").length;
    if (contadorFinalizadosEl) {
      contadorFinalizadosEl.innerHTML = `<strong>✅ Finalizados:</strong> ${contagem}`;
    }
    // A chamada para atualizarPainelEsquerdo() foi removida daqui.
  }

  inputSku.addEventListener("keydown", async (e) => {
    if (e.key !== "Enter") return;
    e.preventDefault();

    const valor = inputSku.value.trim();
    if (!valor) return;

    console.clear();
    console.log(`--- BIP REGISTRADO: "${valor}" ---`);

    // ETAPA 1: Checa se o valor é uma ETIQUETA de um produto já iniciado.
    const produtoPorEtiqueta = produtos.find(p => p.id_ml === valor);
    if (produtoPorEtiqueta) {
      console.log("LOG: O valor é uma ETIQUETA de um produto conhecido.", produtoPorEtiqueta);
      inputSku.value = ""; // Limpa o campo

      if (produtoPorEtiqueta.bipados >= produtoPorEtiqueta.unidades) {
        console.log("LOG: Produto já finalizado.");
        Swal.fire({ icon: "info", title: "Anúncio já finalizado!", timer: 2000, showConfirmButton: false });
        return;
      }

      if (produtoPorEtiqueta.bipados >= 0) {
        console.log("LOG: Bipando +1 unidade para a etiqueta.");
        try {
          await adicionarItemNaCaixa(valor);
          const resp = await biparEmbalagem(produtoPorEtiqueta.id_ml);
          atualizarStatusProduto(resp.id_prod_ml, resp.bipados);
        } catch (err) { console.warn(err.message); }
      } else {
        Swal.fire({ icon: "warning", title: "Ação Inválida", text: "Bipe o SKU do produto para iniciar a embalagem dele primeiro." });
      }
      return;
    }

    // ETAPA 2: Se não for etiqueta, busca por SKU/GTIN em produtos PENDENTES.
    console.log("LOG: O valor não é uma etiqueta em andamento. Procurando por SKUs pendentes...");
    const candidatos = produtos.filter(prod => {
      if (prod.bipados !== undefined) {
        return false; // Ignora produtos já iniciados
      }
      if (prod.sku === valor || prod.gtin === valor) return true;
      return prod.composicoes.some(item => item.sku === valor || item.gtin === valor);
    });

    console.log(`LOG: Encontrados ${candidatos.length} candidatos pendentes.`, candidatos);
    inputSku.value = "";

    // ETAPA 3: Decide o que fazer com os candidatos.
    if (candidatos.length === 0) {
      console.log("LOG: Nenhum candidato encontrado. Fim do fluxo.");
      Swal.fire("Não Encontrado", `Nenhum anúncio PENDENTE foi encontrado para o código: "${valor}"`, "warning");
      return;
    }

    if (candidatos.length === 1) {
      console.log("LOG: Encontrado 1 candidato. Abrindo modal de confirmação diretamente.");
      abrirModalConfirmacao(candidatos[0]);
      return;
    }

    // Se encontrou mais de um, mostra o modal de seleção.
    console.log("LOG: Encontrados múltiplos candidatos. Abrindo modal de seleção.");
    bodySelecione.innerHTML = candidatos.map(prod => {
      const imgUrl = prod.imagemUrl || placeholderImage;
      return `<div class="card mb-3" data-sku="${prod.sku}" data-id-ml="${prod.id_ml}" style="cursor: pointer;">
                    <div class="row g-0">
                        <div class="col-3 d-flex align-items-center justify-content-center p-2">
                            <img src="${imgUrl}" class="img-fluid rounded-start" alt="${prod.nome}">
                        </div>
                        <div class="col-9">
                            <div class="card-body">
                                <h6 class="card-title">Anúncio: ${prod.nome}</h6>
                                <p class="card-text mb-1"><strong>Etiqueta:</strong> ${prod.id_ml}</p>
                                <p class="card-text mb-1"><strong>Qtd Etiquetas:</strong> ${prod.unidades}</p>
                                <p class="card-text mb-0"><strong>Tipo:</strong> ${prod.is_kit ? "Kit" : "Simples"}</p>
                            </div>
                        </div>
                    </div>
                </div>`;
    }).join("");
    modalSelecione.show();
  });



  // ===================================================================
  // FUNÇÕES ORIGINAIS
  // ===================================================================

  function inicializarPopoversDeImagem() {
    const todosOsIconesInfo = document.querySelectorAll("#lista-anuncios .bi-info-circle");
    todosOsIconesInfo.forEach((icon) => {
      const itemLi = icon.closest(".produto-item");
      if (!itemLi) return;
      const sku = itemLi.dataset.sku;
      const produto = produtos.find((p) => p.sku === sku);
      if (!produto) return;
      const imagemUrl = produto.imagemUrl || placeholderImage;
      const popoverContent = `<img src="${imagemUrl}" class="img-fluid rounded" style="max-width: 150px;">`;
      new bootstrap.Popover(icon, { html: true, trigger: "hover", placement: "left", content: popoverContent, container: "body", customClass: "produto-popover" });
    });
  }

  bodySelecione.addEventListener("click", (e) => {
    const card = e.target.closest(".card[data-id-ml]");
    if (!card) return;

    const idMl = card.dataset.idMl;
    const prod = produtos.find((p) => p.id_ml === idMl);

    if (prod) {
      abrirModalConfirmacao(prod);
    } else {
      console.error("Produto não encontrado para o id_ml clicado:", idMl);
      modalSelecione.hide();
    }
  });

  bodyConfirme.addEventListener("keydown", (e) => {
    if (e.key !== "Enter" || e.target.id !== "sku-confirmacao-unico") return;
    e.preventDefault();
    const inputUnico = e.target;
    const valorDigitado = inputUnico.value.trim();
    if (!valorDigitado) return;
    const itemLi = Array.from(bodyConfirme.querySelectorAll('.componente-item')).find(li => {
      const okSku = li.dataset.skuEsperado === valorDigitado;
      const okGtin = li.dataset.gtinEsperado === valorDigitado;
      const ainda = +li.dataset.bipado < +li.dataset.requerido;
      return (okSku || okGtin) && ainda;
    });
    if (itemLi) {
      let contagemBipada = parseInt(itemLi.dataset.bipado) + 1;
      const contagemRequerida = parseInt(itemLi.dataset.requerido);
      itemLi.dataset.bipado = contagemBipada;
      const contadorSpan = itemLi.querySelector(".contador-bipagem");
      contadorSpan.textContent = `(${contagemBipada}/${contagemRequerida})`;

      itemLi.classList.remove('status-pendente');
      if (contagemBipada < contagemRequerida) {
        itemLi.classList.add('status-progresso');
      } else {
        itemLi.classList.add('status-concluido');
      }

      if (!bodyConfirme.querySelector(".componente-item:not(.status-concluido)")) {
        inputUnico.disabled = true;
        inputUnico.placeholder = "Todos os itens foram conferidos!";
        btnConfirmar.focus();
      }
    } else {
      Swal.fire({ icon: "error", title: "SKU Inválido!", timer: 2000, showConfirmButton: false });
      inputUnico.classList.add("animate__animated", "animate__shakeX");
      setTimeout(() => { inputUnico.classList.remove("animate__animated", "animate__shakeX"); }, 800);
    }
    inputUnico.value = "";
  });

  btnConfirmar.addEventListener("click", async () => {
    const itemPendente = bodyConfirme.querySelector(".componente-item:not(.status-concluido)");
    if (itemPendente) {
      Swal.fire("Atenção!", "Ainda existem itens pendentes na lista.", "warning");
      return;
    }
    const idMlConferido = bodyConfirme.dataset.idMlConferindo;
    if (!idMlConferido) {
      console.error("Erro Crítico: idMlConferindo não foi encontrado no dataset do modal.");
      return;
    }
    modalConfirme.hide();
    const produtoParaEtiqueta = produtos.find(p => p.id_ml === idMlConferido);
    if (produtoParaEtiqueta) {
      gerarEtiqueta(produtoParaEtiqueta.sku);
    }
    try {
      await iniciarEmbalagem(idMlConferido);
      atualizarStatusProduto(idMlConferido, 0);
    } catch (error) {
      console.error("Não foi possível iniciar o produto, a UI não será alterada.");
    }
  });

  async function buscarDadosEmbalagem() {
    if (!idAgendMl) return;
    try {
      const response = await fetch(`/api/embalar/bipados/${idAgendMl}`);
      if (!response.ok) {
        console.warn(`Sincronização falhou: ${response.statusText}`);
        return;
      }
      const data = await response.json();

      // ALTERADO: A API agora retorna {id_prod_ml, bipados}, usamos isso.
      data.forEach(item => {
        atualizarStatusProduto(item.id_prod_ml, item.bipados);
      });
    } catch (error) {
      console.error("Erro ao sincronizar dados de embalagem:", error);
    }
  }

  function gerarEtiqueta(sku) {
    const anuncio = produtos.find((p) => p.sku === sku);
    if (!anuncio) return;

    // POSIÇÕES FIXAS
    const xColunaEsquerda = 15;    // ^FO15,15
    const xColunaDireita = 350;   // ^FO350,15

    // OFFSETS PARA TEXTO DO CÓDIGO DE BARRAS
    const textoOffEsq = 95 - xColunaEsquerda; // 80
    const textoOffDir = 420 - xColunaDireita;  // 70

    // POSIÇÕES (X/Y) PARA NOME E SKU
    const nomeXLeft = 15;   // ^FO15,110
    const skuXLeft = 15;   // ^FO15,175
    const nomeXRight = 350;  // ^FO350,110
    const skuXRight = 350;  // ^FO350,175
    const nomeY = 110;
    const skuY = 175;

    // LARGURA DO BLOCO DE TEXTO
    const nomeWidth = 280;  // ^FB280,...

    let etiquetasGeradas = 0;
    const linhasNecessarias = Math.ceil(anuncio.unidades / 2);
    const zplAndamento = [];

    for (let linha = 0; linha < linhasNecessarias; linha++) {
      zplAndamento.push("^XA^CI28");
      zplAndamento.push("^LH0,0");

      // Coluna esquerda
      if (etiquetasGeradas < anuncio.unidades) {
        zplAndamento.push(
          `^FO${xColunaEsquerda},15^BY2,,0^BCN,54,N,N^FD${anuncio.id_ml}^FS`
        );
        zplAndamento.push(
          `^FO${xColunaEsquerda + textoOffEsq},80^A0N,20,25^FH^FD${anuncio.id_ml}^FS`
        );
        zplAndamento.push(
          `^FO${nomeXLeft},${nomeY}^A0N,18,18^FB${nomeWidth},3,2,L^FH^FD${anuncio.nome}^FS`
        );
        zplAndamento.push(
          `^FO${skuXLeft},${skuY}^A0N,18,18^FH^FDSKU: ${anuncio.sku}^FS`
        );
        etiquetasGeradas++;
      }

      // Coluna direita
      if (etiquetasGeradas < anuncio.unidades) {
        zplAndamento.push(
          `^FO${xColunaDireita},15^BY2,,0^BCN,54,N,N^FD${anuncio.id_ml}^FS`
        );
        zplAndamento.push(
          `^FO${xColunaDireita + textoOffDir},80^A0N,20,25^FH^FD${anuncio.id_ml}^FS`
        );
        zplAndamento.push(
          `^FO${nomeXRight},${nomeY}^A0N,18,18^FB${nomeWidth},3,2,L^FH^FD${anuncio.nome}^FS`
        );
        zplAndamento.push(
          `^FO${skuXRight},${skuY}^A0N,18,18^FH^FDSKU: ${anuncio.sku}^FS`
        );
        etiquetasGeradas++;
      }

      zplAndamento.push("^XZ");
    }

    const zpl = zplAndamento.join("\n");
    console.log(zpl);
    printViaBrowserPrint(zpl);
  }






  // Inicialização
  inicializarPopoversDeImagem();
  await carregarCaixasSalvas();
  await buscarDadosEmbalagem(); // Busca inicial
  setInterval(buscarDadosEmbalagem, 1000);



  async function handleFinalizarEmbalagem(event) {
    event.preventDefault();

    const headerBar = document.querySelector('.header-bar');
    const idAgendamento = headerBar.dataset.idBd; // Pega o ID do agendamento do header da página

    // Pede confirmação ao usuário
    const result = await Swal.fire({
      title: 'Finalizar Embalagem?',
      text: "O relatório será gerado e o pedido movido para a Expedição. Deseja continuar?",
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Sim, finalizar!',
      cancelButtonText: 'Cancelar'
    });

    if (!result.isConfirmed) {
      return;
    }

    // **1) Gera uma etiqueta ZPL para cada caixa já fechada**
    //    (supondo que cada objeto em `caixas` tenha `startTime` e `endTime` definidos)
    caixas
      .filter(cx => cx.fechada && cx.startTime && cx.endTime)
      .forEach(cx => gerarEtiquetaCaixa(cx));

    // 2) Mostra o loading
    Swal.fire({
      title: 'Processando...',
      text: 'Gerando relatório e atualizando o status.',
      allowOutsideClick: false,
      didOpen: () => Swal.showLoading()
    });

    // 3) Envia para o backend finalizar o agendamento
    try {
      const response = await fetch(`/expedicao/finalizar/${idAgendamento}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await response.json();
      if (response.ok && data.success) {
        await Swal.fire({
          icon: 'success',
          title: 'Sucesso!',
          text: data.message,
          timer: 2000,
          timerProgressBar: true,
        });
        window.location.href = '/agendamentos/ver?atualizado=ok';
      } else {
        throw new Error(data.message || 'Ocorreu um erro no servidor.');
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: `Falha ao finalizar a embalagem: ${error.message}`,
      });
    }
  }
  // Sincroniza a cada 1 segundos
}
);
│  ├─ erro/
│  │  ├─ erro.css
.erro-container {
    height: 80vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    background-color: #fff;
}

.erro-titulo {
    text-shadow: -5px 5px 0px #0E2C76;
    font-size: 10rem;
    font-weight: bold;
    color: #fbbf24;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.erro-mensagem {
    font-size: 1.8rem;
    color: #0d2d75;
    font-weight: 700;
}

#err-title {
    color: black;

}

#err-msg-pri {
    font-weight: bold;
}

#err-msg-sec {
    font-weight: bold;
}

#err-code {
    font-weight: 400;
}
│  │  └─ erro.js
│  ├─ expedicao/
│  │  ├─ expedicao.css
/* static/expedicao/expedicao.css */

body {
    background-color: #e9f1fb;
}

.header-bar {
    background-color: #007bff;
    color: white;
    padding: 10px;
    font-weight: bold;
    border-radius: 4px 4px 0 0;
    margin-bottom: 10px;
}

/* Estilos para os novos cards de caixa */
.caixa-card .card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
}

.caixa-card .card-body {
    padding: 1rem;
}

.caixa-card .info-item .badge {
    width: 100%;
    padding: 0.5rem;
    text-align: center;
}

.caixa-card .card-footer {
    padding: 0.5rem 1rem;
    background-color: #fff;
}

.card-icon {
    opacity: 0.7;
}

.modal-body .list-group-item {
    padding-top: 1rem;
    padding-bottom: 1rem;
}
│  │  └─ expedicao.js
// static/expedicao/expedicao.js

document.addEventListener("DOMContentLoaded", function () {
    const botoesVisualizar = document.querySelectorAll('.js-visualizar-itens');

    botoesVisualizar.forEach(botao => {
        botao.addEventListener('click', function () {
            const dadosDaCaixa = JSON.parse(this.getAttribute('data-caixa'));
            abrirModalDetalhes(dadosDaCaixa);
        });
    });

    /**
     * CORRIGIDO: Busca um produto na lista pelo seu ID_ML (Etiqueta), não pelo SKU.
     * @param {string} idMl - A Etiqueta (id_ml) a ser procurada.
     * @param {Array} listaProdutos - A lista de todos os objetos de produto do agendamento.
     * @returns {object|null} - O objeto do produto encontrado ou nulo.
     */
    function getProdutoCompletoPorIdMl(idMl, listaProdutos) {
        // A condição foi trocada de p.sku === sku para p.id_ml === idMl
        return listaProdutos.find(p => p.id_ml === idMl) || null;
    }

    /**
     * Preenche e exibe o modal com os detalhes dos itens de uma caixa específica.
     */
    function abrirModalDetalhes(caixa) {
        const modalEl = document.getElementById('modalDetalhesCaixa');
        if (!modalEl) {
            console.error('Elemento do modal não encontrado!');
            return;
        }
        const modal = new bootstrap.Modal(modalEl);

        const dataContainer = document.getElementById('js-data-produtos');
        const placeholderContainer = document.getElementById('js-data-placeholder');
        const todosOsProdutos = JSON.parse(dataContainer.getAttribute('data-produtos'));
        const placeholderUrl = placeholderContainer.getAttribute('data-url');

        const modalTitle = modalEl.querySelector('.modal-title');
        const modalBody = modalEl.querySelector('.modal-body');

        modalTitle.textContent = `Itens da Caixa #${caixa.caixa_num}`;

        let bodyHtml = '<p class="text-muted text-center">Nenhum item encontrado nesta caixa.</p>';

        if (caixa.itens && caixa.itens.length > 0) {
            bodyHtml = '<ul class="list-group list-group-flush">';
            caixa.itens.forEach(item => {
                // --- CORREÇÃO PRINCIPAL AQUI ---
                // O 'item.sku' que vem da caixa é, na verdade, a etiqueta (id_ml).
                // Usamos a função corrigida para buscar o produto correspondente.
                const produtoInfo = getProdutoCompletoPorIdMl(item.sku, todosOsProdutos);

                const tituloProduto = produtoInfo ? produtoInfo.id_ml : 'Etiqueta não encontrada';
                // Agora que temos o 'produtoInfo' correto, podemos pegar seu SKU verdadeiro.
                const skuProduto = produtoInfo ? produtoInfo.sku : 'SKU não encontrado';
                const gtinProduto = produtoInfo ? produtoInfo.gtin : 'Não informado';
                const imagemUrl = produtoInfo && produtoInfo.imagem_url ? produtoInfo.imagem_url : placeholderUrl;

                bodyHtml += `
                    <li class="list-group-item d-flex justify-content-between align-items-center px-1">
                        <img src="${imagemUrl}" alt="Imagem do Produto" class="img-thumbnail me-3" style="width: 65px; height: 65px; object-fit: contain;">
                        
                        <div class="flex-grow-1">
                            <div class="text-muted d-block fw-bold">Etiqueta: ${tituloProduto}</div>
                            <small class="text-muted d-block">SKU: ${skuProduto}</small>
                            <small class="text-muted d-block">GTIN: ${gtinProduto}</small>
                        </div>
                        
                        <span class="badge bg-primary rounded-pill fs-5 ms-3">${item.quantidade}</span>
                    </li>`;
            });
            bodyHtml += '</ul>';
        }

        modalBody.innerHTML = bodyHtml;
        modal.show();
    }
});
│  ├─ homepage/
│  │  ├─ homepage.css
body{
    background-color: white;
}
│  │  └─ homepage.js
│  ├─ imprimir_composicoes/
│  │  ├─ imprimir_composicoes.css
body {
    font-weight: 500;
}

/* --- Card Wrapper --- */
.card {
    border: none;
    border-radius: 0.5rem;
}

.card-body {
    padding: 0;
}

/* --- Estilos gerais de tabela --- */
.table {
    font-size: 0.95rem;
    margin-bottom: 0;
}

.table-hover tbody tr:hover {
    background-color: #f1f5f9;
}

/* --- Wrapper responsivo com cantos arredondados --- */
.table-responsive {
    overflow: hidden;
    border-radius: 0.5rem;
}

.table-responsive table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
}

/* --- Cabeçalho azul + branco --- */
.table thead {
    background-color: #007bff;
}

.table thead th {
    color: #fff;
    border: none;
    font-weight: 600;
    padding: 0.75rem 1rem;
}

/* --- Arredonda só o topo do thead --- */
.table thead th:first-child {
    border-top-left-radius: 0.5rem;
}

.table thead th:last-child {
    border-top-right-radius: 0.5rem;
}

/* --- Listras “zebra” e células --- */
.table tbody tr:nth-child(even) {
    background-color: #fbfcfd;
}

.table td,
.table th {
    padding: 0.75rem 1rem;
    vertical-align: middle;
}

/* Melhorias visuais do dropdown */
.dropdown-menu {
    min-width: 200px;
    font-size: 0.95rem;
}

.dropdown-menu .dropdown-item {
    padding: 0.6rem 1rem;
    transition: background 0.2s ease;
}

.dropdown-menu .dropdown-item:hover {
    background-color: #f1f5f9;
}

input[type="number"] {
    width: 70px;
    padding: 4px 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 6px;
    text-align: center;
    font-weight: bold;
    color: #333;
    background-color: #f9f9f9;
    transition: border-color 0.3s, box-shadow 0.3s;
}

input[type="number"]:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    outline: none;
    background-color: #fff;
}


/* --- Responsividade para telas pequenas --- */
@media screen and (max-width: 1024px) {
    .table thead {
        display: none;
    }

    .table tbody,
    .table tr,
    .table td {
        display: block;
        width: 100%;
    }

    .table tr {
        margin-bottom: 1rem;
        background: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        padding: 0.75rem;
    }

    .table td {
        padding: 1.5rem 1rem 0.5rem 1rem;
        border: none;
        text-align: left;
        position: relative;
    }

    .table td::before {
        content: attr(data-label);
        position: absolute;
        left: 1rem;
        top: 0.5rem;
        font-weight: bold;
        color: #6c757d;
        font-size: 0.85rem;
        display: block;
        width: 100%;
        margin-bottom: 0.25rem;
        color: #0D6EFD;
    }
}

.input-wrapper {
    display: inline-block;
    position: relative;
    max-width: 100%;
}

.input-wrapper input[type="number"] {
    width: auto;
    min-width: 60px;
    max-width: 100px;
    box-sizing: content-box;
}

.input-wrapper .input-mirror {
    position: absolute;
    top: 0;
    left: 0;
    visibility: hidden;
    white-space: pre;
    font-weight: bold;
    font-family: inherit;
    font-size: inherit;
    padding: 4px 8px;
}

.table thead th {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: #007bff;
    /* Mesma cor do seu cabeçalho */
}

@media print {
    body * {
        visibility: hidden;
    }

    #container-table,
    #container-table * {
        visibility: visible;
    }

    #container-table {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        overflow: visible !important;
        max-height: none !important;
    }

    .table-responsive {
        overflow: visible !important;
        max-height: none !important;
    }

    input[type="number"] {
        border: none !important;
        background: transparent !important;
        font-weight: normal;
        width: auto !important;
    }

    .input-wrapper .input-mirror {
        display: none !important;
    }
}

/* Esconde o cabeçalho de impressão na tela normal */
.print-header {
    display: none;
}

.print-position {
    text-align: center;
}

/* Estiliza o cabeçalho apenas na impressão */
@media print {
    .print-header {
        display: block;
        text-align: center;
        margin-bottom: 2rem;
    }

    .print-logo {
        max-width: 150px;
        margin-bottom: 1rem;
    }

    .print-title {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .print-meta {
        font-size: 0.9rem;
        margin-top: -1rem;
        margin-bottom: 2rem;
        color: #444;
    }

    .print-meta span {
        font-weight: bold;
    }

    .print-font {
        font-size: 12px;
    }
}
│  │  └─ imprimir_composicoes.js
async function getTinyData(ele) {
    const idTiny = ele[1]?.getAttribute("id_tiny");
    if (!idTiny) {
        console.error("id_tiny não encontrado");
        return;
    }

    const { protocol, hostname, port } = window.location;
    const baseUrl = `${protocol}//${hostname}${port ? `:${port}` : ""}`;

    try {
        const response = await retryFetch(
            `${baseUrl}/dados-estoque/${idTiny}`,
            { mode: "cors" },
            2,
            4000
        );
        const data = await response.json();
        console.log(data);
        replaceTableData(ele, data);
    } catch (error) {
        console.error("Falha ao buscar dados Tiny:", error);
    }
}

async function retryFetch(
    url,
    options = {},
    retries = 5,
    delay = 5000
) {
    try {
        const response = await fetch(url, options);
        if (!response.ok) {
            if (retries > 0) {
                await new Promise((res) => setTimeout(res, delay));
                return retryFetch(url, options, retries - 1, delay);
            }
            throw new Error(`Status ${response.status}`);
        }
        return response;
    } catch (error) {
        if (retries > 0) {
            await new Promise((res) => setTimeout(res, delay));
            return retryFetch(url, options, retries - 1, delay);
        }
        throw error;
    }
}

function replaceTableData(ele, json) {
    const depositos = json.depositos;
    depositos.forEach((x) => {
        if (x.id === 785301556) ele[4].innerText = x.disponivel;
        else if (x.id === 894837591) ele[5].innerText = x.disponivel;
        else if (x.id === 894837619) ele[6].innerText = x.disponivel;
    });
}

// dispara para cada linha (pulando o cabeçalho)
Array.from($('tr')).slice(1).forEach((tr) => {
    getTinyData($(tr).children());
});

function autoResizeInput(input) {
    const mirror = input.nextElementSibling;
    mirror.textContent = input.value || "0";
    input.style.width = mirror.offsetWidth + "px";
}

window.addEventListener("load", () => {
    document
        .querySelectorAll(".input-wrapper input[type='number']")
        .forEach(autoResizeInput);

    const hoje = new Date();
    const dataFormatada =
        hoje.toLocaleDateString("pt-BR") +
        " " +
        hoje.toLocaleTimeString("pt-BR");
    const spanData = document.getElementById("data-hoje");
    if (spanData) spanData.innerText = dataFormatada;
});

// mapeamento original → curto
const HEADER_MAP = {
    'Localização': 'Loc',
    'Inferior': 'Inf',
    'Mezanino': 'Mez',
    'Caixa': 'Cx'
};

let originalHeaders = [];

// pega todos os TH do cabeçalho
const ths = Array.from(document.querySelectorAll('thead th'));

// dispara antes do diálogo de print
window.addEventListener('beforeprint', () => {
    originalHeaders = ths.map(th => th.textContent);
    ths.forEach(th => {
        const novo = HEADER_MAP[th.textContent];
        if (novo) th.textContent = novo;
    });
});

// dispara depois que o print é cancelado ou concluído
window.addEventListener('afterprint', () => {
    ths.forEach((th, i) => {
        th.textContent = originalHeaders[i];
    });
});



// async function getTinyData(ele) {
//     let id_tiny_element = ele[1].getAttribute("id_tiny")
//     let protocol = window.location.href.split(':')[0]
//     let url = `${protocol}://${window.location.hostname}:${window.location.port}`
//     console.log(await retryFetch(`${url}/dados-estoque/${id_tiny_element}`, { mode: 'cors' }, 5))
// }

// async function retryFetch(url, options = {}, retries) {
//     setTimeout(() =>
//         fetch(url, options)
//             .then((res) => {
//                 return res
//                 if (res.ok) {
//                     return res
//                 }
//                 if (retries > 0) {
//                     return retryFetch(url, options, retries - 1)
//                 }
//                 throw new Error(res.status)
//             })
//             .catch((error) => console.error(error.message)),
//         500)
// }

// function replaceTableData(ele, json) {
//     let depositos = json["depositos"]
//     let ids_depositos = [785301556, 894837591, 894837619]

//     let reservado = depositos[0]["reservado"]

//     let dep_obj = {
//         "151i": 0,
//         "151m": 0,
//         "177": 0
//     }

//     depositos.forEach((x) => {
//         if (x["id"] == 785301556) { // Depósito 151 Inferior
//             //dep_obj["151i"] = x["disponivel"]
//             ele[4].innerText = x["disponivel"]
//         } else if (x["id"] == 894837591) { // Depósito 151 Mesanino
//             //dep_obj["151m"] = x["disponivel"]
//             ele[5].innerText = x["disponivel"]
//         } else if (x["id"] == 894837619) { // Depósito 177 Cx Fechado
//             //dep_obj["177"] = x["disponivel"]
//             ele[6].innerText = x["disponivel"]
//         }
//     })
// }

// Array.from($('tr')).forEach((x, index) => {
//     if (index > 0) {
//         getTinyData($(x).children())
//     }
// })

// function autoResizeInput(input) {
//     const mirror = input.nextElementSibling;
//     mirror.textContent = input.value || "0";
//     input.style.width = mirror.offsetWidth + "px";
// }

// // Aplica ao carregar a tabela
// window.addEventListener("load", () => {
//     document.querySelectorAll(".input-wrapper input[type='number']").forEach(input => autoResizeInput(input));
// });

// window.addEventListener("load", () => {
//     const hoje = new Date();
//     const dataFormatada = hoje.toLocaleDateString('pt-BR') + ' ' + hoje.toLocaleTimeString('pt-BR');
//     const spanData = document.getElementById("data-hoje");
//     if (spanData) {
//         spanData.innerText = dataFormatada;
//     }
// });

│  ├─ limpeza/
│  │  ├─ limpeza.css
body {
    background-color: #e9f1fb;
}

.display-hidden {
    display: none;
}

a {
    text-decoration: underline;
    color: black;
}

.rotated {
    transform: rotate(180deg);
}

.header-bar {
    background-color: #007bff;
    color: white;
    padding: 10px;
    font-weight: bold;
    border-radius: 4px 4px 0 0;
    margin-bottom: 10px;
}
│  │  └─ limpeza.js
document.addEventListener('DOMContentLoaded', () => {
    const detalhes = document.getElementById('detalhesAgendamento');
    const coll = bootstrap.Collapse.getOrCreateInstance(detalhes, { toggle: false });
    const toggleBtn = document.getElementById('btnToggleDetalhes');
    const icon = toggleBtn.querySelector('i');

    function ajustarCollapse() {
        if (window.innerWidth < 768) {
            coll.hide();
        } else {
            coll.show();
        }
    }

    // **Aqui**: troca o ícone ao abrir
    detalhes.addEventListener('show.bs.collapse', () => {
        icon.classList.replace('bi-chevron-down', 'bi-chevron-up');
        toggleBtn.setAttribute('aria-expanded', 'true');
    });

    // **E aqui** ao fechar
    detalhes.addEventListener('hide.bs.collapse', () => {
        icon.classList.replace('bi-chevron-up', 'bi-chevron-down');
        toggleBtn.setAttribute('aria-expanded', 'false');
    });

    window.addEventListener('resize', ajustarCollapse);
    ajustarCollapse();
});



function getEleToCorrection(ele) {
    let id_prod = parseInt(ele.id.split('btn-corr-')[1]) - 1
    let checked_values_alt = []
    let checked_values_com = []
    let id_agend_bd = parseInt(dados['id_bd'])
    let id_prod_bd = dados['produtos'][parseInt(id_prod)]['id_bd']

    Array.from($('.corr-' + id_prod.toString())).forEach(x => {
        if (x.checked && x.classList.contains('alterar')) {
            checked_values_alt.push(
                dados['produtos'][parseInt(id_prod)]['composicao'][x.id.split('-')[3]]);
        }
    })
    if (checked_values_alt.length == 0) {
        console.log("Nenhum item de composição selecionado!");
    } else {
        console.log(checked_values_alt);
    }

    Array.from($('.corr-' + id_prod.toString())).forEach(x => {
        if (x.checked && x.classList.contains('comprar')) {
            checked_values_com.push(
                dados['produtos'][parseInt(id_prod)]['composicao'][x.id.split('-')[3]]);
        }
    })
    if (checked_values_com.length == 0) {
        console.log("Nenhum item de composição selecionado!");
    } else {
        console.log(checked_values_com);
    }

    post_alterar_data = { 'id_agend': id_agend_bd, 'id_prod': id_prod_bd, 'itens': checked_values_alt }
    post_comprar_data = { 'id_agend': id_agend_bd, 'id_prod': id_prod_bd, 'itens': checked_values_com }

    console.log("Dados para alteração: ")
    console.log(post_alterar_data)
    console.log("Dados para compra: ")
    console.log(post_comprar_data)

    if (post_alterar_data['itens'].lenght > 0) {
        makeFetchForCorrection(post_alterar_data, 'alterar')
    }
    if (post_comprar_data['itens'].length > 0) {
        makeFetchForCorrection(post_comprar_data, 'comprar')
    }
}

function makeFetchForCorrection(post_data, url_path) {
    url = 'https://agendamento.jaupesca.com.br/alteracoes/' + url_path  //TODO - Localização do endereço
    fetch(url, {
        mode: 'cors',
        headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        method: 'POST',
        body: JSON.stringify(post_data)
    }).then((response) => {
        if (response.ok) {
            console.log("Fetch foi feito");
        } else {
            throw Error('Erro');
        }
    }).catch(function (error) {
        console.log(error)
    })
}

function activateBtn(ele) {
    let class_name = Array.from(ele.classList)[1];
    let id = parseInt(class_name.split('corr-')[1]) + 1;
    if (Array.from($('.' + Array.from(ele.classList)[0])).some(x => x.checked)) {
        $('#btn-corr-' + id.toString()).prop('disabled', false);
    } else {
        $('#btn-corr-' + id.toString()).prop('disabled', true);
    }
}

function showTable(ele) {
    $('#table-' + parseInt(ele.id.split('show-more-arrow-')[1])).toggleClass('display-hidden');
    $(ele).toggleClass('rotated')
}

function makeTables() {
    Array.from($('.table-comp')).forEach((ele, index) => {
        ele.innerHTML = `
            <table class="table table-light table-striped">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>SKU</th>
                        <th>ID Tiny</th>
                        <th>GTIN</th>
                        <th>Un./kit</th>
                        <th>Total un.</th>
                        <th>Estoque</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    ${tableBodyData(index)}
                </tbody>
            </table>
        `
    });
}

function tableBodyData(index) {
    let tableBody = '';
    dados['produtos'][index].composicao.forEach((x, index_comp) => {
        console.log(x.nome, x.sku, x.localizacao)
        let ele_class = '';
        if (x.estoque_error_flag == 'green') {
            ele_class = 'success';
        } else if (x.estoque_error_flag == 'yellow') {
            ele_class = 'warning';
        } else {
            ele_class = 'danger';
        }
        tableBody += `
            <tr class='table-${ele_class}'>
                <td><a href="https://erp.tiny.com.br/produtos#edit/${x.id_tiny}" target="_blank">${x.nome}</a></td>
                <td>${x.sku}</td>
                <td>${x.id_tiny}</td>
                <td>${x.gtin}</td>
                <td>${x.unidades_por_kit}</td>
                <td>${x.unidades_totais}</td>
                <td>${x.estoque_tiny}</td>
                <td>
                    <div class="form-check">
                        <input id='enviar-corr-${index}-${index_comp}' class='form-check-input corr-${index} alterar' type='checkbox' onchange='activateBtn(this)'>
                        <label class='form-check-label' for='enviar-corr-${index}-${index_comp}'>Alterar</label>
                    </div>
                    <div class="form-check">
                        <input id='enviar-comp-${index}-${index_comp}' class='form-check-input corr-${index} comprar' type='checkbox' onchange='activateBtn(this)'>
                        <label class='form-check-label' for='enviar-comp-${index}-${index_comp}'>Comprar</label>
                    </div>
                </td>
            </tr>
        `
    })

    return tableBody;
}

makeTables()

function altBtn(x) {
    var win = window.open(`https://erp.tiny.com.br/produtos#edit/${dados['produtos'][x.id.split('btn-alt-')[1] - 1].id_tiny}`)
    if (win) {
        win.focus();
    } else {
        alert('Por favor, habilite popups nesse página!');
    }
    Swal.fire({
        template: "#my-template"
    }).then(alert => {
        if (alert.isConfirmed) {
            console.log('CONFIRMADO');
            console.log(alert);
            window.open(window.origin + `/atualizar?prod_id=${dados['produtos'][x.id.split('btn-alt-')[1] - 1].id_bd}&id=${agend_id}&tipo=${agend_tipo}`, '_self')
        } else if (alert.isDenied) {
            console.log('NEGADO');
            console.log(alert);
        } else if (alert.isDismissed) {
            console.log('CANCELADO');
            console.log(alert);
        }
    }
    )
}
│  ├─ login/
│  │  ├─ login.css
/* esconde a navbar herdada do base_template */
nav {
    display: none !important;
}

/* garante altura total da viewport, fundo claro */
body {
    min-height: 100vh;
    background-color: #f2f7fb;
}

/* cartão centralizado */
.login-card {
    border: none;
    border-radius: 0.5rem;
}

/* avatar circular */
.avatar {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 50%;
    border: 3px solid #2c3e50;
    background-color: #fff;
    padding: 5px;
}

/* .input-group .btn {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
} */
│  │  └─ login.js
const toggle = document.getElementById('togglePassword');
const senha = document.getElementById('senha');

toggle.addEventListener('click', () => {
    // Alterna o type
    const oculto = senha.type === 'password';
    senha.type = oculto ? 'text' : 'password';

    // Alterna o ícone
    const icon = toggle.querySelector('i');
    icon.classList.toggle('bi-eye');
    icon.classList.toggle('bi-eye-slash');
});
│  ├─ novoAgendamento/
│  │  └─ novoAgend.css
.btn-outline-primary {
    background-color: #0d6efd !important;
    border-color: #0d6efd !important;
    color: #fff !important;
    transition: color .2s ease, background-color .2s ease;
}

.btn-outline-primary:hover,
.btn-outline-primary:focus {
    background-color: transparent !important;
    color: #0d6efd !important;
    text-decoration: none;
}
│  ├─ reservados/
│  │  ├─ reservados.css
│  │  └─ reservados.js
│  ├─ resources/
│  │  ├─ logo.png
│  │  ├─ sem_img.png
│  │  ├─ seta_baixo.png
│  │  └─ wallpaper_jaupesca.svg
│  ├─ retiradoEstoque/
│  │  ├─ retiradoEstoque.css
body {
  background-color: #e9f1fb;
}

.titulo-vermelho {
  color: #e63946 !important;
}

.produto-item,
.produto-item-modal {
  background-color: #f8f9fa;
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 6px;
  border-radius: 4px;
  font-size: 0.95rem;
}

.header-bar {
  background-color: #007bff;
  color: white;
  padding: 10px;
  font-weight: bold;
  border-radius: 4px 4px 0 0;
  margin-bottom: 10px;
}

.info-box {
  background-color: #f8f9fa;
  border: 1px solid #ccc;
  padding: 10px;
  border-radius: 4px;
  font-size: 0.9rem;
}

.input-equivalente-off {
  display: none;
}

.toast-container {
  position: fixed;
  inset: auto 16px 16px auto;
  /* bottom-right */
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 10px;
  z-index: 9999;
  pointer-events: none;
  /* só o toast recebe clique */
}

.toast {
  pointer-events: auto;
  background: #fff;
  color: #0f172a;
  border: 1px solid #e5e7eb;
  border-left: 6px solid var(--accent, #3b82f6);
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(2, 6, 23, 0.15);
  padding: 12px 14px;
  max-width: min(420px, calc(100vw - 40px));
  width: fit-content;
  font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
  position: relative;
  overflow: hidden;
}

.toast--info {
  --accent: #3b82f6;
}

/* azul */
.toast--success {
  --accent: #16a34a;
}

/* verde */
.toast--warning {
  --accent: #f59e0b;
}

/* amarelo */
.toast--error {
  --accent: #ef4444;
}

/* vermelho */

.toast__message {
  white-space: pre-wrap;
  /* mantém \n */
  word-wrap: break-word;
}

.toast__close {
  position: absolute;
  top: 6px;
  right: 8px;
  border: 0;
  background: transparent;
  font-size: 16px;
  line-height: 1;
  color: #64748b;
  cursor: pointer;
  padding: 4px;
  border-radius: 6px;
}

.toast__close:hover {
  background: rgba(100, 116, 139, .1);
}

/* barra de progresso reversa (100% -> 0%) */
.toast__progress {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  height: 3px;
  background: var(--accent, #3b82f6);
  transform-origin: left;
  animation: toastShrink var(--dur, 2s) linear forwards;
}

@keyframes toastShrink {
  from {
    transform: scaleX(1);
  }

  to {
    transform: scaleX(0);
  }
}

/* Dark mode automático */
@media (prefers-color-scheme: dark) {
  .toast {
    background: #0b1020;
    color: #e5e7eb;
    border-color: #1f2937;
    box-shadow: 0 10px 30px rgba(0, 0, 0, .35);
  }

  .toast__close {
    color: #94a3b8;
  }

  .toast__close:hover {
    background: rgba(148, 163, 184, .12);
  }
}


/* Base do overlay do modal */
.modal {
  display: none;
  /* começa escondido */
  position: fixed;
  inset: 0;
  /* top/right/bottom/left: 0 */
  background: rgba(0, 0, 0, .5);
  z-index: 10000;
  /* alto para ficar acima de tudo */
  overflow: hidden;
}

/* Caixa do modal */
.modal-content {
  background: #fff;
  color: #000;
  /* garante texto visível */
  margin: 8% auto;
  /* centraliza vertical/horizontal */
  padding: 20px;
  border-radius: 8px;
  width: 90%;
  max-width: 1000px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, .3);
}

.close {
  float: right;
  cursor: pointer;
  font-size: 24px;
}

.close:hover {
  opacity: .7;
}

/* Grid interno do modal: coluna info (esq) + lista (dir) */
.modal-grid {
  display: grid;
  grid-template-columns: 420px 1fr;
  gap: 20px;
}

/* Coluna direita com rolagem vertical quando exceder */
.produtos-scroll {
  max-height: 600px;
  /* mesmo alto do painel esquerdo */
  overflow-y: auto;
  padding-right: 6px;
  /* respiro para não colar na barra */
}

/* Badge simples (se não estiver usando Bootstrap) */
.badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 999px;
  background: #e5e7eb;
  color: #111827;
  font-size: 0.8rem;
  vertical-align: middle;
}

/* Rodapé do modal com botão fixo/visível */
.modal-actions {
  position: sticky;
  bottom: 0px;
  /* compensa o padding do .modal-content */
  margin: 16px -20px -20px;
  /* encosta nas bordas do modal-content */
  padding: 12px 50px;
  background: linear-gradient(#ffffffcc, #ffffff);
  /* leve destaque */
  border-top: 1px solid #e5e7eb;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  align-items: center;
  z-index: 1;
}

/* Botões básicos (se não estiver usando Bootstrap) */
.btn {
  appearance: none;
  border: 1px solid transparent;
  border-radius: 8px;
  padding: 5px 14px;
  font-weight: 600;
  cursor: pointer;
  transition: filter .15s ease, transform .02s ease;
}

.btn:active {
  transform: translateY(1px);
}

.btn-primary {
  background: #0d6efd;
  /* azul */
  color: #fff;
}

.btn-primary:hover {
  filter: brightness(1.05);
}

.btn-outline {
  background: #fff;
  color: #111827;
  border-color: #d1d5db;
}

.btn-outline:hover {
  filter: brightness(0.98);
}

/* Botão de lixeira (ícone vermelho) */
.btn-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 34px;
  height: 34px;
  border-radius: 8px;
  border: 1px solid #fecaca;
  background: #fff;
  color: #ef4444;
  /* vermelho */
  cursor: pointer;
}

.btn-icon:hover {
  background: #fff1f1;
}

/* Garantir posicionamento do botão de lixeira no card */
.produto-item-modal {
  position: relative;
}

/* Container de ações do card (canto superior direito) */
/* .card-actions {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  gap: 6px;
} */

/* Linha de controles do card */
.produto-item-modal .controls {
  display: flex;
  align-items: center;
  gap: 8px;
}

/* Conjunto lixeira + texto, ancorado à direita */
.controls .last-action-wrap {
  display: flex;
  align-items: center;
  gap: 6px;
  /* espaço entre lixeira e texto */
  margin-left: auto;
  /* empurra o grupo para a direita */
  font-size: 0.85rem;
  color: #6b7280;
  min-width: 0;
  /* evita overflow em flex */
}

/* Só o texto pode encolher/expandir, a lixeira mantém tamanho fixo */
.controls .last-action-wrap .status {
  min-width: 0;
  white-space: nowrap;
  /* não quebra em várias linhas */
  text-overflow: ellipsis;
  /* se quiser reticências em casos extremos */
  overflow: hidden;
}

/* Botão de lixeira já está ok; mantendo tua versão */
.controls .btn-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 34px;
  height: 34px;
  border-radius: 8px;
  border: 1px solid #fecaca;
  background: #fff;
  color: #ef4444;
  cursor: pointer;
  transition: background 0.15s ease;
}

.controls .btn-icon:hover {
  background: #fff1f1;
}
│  │  └─ retiradoEstoque.js
const urlParams = new URLSearchParams(window.location.search);
const idAgend = parseInt(urlParams.get('id'), 10);

let inicioTimestamp = null;
let intervaloTempo = null;
let tempoEstimadoSegundos = 0;

const sleep = (ms) => new Promise(res => setTimeout(res, ms));

document.addEventListener('DOMContentLoaded', () => {
  // ─── Collapse responsivo ───────────────────────
  const detalhes = document.getElementById('detalhesRetirada');
  const coll = bootstrap.Collapse.getOrCreateInstance(detalhes, { toggle: false });
  const toggleBtn = document.getElementById('btnToggleRetirada');
  const icon = toggleBtn.querySelector('i');
  function ajustarCollapse() {
    window.innerWidth < 768 ? coll.hide() : coll.show();
  }
  detalhes.addEventListener('show.bs.collapse', () => {
    icon.classList.replace('bi-chevron-down', 'bi-chevron-up');
  });
  detalhes.addEventListener('hide.bs.collapse', () => {
    icon.classList.replace('bi-chevron-up', 'bi-chevron-down');
  });
  window.addEventListener('resize', ajustarCollapse);
  ajustarCollapse();

  // ─── inicia polling e contador ─────────────────────
  carregarProgressoServer();
  iniciarContadorTempo();
  setInterval(carregarProgressoServer, 20000);

  // ─── atalho Enter nos inputs ─────────────────────
  ['skuInput', 'quantidadeInput'].forEach(id =>
    document.getElementById(id)
      .addEventListener('keydown', e => { if (e.key === 'Enter') biparProduto(); })
  );

  // Aqui ele pega as informações que estão no HTML e transforma em variáveis usáveis no JS
  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);
  console.log('>', produtos);

  const empresaId = parseInt(document.getElementById("infoAgend").dataset.empresa, 10);
  const empresaNome =
    empresaId === 1 ? "Jaú Pesca" :
      empresaId === 2 ? "Jaú Fishing" :
        empresaId === 3 ? "L.T. Sports" :
          "Nenhuma";

  const numeroAgendamento = document.getElementById("infoAgend").dataset.agendamento;
  const nomeColaborador = document.getElementById("infoAgend").dataset.colaborador;
  const marketplaceAgendamento = document.getElementById("infoAgend").dataset.marketplace;

  // Testa as variáveis
  console.log('Empresa>', empresaNome);
  console.log('Nº Agendamento>', numeroAgendamento);
  console.log('Colaborador>', nomeColaborador);
  console.log('Marketplace>', marketplaceAgendamento);

  console.log('Produtos>', produtos);

  let obj = [];

  //! ISSO AQUI NÃO PODE SER DELETADO, ELE DETERMINA OS PRODUTOS QUE SERÃO USADOS NA TRANSFERÊNCIA DE ESTOQUE
  //? No caso ele usa TODOS os produtos (por isso só funciona quando o agendamento está finalizado)
  //* Então lembre-se de alterar todo o agendamento antes de finalizar, se não ele vai transferir errado.
  // produtos.forEach(p => {
  //   console.log(p);
  //   const composicoes = p.composicoes;
  //   composicoes.forEach(c => {
  //     console.log(c);
  //     if (c.sku === "JP12324") {
  //       let produto = {
  //         nome: c.nome,
  //         sku: c.sku,
  //         id_tiny: c.id_tiny,
  //         gtin: c.gtin,
  //         unidades_de_kits: c.unidades_de_kits,
  //         unidades_por_kit: c.unidades_por_kit,
  //         unidades_totais: c.unidades_totais
  //       }
  //       obj.push(produto);
  //     }
  //   });
  // });
  // console.log('>', obj);

  const resultado = produtos.filter(p =>
    p.composicoes.some(c => c.sku === "JP12324")
  );

  console.log('Esse aqui é o resultado askdaldkajsdl >', resultado);

  carregarGtinComposicoes();
});

function carregarGtinComposicoes() {
  let composicoes = [];
  let vistos = new Set();


}

// ─── busca estado no servidor e atualiza UI ─────────────────────
async function carregarProgressoServer() {
  try {
    const resp = await fetch(`/api/bipados-total/${idAgend}`);
    if (!resp.ok) throw new Error(resp.statusText);
    const dados = await resp.json();
    console.log('Kelvinhoooo >', dados);
    // const mapa = Object.fromEntries(dados.map(x => [x.sku, x.bipados]));
    const mapa = Object.fromEntries(dados.map(x => [x.sku_original, x.bipados_total]));

    document.querySelectorAll('.produto-item').forEach(item => {
      const bip = mapa[item.dataset.sku] || 0;
      item.dataset.bipados = bip;
      atualizarUI(item, bip);
    });

    atualizarContadores();
    const completos = verificarSeFinalizouTudo();
    // se não estiver tudo concluído, reordena pendentes/concluídos normalmente
    if (!completos) distribuirItens();

  } catch (e) {
    console.error('Falha ao carregar progresso:', e);
  }
}


// ─── atualiza cores, barra e texto de um item ─────────────────────
function atualizarUI(item, bip) {
  const total = +item.dataset.total;
  const barra = item.querySelector('.progress-bar');

  item.querySelector('.bipados').textContent = `Bipados: ${bip}`;
  const pct = total > 0 ? (bip / total) * 100 : 0;
  barra.style.width = `${pct}%`;
  barra.setAttribute('aria-valuenow', bip);
  barra.textContent = `${Math.round(pct)}%`;

  if (bip >= total) {
    item.classList.add('bg-success', 'text-white');
    barra.classList.replace('bg-warning', 'bg-success');
  } else {
    item.classList.remove('bg-success', 'text-white');
    barra.classList.replace('bg-success', 'bg-warning');
  }
}


// ─── separa e ordena pendentes/concluídos ─────────────────────
function distribuirItens() {
  const concl = document.getElementById('concluidosContainer');
  const pend = document.getElementById('pendentesContainer');
  if (!concl || !pend) {
    console.warn('Distribuição: containers não encontrados');
    return;
  }

  // move cada item pro container correto
  document.querySelectorAll('.produto-item').forEach(item => {
    const bip = +item.dataset.bipados;
    const tot = +item.dataset.total;
    if (bip >= tot) concl.appendChild(item);
    else pend.appendChild(item);
  });

  // ordena pendentes (desc por bipados)
  Array.from(pend.querySelectorAll('.produto-item'))
    .sort((a, b) => +b.dataset.bipados - +a.dataset.bipados)
    .forEach(el => pend.appendChild(el));

  // (opcional) ordenar concluidos também, se desejar:
  // Array.from(concl.querySelectorAll('.produto-item'))
  //   .sort((a, b) => +b.dataset.bipados - +a.dataset.bipados)
  //   .forEach(el => concl.appendChild(el));
}


// ─── contador de tempo ─────────────────────
function iniciarContadorTempo() {
  const tempoP = document.getElementById('tempoP');
  const estP = document.getElementById('estimadoP');
  if (estP) {
    const [, h, m, s] = estP.textContent.match(/(\d{2})h (\d{2})m (\d{2})s/);
    tempoEstimadoSegundos = (+h * 3600) + (+m * 60) + (+s);
  }
  inicioTimestamp = Date.now();
  intervaloTempo = setInterval(() => {
    const secDec = Math.floor((Date.now() - inicioTimestamp) / 1000);
    const hh = String(Math.floor(secDec / 3600)).padStart(2, '0');
    const mm = String(Math.floor((secDec % 3600) / 60)).padStart(2, '0');
    const ss = String(secDec % 60).padStart(2, '0');
    tempoP.innerHTML = `<strong>🕒 Tempo:</strong> ${hh}h ${mm}m ${ss}s`;
  }, 1000);
}
function pararContadorTempo() {
  clearInterval(intervaloTempo);
}


// ─── envio de bipagem ─────────────────────
async function biparProduto() {
  const skuEl = document.getElementById('skuInput');
  const qtdEl = document.getElementById('quantidadeInput');

  let sku = (skuEl?.value || '').trim();
  const qtd = Number(qtdEl?.value);

  if (!sku || !Number.isFinite(qtd) || qtd <= 0) return;

  const esc = (s) => (window.CSS && CSS.escape) ? CSS.escape(s) : s;
  const onlyDigits = (v) => String(v ?? '').replace(/\D+/g, '');
  const toNum = (v, def = 0) => {
    const n = Number(v);
    return Number.isFinite(n) ? n : def;
  };

  // 1) Tenta achar o item pelo SKU informado (SKU original no DOM)
  let item = document.querySelector(`.produto-item[data-sku="${esc(sku)}"]`);

  // 2) Se não achou, tenta mapear pelo SKU/GTIN das composições e ajustar para o SKU da composição
  if (!item) {
    const raw = document.getElementById('js-data')?.dataset?.comps || '[]';
    let produtos = [];
    try { produtos = JSON.parse(raw); } catch { }

    let foundComp = null;
    outer:
    for (const produto of produtos) {
      const comps = Array.isArray(produto.composicoes) ? produto.composicoes : [];
      for (const c of comps) {
        if (String(c.sku ?? '').trim() === sku || (c.gtin && onlyDigits(c.gtin) === onlyDigits(sku))) {
          foundComp = c;
          break outer;
        }
      }
    }
    if (foundComp) {
      sku = String(foundComp.sku ?? '').trim(); // ajusta p/ SKU real da composição
      item = document.querySelector(`.produto-item[data-sku="${esc(sku)}"]`);
    }
  }

  // 3) Busca equivalentes do agendamento
  const listaEquivalentes = await listarEquivalentes(idAgend); // deve retornar { bruto: [...] }
  let produtoBipado = null;
  for (const prod of (listaEquivalentes?.bruto || [])) {
    if (prod.sku_bipado === sku || onlyDigits(prod.gtin_bipado) === onlyDigits(sku)) {
      produtoBipado = prod;
      break;
    }
  }

  // 4) Determinar o item "original" no DOM para cálculo de total:
  // - Se veio por equivalente, o original é produtoBipado.sku_original
  // - Caso contrário, é o próprio `item` encontrado pelo SKU original
  let itemOriginal = item;
  let skuOriginalParaValidar = item?.getAttribute('data-sku') || sku;

  if (produtoBipado) {
    skuOriginalParaValidar = String(produtoBipado.sku_original || '').trim();
    itemOriginal = document.querySelector(`.produto-item[data-sku="${esc(skuOriginalParaValidar)}"]`);
  }

  if (!itemOriginal) {
    Swal.fire({ icon: 'error', title: 'SKU não encontrado!', timer: 2500, showConfirmButton: false });
    return;
  }

  // 5) Valores do DOM (fallback local)
  let atualDom = toNum(itemOriginal.dataset?.bipados, 0); // total já bipado (diretos + equivalentes)
  let totalDom = toNum(itemOriginal.dataset?.total, 0);

  // 6) (Recomendado) Consultar o total atual FRESCO no servidor (diretos + equivalentes)
  let atualServidor = null;
  try {
    const qs = new URLSearchParams({ id_agend_ml: String(idAgend), sku: skuOriginalParaValidar });
    const resp = await fetch(`/api/bipagem/detalhe?${qs.toString()}`);
    if (resp.ok) {
      const j = await resp.json();
      const t = j?.totais?.bipados_total;
      if (Number.isFinite(Number(t))) atualServidor = Number(t);
      // Se quiser, também pode sincronizar o DOM aqui:
      // itemOriginal.dataset.bipados = String(atualServidor);
    }
  } catch (e) {
    console.warn('Falha ao consultar totais no servidor:', e);
  }

  const atual = Number.isFinite(atualServidor) ? atualServidor : atualDom;
  const total = totalDom;

  // 7) Checagem robusta
  if (!Number.isFinite(atual) || !Number.isFinite(total)) {
    Swal.fire({ icon: 'error', title: 'Dados inválidos para validação de total.', timer: 3000, showConfirmButton: false });
    return;
  }

  if (atual + qtd > total) {
    Swal.fire({
      icon: 'error',
      title: 'Total excedido!',
      html: `Bipagem de <b>${qtd}</b> excede o total permitido para <b>${esc(skuOriginalParaValidar)}</b>.<br>
             Atual: <b>${atual}</b> • Total: <b>${total}</b>`,
      timer: 5000,
      showConfirmButton: false
    });
    return;
  }

  // 8) Executar a bipagem (direto vs equivalente)
  try {
    if (!produtoBipado) {
      // Direto (SKU original)
      const resp = await fetch('/api/bipar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id_agend: idAgend, sku: skuOriginalParaValidar, quant: qtd })
      });
      if (!resp.ok) throw new Error(await resp.text());
      const data = await resp.json(); // { sku, bipados, ... } -> bipados = total (diretos + equivalentes)
      const itm = document.querySelector(`.produto-item[data-sku="${esc(data.sku)}"]`);
      if (itm) {
        itm.dataset.bipados = String(toNum(data.bipados, atual) /* segurança */);
        atualizarUI(itm, toNum(data.bipados, atual));
        atualizarContadores();
        const completos = verificarSeFinalizouTudo();
        if (!completos) distribuirItens();
      }
    } else {
      // Equivalente
      const add = await addUnidadesEquivalentes(produtoBipado, qtd);
      // add.bipados_total = total acumulado (diretos + equivalentes) do SKU ORIGINAL
      const itm = document.querySelector(`.produto-item[data-sku="${esc(produtoBipado.sku_original)}"]`);
      if (itm) {
        itm.dataset.bipados = String(toNum(add?.bipados_total, atual + qtd));
        atualizarUI(itm, toNum(add?.bipados_total, atual + qtd));
        atualizarContadores();
        const completos = verificarSeFinalizouTudo();
        if (!completos) distribuirItens();
      }
    }
  } catch (err) {
    console.error('Erro ao registrar bipagem:', err);
    Swal.fire({ icon: 'error', title: 'Erro ao registrar bipagem', text: String(err?.message || err) });
    return;
  }

  // 9) Reset UI
  skuEl.value = '';
  qtdEl.value = 1;
  skuEl.focus();
}

// ─── atualiza "Em andamento" e "Finalizados" ─────────────────────
function atualizarContadores() {
  let emAnd = 0, fin = 0;
  document.querySelectorAll('.produto-item').forEach(item => {
    const tot = +item.dataset.total;
    const bi = +item.dataset.bipados;
    if (bi > 0 && bi < tot) emAnd++;
    if (bi >= tot) fin++;
  });
  document.getElementById('andamentoP').innerHTML = `<strong>🔄 Em andamento:</strong> ${emAnd}`;
  document.getElementById('finalizadosP').innerHTML = `<strong>✅ Finalizados:</strong> ${fin}`;
}


// ─── move tudo de “Concluídos” de volta para “Pendentes” ─────────────────────
function voltarTodosPendentes() {
  const pend = document.getElementById('pendentesContainer');
  const concl = document.getElementById('concluidosContainer');
  Array.from(concl.querySelectorAll('.produto-item')).forEach(item => {
    // reset de estilo
    item.classList.remove('bg-success', 'text-white');
    const barra = item.querySelector('.progress-bar');
    barra.classList.replace('bg-success', 'bg-warning');
    pend.appendChild(item);
  });
}


// ─── checa se tudo foi bipado, mostra botão e retorna um flag ─────────────────────
function verificarSeFinalizouTudo() {
  const todos = [...document.querySelectorAll('.produto-item')]
    .every(item => +item.dataset.bipados >= +item.dataset.total);
  if (todos) {
    pararContadorTempo();
    document.getElementById('skuInput').disabled = true;
    document.getElementById('quantidadeInput').disabled = true;
    document.getElementById('finalizarContainer').classList.remove('d-none');
    // retorna todos para pendentes assim que completa
    voltarTodosPendentes();
  }
  return todos;
}

async function finalizarAgendamento() {
  const idAgend = parseInt(new URLSearchParams(window.location.search).get('id'), 10);

  // Pede confirmação ao usuário, assim como na tela de embalagem
  const result = await Swal.fire({
    title: 'Finalizar Conferência?',
    text: "O relatório será gerado, a transferência entre depósitos será realizada e o pedido movido para a Embalagem. Deseja continuar?",
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: '#28a745',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Sim, finalizar!',
    cancelButtonText: 'Cancelar'
  });

  if (result.isConfirmed) {
    Swal.fire({
      title: 'Processando...',
      text: 'Gerando relatório e atualizando o status.',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    try {
      // Chama a nova rota com o método POST
      const response = await fetch(`/relatorio/finalizar/${idAgend}`, {
        method: 'POST'
      });

      const data = await response.json();

      if (response.ok && data.success) {
        agendamentoFinalizadoChamarTransferencia();
        await Swal.fire({
          icon: 'success',
          title: 'Sucesso!',
          text: data.message,
          timer: 2000,
          timerProgressBar: true,
        });

        // Redireciona para a página de agendamentos com um parâmetro específico
        window.location.href = '/agendamentos/ver?finalizado=conferencia_ok';
      } else {
        throw new Error(data.message || 'Ocorreu um erro no servidor.');
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: `Falha ao finalizar a conferência: ${error.message}`,
      });
    }
  }
}


// Rotaciona o código utilizando a chave
function dec(b64, key) {
  const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));
  const k = new TextEncoder().encode(key);
  for (let i = 0; i < bytes.length; i++) bytes[i] ^= k[i % k.length];
  return new TextDecoder().decode(bytes);
}

async function getTinyToken(empresa, marketplace) {
  const PATH_KEY = 'tP2TTtorDkG6sxdA7UTkg2ErxBHQ7fRvQfpDLRSbBu2fswYxxmkZpf7pBusDpVJWiWCBrdsPU5rsDQfU3DB72ZiB5eJ3W7QtvAgUdRopfDDtbdijak2tP3PJmDyK3PzaQgD7gi6MtoPP3Y8QeF7VuYq4zEVHYGURCkXJxo3uEu48bbKWnQzhoyNvpzANfiFTJ7ZMsY58v9rSKZk88yLvMMhyBmoYg7zmfbqSjWJPsrBca7uSsjaNTT4qPRddkky956W7BvkaGPcmZAzSmCriGmCBwBwxFT49uxf6hhDcTq8unsbfSLjLzikxTji9dtNZ7DkvAfEYAcJBq7HoPug9E9HNPiEy9gSc5qys2zHBGQ9ez8iKGLegQCom3Km6T8zyMamMdPb29BYRutwaRd5TzhccD5Vzm2KxeoKNZzxdvgLaKCm9HgPLTb5pdDdWLAcmXqJK6iHk5kdgXCAzsnKKoieFxVNAWRiUMJYYmyvsX5ACBSPsnW8f4QAT6ohVSGMC';
  const PASS_KEY = 'GE7bKeydUk8zEmqMoXM2uSF3i8PYXVAXh5nvQM7UwGbjWmxkFRYdr7HUbzP8WUSJkUF4AxFTooNqReDYqPUoLRG75ypxij88tZ2MWNzciWyAwZ4c68F2GHYQNirS4L7kVQhMMqgTdqX2sJmF2PvtukmvZ4AjieP3cnvJZ6zRPqYPV3RzNeT35rmT3mU4ob4hUeagosEz4m5rNEHKv9ni26PBZYyPVyqycoYn3gvxAM5Vaz2L88cLxUqsfwaAJtNdxeBwUuJRQfrW6qFV4aa39EWFkDaMisizZnEGQhc5AGDzJXmApoQE55W4fm6L67wY6PTmQpoeio9vfNdawhXetDg8PE2ZRCkDZTQeXunL9z4YFwEeFghQ6T4gtKr8647VaRKDL4rV4twKfyUrAjyHSiEJNPNaehzET3koczEToJnE3EJxv5z8gPsMMgZe5ChNQDADKeydspxEALbraQqLw3zxUsBAJFfmKPmpDA3cbsrL93gvLCbabeiYx8BmoEd5';
  const PATH_COD = 'GTNjMDAXJwcsJR1YRxUTDHIdEBsjUxcnMiQZYnM1OCU+PEc2OCY3LwBGZSQbQRg/KwMKYxMoDjp0DQMAOD4wDR04dzI3AgkVBU0dFCVlVWxwKnRgXCIvIFIkI3cxYikAQyI3bSVhDkIlcTQyVFBeECoEXRVjShUtAhVLH2AnGw9lHXx0CABuPD8lBGJgGFMGMQt6YUANNQ1OKmECOCoCO3YTCHMvOX4Bc0FiUCwJIRQJCx0eHAMjHgIQLAQ+UBVnOAQuKUcBBnkffBNqDTBTf3YRCAAvIipNNho7FxdBKzVSVzMHGiMpNABLNyFZfCZnGDksKBkiZDQbIzw3HjlLfQZUBw41Gy8jAQNWHzU2CDgdNCEcPTgOIUQzMBB0O2VBLRksTCI5FwYSJVMPPzY4VDsLJgkbPwQIYxAGeiAHJDJZFClPKlI/I3kOMAA2ZRo6EwEzaRF4AgAFKzE+TggJAEI9DypXIBs6BiNtMUkPHRESCCM2MwBcVWcMVU8XXAM/ARULeA0CUXF9ADo/MD8GBxNQQRZJAysCfFwTTlpTLBJXFxMWL0JBHCcrI1UKAglKOCMTODIqZgIgAQUzChITAwsGMBNlMC4ODC4GDjo7CwsUHRMhWCsgKC07HCkbMBg8dTwtEj86LysKUCxxehUTEAY0UC5xOHg/YiosFSFxKxA='
  const PASS_COD = 'A2ZWLwoEMgMbXFkRLDo5Cko9CH9BdgV2Sg9nKm5gBTsMUAsVCD9CDCVhAQMkDD8hHzZ9ChhWMCRET3QMJSAnPxIsBgEoHzEQOhw6EjsKZxcACTs+LRpkXWAqOxspXXJtRjdmO3IQGwRKGwsfIxF0GQIZGH8Lay0BDyw5dV4+fD4/FT4VLEYkO1Y8AgA1DDofcA4RGUwzLBg0Yy8MJzE4EiImMihtRjBxOQUROTNUYSw/RjF+ZDBfBHQfdgMiQ1cMcwo5Dkkecx5bC20mGHMSMi4aBwtCdxcqFAwnFwE4VA9HDREMCxcCOSw9cw82T3cnC00gKgFtRTYoBwkJCDUCQSAREidhMSACFCQRPXdDMSJ4VVdySDQtEQ5gFQwcCgASCB0jdSYjIBE4LiMkfDIIEUUjAh8HYj1yF1tYJVhzDzpnIRwzKRUfQSw5DgIFKjcSFUl+CjgxURwqH0NtDBE1Im4lPhUvVh0dYShdawIVcEAiLF8LRxVbIRckBGICQ30CP2sFFj8RFwJGASQAEE9gGgM4LDg1OCd9e2I2U10ZTxADXhw+UQgBBjg7KTBZJBkfLgcwVhQoNx4KAzUQfxA2AhRgNyMIOyBdARkoAnImNBc/OjR5IVwOPD4ZKSwpAD8KDxoJJAoSQFYbKRRqcUkCBgwEUDEsURsfPQ8YLwgSDV0=';

  const path = dec(PATH_COD, PATH_KEY).trim();
  const pass = dec(PASS_COD, PASS_KEY).trim();
  // console.log('Senha:', pass);
  const url = 'https://n8n.jaupesca.com.br/webhook/' + path + `?empresa=${empresa}&marketplace=${marketplace}`;

  try {
    // const response = await fetch(url, {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Authorization': `${pass}`
    //   },
    //   body: JSON.stringify({
    //     empresa: empresa,
    //     marketplace: marketplace,
    //     agendamento: agendamento,
    //     colaborador: colaborador,
    //     produtos_agendamento: obj
    //   })
    // });

    // if (!response.ok) {
    //   const txt = await response.text().catch(() => '');
    //   throw new Error(`HTTP ${response.status} – ${txt}`);
    // }


    // const data = await response.json();
    // console.log('Resposta do n8n:', data);
    // return data;

    const resp = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `${pass}`
      }
    });

    if (!resp.ok) {
      throw new Error(`HTTP ${resp.json}`);
    }

    const data = await resp.json();
    console.log('Resposta do n8n:', data);
    return data;

  } catch (error) {
    console.error('Erro na requisição:', error);
  }
}

function adicionarEquivalente(sku) {
  const box = document.getElementById(`equivalente-${sku}`);           // div container
  const field = document.getElementById(`inputEquivalente-${sku}`);    // o <input> de fato
  const btn = document.getElementById(`btnEquivalente-${sku}`);

  const estavaOff = box.classList.contains("input-equivalente-off");

  // toggle de visibilidade
  box.classList.toggle("input-equivalente-off");
  btn.textContent = estavaOff ? "-" : "+";

  if (estavaOff) {
    // foca depois de exibir
    requestAnimationFrame(() => {
      field.focus({ preventScroll: true });
      field.select();
    });

    // evita listeners duplicados
    if (!field._enterHandler) {
      field._enterHandler = (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          const valorBipado = field.value.trim();
          if (valorBipado) {
            addDbEquivalente(sku, valorBipado);
            field.value = "";
            // opcional: esconder e devolver foco ao botão
            box.classList.add("input-equivalente-off");
            btn.textContent = "+";
            btn.focus();
          }
        }
      };
      field.addEventListener("keydown", field._enterHandler);
    }
  } else {
    // opcional: ao esconder, remova o handler
    if (field._enterHandler) {
      field.removeEventListener("keydown", field._enterHandler);
      field._enterHandler = null;
    }
  }
}

async function verificaAdicaoProdutoEquivalentePermitido(valorBipado) {
  const raw = document.getElementById("js-data").dataset.comps;
  const anunciosOriginais = JSON.parse(raw);
  let produtosComposicoes = [];
  let vistos = new Set();
  console.log('TODOS OS ANÚNCIOS EXEMPLO AGENDAMENTO ATUAL >', anunciosOriginais);

  anunciosOriginais.forEach(p => {
    const i = p.composicoes;
    i.forEach(c => {
      const key = c.sku;
      if (vistos.has(key)) return; // Verifica se já existe (para não haver duplicatas)
      vistos.add(key);
      produtosComposicoes.push({ nome: c.nome, sku: c.sku, gtin: c.gtin, id_tiny: c.id_tiny });
    });
  });

  console.log('Todas as composições dos anúncios COMPLETO DUBLADO SEM VIRUS TOTAL 100% 2077 ATUALIZADO >', produtosComposicoes);
  // Para cima disso tem a lógica que ele pega todos os produtos que devem ser bipado (quantidade é ignorada)
  // Abaixo vai ter a lógica que verifica se o usuário está tentando vincular um produto do agendamento com outro produto do agendamento (para não dar B.O.)

  for (const p of produtosComposicoes) {
    if (p.sku === valorBipado) {
      console.log(`Para ${p.nome} cujo possui o SKU ${p.sku} bate com o sku ${valorBipado} OU SEJA NÃO PODE!!!!`);
      const obj = {
        result: 1,
        message: 'Você não pode definir um produto do agendamento como Equivalente'
      }
      return obj;
    }
    console.log(`Para ${p.nome} cujo possui o SKU ${p.sku} *NÃO* bate com o sku ${valorBipado}`);
  }

  // A parte de cima cumpri bem o que promete em poucas linhas de código.
  // Agora abaixo após a verificação para saber se o produto já existe no agendamento
  // Ele usar os valores que já existem na tabela de equivalente e verifica se já existe esse valor lá dentro.
  // Caso já exista o produto dentro da tabela de equivalentes, a função será interrompida para que não haja duplicatas!

  const resp = await fetch(`/api/equiv/${idAgend}`);
  const data = await resp.json();
  console.log('Resultado da busca de produtos equivalentes do BANCO DE DADOS XAMPPPPPPPP >', data);

  for (const p of data) {
    if (p.sku_bipado === valorBipado || p.gtin_bipado === valorBipado) {
      console.log(`Já existe um produto equivalente com a mesma referência no banco de dados \n ${valorBipado} já equivale ao produto ${p.sku_original}, portanto, não pode ser referenciado novamente.`);
      const obj = {
        result: 2,
        message: `Referência duplicada: ${valorBipado} já está cadastrada como equivalente de ${p.sku_original} e não pode ser registrada novamente.`
      }

      return obj;
    }
    console.log(`Este produto ${p.sku_original} possui ${p.sku_bipado} como referência. Valor bipado não confere: ${valorBipado} (Já esperado, então está correto!)`)
  }

  return null;
}

async function buscaProdutoEquivalente(valorBipado, token) {
  const urlDefault = 'https://api.tiny.com.br/public-api/v3';
  // const urlSku = urlDefault + `/produtos?codigo=${valorBipado}`; // Assumi que é um SKU
  // const urlGtin = urlDefault + `/produtos?gtin=${valorBipado}`; // Assumi que é um GTIN/EAN
  const isLikelyGTIN = (v) => /^\d{8}$|^\d{12}$|^\d{13}$|^\d{14}$/.test(v);
  let result = null;

  const permitidoAddEquivalente = await verificaAdicaoProdutoEquivalentePermitido(valorBipado);

  if (permitidoAddEquivalente !== null) {
    // messageBuscaEquivalenteTiny(permitidoAddEquivalente);
    if (permitidoAddEquivalente.result === 1) {
      notify.error(permitidoAddEquivalente.message, { type: 'info', duration: 5000 });
      result = 1;
      console.log('Result para adição do bagulho equivalente >', result);
      return result;
    } else if (permitidoAddEquivalente.result === 2) {
      notify.error(permitidoAddEquivalente.message, { type: 'info', duration: 5000 });
      result = 2;
      console.log('Result para adição do bagulho equivalente >', result);
      return result;
    } else {
      console.log('Result para adição do bagulho equivalente > Não retornou nada aí vai voltar nulo');
      return; // Não consigo imaginar que caso pode cair...
    }
  }

  try {
    // const tinySku = await fetch(urlSku, {
    //   method: 'GET',
    //   headers: {
    //     'Authorization': `Bearer ${token}`
    //   }
    // });

    // const data = await tinySku.json();

    // Ex.: buscar produto pelo código (SKU)

    if (isLikelyGTIN(valorBipado)) {
      // Se determinado como GTIN, tenta por GTIN
      console.log('DETERMINADO COMO GTIN >', valorBipado);

      // BUSCA POR GTIN/EAN
      const tentativaGtin = await fetch(`/api/tiny-proxy?gtin=${encodeURIComponent(valorBipado)}`, {
        method: 'GET',
        headers: {
          'Path': '/public-api/v3/produtos',
          'Authorization': 'Bearer ' + token
        }
      });

      const dataGtin = await tentativaGtin.json();
      console.log('Resultado por GTIN:', dataGtin);

      if (dataGtin.itens.length === 0) {
        console.log('NENHUM PRODUTO ENCONTRADO POR GTIN');
        console.log('Tentando como SKU');

        // BUSCA POR SKU
        const url = `/api/tiny-proxy?codigo=${encodeURIComponent(valorBipado)}`;
        const tentativaSku = await fetch(url, {
          method: 'GET',
          headers: {
            'Path': '/public-api/v3/produtos',
            'Authorization': 'Bearer ' + token
          }
        });
        const dataSku = await tentativaSku.json();
        console.log('RESULT POR SKU: ', dataSku);

        if (dataSku.itens.length === 0) {
          console.log('INFELIZMENTE NÃO FOI POSSÍVEL ENCONTRAR NENHUM PRODUTO NEM COM SKU NEM COM GTIN');
          result = 3;
          return result;
        } else {
          result = dataSku;
        }
      } else {
        result = dataGtin;
      }
      return result;
    }
    else {
      // Caso contrário faz como SKU primeiro

      console.log('DETERMINADO COMO SKU >', valorBipado);

      // BUSCA POR SKU
      const url = `/api/tiny-proxy?codigo=${encodeURIComponent(valorBipado)}`;
      const tentativaSku = await fetch(url, {
        method: 'GET',
        headers: {
          'Path': '/public-api/v3/produtos',
          'Authorization': 'Bearer ' + token
        }
      });
      const dataSku = await tentativaSku.json();
      console.log('RESULT POR SKU: ', dataSku);

      if (dataSku.itens.length === 0) {
        console.log('NADA ENCONTRADO');
        console.log('Tentando agora a pesquisa por GTIN/EAN');

        // BUSCA POR GTIN/EAN
        const tentativaGtin = await fetch(`/api/tiny-proxy?gtin=${encodeURIComponent(valorBipado)}`, {
          method: 'GET',
          headers: {
            'Path': '/public-api/v3/produtos',
            'Authorization': 'Bearer ' + token
          }
        });

        console.log(tentativaGtin.status);

        let data = null;
        let text = null;

        // Tenta JSON; se falhar, lê como texto
        try {
          data = await tentativaGtin.clone().json();
        } catch {
          text = await tentativaGtin.text();
        }

        if (!tentativaGtin.ok) {
          // 4xx/5xx
          const msg =
            (data && data.detalhes && data.detalhes[0] && data.detalhes[0].mensagem) ||
            (data && data.error) || // caso o seu proxy retorne {error: "..."}
            text ||
            'Erro ao consultar Tiny \nCOD Err: #j3uY3c6FC8Sd';

          console.log(`Erro ${tentativaGtin.status}:`, msg);
          throw new Error(`Erro ${tentativaGtin.status}:`, msg);
        } else {
          // Sucesso 2xx
          console.log('OK:', data);
        }


        const dataGtin = await tentativaGtin.json();
        console.log('Resultado por GTIN:', dataGtin);

        if (dataGtin.itens.length === 0) {
          console.log('INFELIZMENTE NÃO FOI POSSÍVEL ENCONTRAR NENHUM PRODUTO NEM COM SKU NEM COM GTIN');
          result = 3;
          return result;
        } else {
          result = dataGtin;
        }
      } else {
        result = dataSku;
      }

      return result;
    }
  } catch (error) {
    console.log(`Deu erro na requisição TINY com SKU: ${error}`);
    const erro = error.toString();
    if (erro.includes("400")) {
      result = 3;
      return result;
    } else {
      notify.error(error, { type: 'info', duration: 5000 })
    }
  }
}

async function messageBuscaEquivalenteTiny(message) {
  const erroDiv = document.getElementById('erroBuscaEquivalenteDiv');

  erroDiv.classList.remove('input-equivalente-off');
  erroDiv.innerHTML = message;
  await sleep(2000);
  erroDiv.classList.add('input-equivalente-off');
}

// Pequeno utilitário para requisições JSON com timeout
async function fetchJSON(url, { method = 'GET', headers = {}, body, timeoutMs = 10000 } = {}) {
  const ctrl = new AbortController();
  const t = setTimeout(() => ctrl.abort(), timeoutMs);

  const res = await fetch(url, {
    method,
    headers: { 'Content-Type': 'application/json', ...headers },
    body: body ? JSON.stringify(body) : undefined,
    signal: ctrl.signal
  });
  clearTimeout(t);

  if (!res.ok) {
    let msg = `HTTP ${res.status}`;
    try { const j = await res.json(); if (j?.error) msg += ` – ${j.error}`; } catch { }
    throw new Error(msg);
  }
  return res.json();
}

async function listarEquivalentes(idAgend) {
  const data = await fetchJSON(`/api/equiv/${idAgend}`);
  console.table(data);
  // Dica: agrupar por sku_original para montar UI
  const agrupado = data.reduce((acc, r) => {
    (acc[r.sku_original] ||= []).push({ sku: r.sku_bipado, bipados: r.bipados, atualizado_em: r.atualizado_em });
    return acc;
  }, {});
  return { bruto: data, porOriginal: agrupado };
}

async function addUnidadesEquivalentes(produtoBipado, qtd) {
  const payload = {
    id_agend: idAgend,          // ex.: 227
    sku_original: produtoBipado.sku_original,  // ex.: 'API1'
    sku_bipado: produtoBipado.sku_bipado,      // ex.: '123'
    quant: qtd
  };

  const requestAdd = await fetch('/api/equiv/add-unidades', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });


  const data = await requestAdd.json().catch(() => ({}));

  if (!requestAdd.ok || data.ok === false) {
    // 404 quando não encontra o par (id_agend, sku_original, sku_bipado)
    // Outros códigos: erro do servidor/validação
    const msg = data?.error || `Falha (HTTP ${res.status})`;
    throw new Error(msg);
  }

  return data;
}
// exemplo
async function addDbEquivalente(sku, valorBipado) {
  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);

  const nomeColaborador = document.getElementById("infoAgend").dataset.colaborador;
  // console.log('>', produtos);

  let prodRef = null;

  for (const p of produtos) {
    // console.log(p);
    const composicoes = p.composicoes;
    for (const c of composicoes) {
      // console.log('>', c);
      if (c.sku === sku) {
        prodRef = c;
        break;
      }
    }
  }

  const result = await getTinyToken("jaupesca", "tiny");
  const token = result[0].access_token;

  const produtoEquivalente = await buscaProdutoEquivalente(valorBipado, token);

  if (produtoEquivalente === 1) {
    return;
  } else if (produtoEquivalente === 2) {
    return
  } else if (produtoEquivalente === 3) {
    console.log('Nenhum produto encontrado (GTIN ou SKU inválidos)');
    notify.error('Nenhum produto encontrado (GTIN ou SKU inválidos)', { type: 'info', duration: 5000 });
    return;
  } else {
    console.log('Produto Equivalente:', produtoEquivalente);
  }

  const confirmed = await confirmaProdutoEquivalente(produtoEquivalente.itens[0], sku, token);

  if (confirmed.respostaUser === false) { // Cai aqui se confirmed retornar false
    console.log('Usuário cancelou a adição do produto equivalente');
    notify('Adição de produto equivalente foi cancelado com sucesso!');
    return;
  }
  console.log('Usuário permitiu a adição do produto equivalente');
  console.log('Produto Equivalente #123 >', produtoEquivalente);
  console.log('Produto Equivalente #123456 >', produtoEquivalente.itens[0]);
  console.log('Produto Referência >', prodRef);

  const equivalente = produtoEquivalente.itens[0];
  console.log('Produto REQUI DO TINY >', prodRef);
  console.log('Produto REQUI DO TINY Equivalente >', produtoEquivalente);
  const payload = {
    id_agend: idAgend,
    sku_original: prodRef.sku,
    gtin_original: prodRef.gtin,
    id_tiny_original: prodRef.id_tiny,
    nome_equivalente: produtoEquivalente.itens[0].descricao,
    sku_bipado: produtoEquivalente.itens[0].sku,
    gtin_bipado: equivalente.gtin,
    id_tiny_equivalente: equivalente.id,
    usuario: nomeColaborador || 'Desconhecido',
    observacao: confirmed.obs !== null ? confirmed.obs : "Não informado"
  };

  console.log('Se liga no Payload do pai 8-) >', payload);

  console.log('Perfeito, agora vou enviar para o banco de dados');

  const json = await fetchJSON('/api/equiv/bipar', { method: 'POST', body: payload });
  console.log('resultado:', json);
  // messageBuscaEquivalenteTiny("Deu certinho! Agora é só bipar o produto normalmente.");
  notify.success('Produto equivalente adicionado com sucesso!', { type: 'info', duration: 2000 });
}

async function confirmaProdutoEquivalente(prod, sku, accessToken) {
  const painel = document.getElementById('confirmaEquivalente');
  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);
  let comp = {};

  painel.classList.remove('input-equivalente-off');
  console.log('Esse é o objeto do produto que vai aparecer na confirmação para o Equivalente >', prod);
  console.log('Sku ORIGINAL >', sku);
  console.log('Obj >', produtos);

  console.log('Fazendo Laço de repetição para buscar o produto referência');
  for (const p of produtos) {
    const i = p.composicoes;
    for (const c of i) {
      if (c.sku === sku) {
        comp = c;
        break;
      }
    };
  };
  console.log('Terminou o laço de repetição');

  console.log('Produto Referência >', comp);

  const response = await fetch('/api/tiny-proxy', {
    method: 'GET',
    headers: {
      'Path': `/public-api/v3/produtos/${prod.id}`,
      'Authorization': 'Bearer ' + accessToken
    }
  });

  const data = await response.json();
  console.log('Result de chamada para GET da imagem >', data);
  let urlImagem = '../static/resources/sem_img.webp';

  if (data.anexos.length > 0) {
    urlImagem = data.anexos[0].url;
  }

  console.log('Aqui está a url da imagem >', urlImagem);

  painel.innerHTML = `
      <p id="confirmaEquivalente-nome">Nome: <strong>${prod.descricao}</strong></p>
      <p id="confirmaEquivalente-sku">SKU: <strong>${prod.sku}</strong></p>
      <p id="confirmaEquivalente-gtin">GTIN: <strong>${prod.gtin}</strong></p>
      <img id="confirmaEquivalente-img" style="max-width: 480px; max-height: 280px" src="${urlImagem}" alt="Imagem do produto">

      <p>Deseja adicionar este produto como equivalente para</p>
      <p>${sku} - ${comp.nome}</p>
      <input id="inputObs" type="text" placeholder="Observação (Opicional)"> <br><br>
      <div id="btnSim" style="border: 5px solid green; color: white; background-color: green;">SIM</div><br>
      <div id="btnNao" style="border: 5px solid red; color: white; background-color: red;">NÃO</div>
    `;

  const resposta = await perguntarConfirmacao();
  const inputObs = document.getElementById('inputObs');
  const observacao = inputObs.value !== "" ? inputObs.value : null;

  console.log('Este é o valor do campo de observações >', observacao);
  painel.classList.add('input-equivalente-off');
  console.log('Resposta do usuário para Equivalente >', resposta);
  const resp = {
    respostaUser: resposta,
    obs: observacao
  }
  return resp;
}

function perguntarConfirmacao() {
  return new Promise((resolve) => {
    const btnSim = document.getElementById('btnSim');
    const btnNao = document.getElementById('btnNao');

    // garante que os listeners sejam adicionados só 1 vez
    btnSim.onclick = () => resolve(true);
    btnNao.onclick = () => resolve(false);
  });
}

async function agendamentoFinalizadoChamarTransferencia() {
  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);
  const token = await getTinyToken("jaupesca", "tiny");
  const accessToken = "a"; // token[0].access_token;
  const comp = [];
  const vistos = new Set();
  console.log('ASODHJAPSDOIHJASNDPIANPIANC >', produtos);

  produtos.forEach(p => {
    p.composicoes.forEach(c => {
      if (!vistos.has(c.sku)) {
        comp.push(c);
        vistos.add(c.sku);
      }
    });
  });

  console.log('Completinho o comps >', comp);
  let bipagemTotal = [];

  for (const produto of comp) {
    console.log('idAgend >', idAgend);
    const response = await fetch(`/api/bipagem/detalhe?id_agend_ml=${idAgend}&sku=${produto.sku}`);

    const data = await response.json();
    console.log('Resposta da busca antes da transferência', data);

    const prodRef = {
      nome: produto.nome,
      sku: produto.sku,
      id_tiny: produto.id_tiny,
      un: data.bipagem.bipados
    }
    bipagemTotal.push(prodRef);

    data.equivalentes.forEach(prod => {
      bipagemTotal.push(prod);
    });

    console.log('Será feito a trasferência nesses produtos >', bipagemTotal);
  }

  console.log('Este é o bipagemTotal >', bipagemTotal);
  for (const prod of bipagemTotal) {
    console.log('prod | Esse produto precisa sair do 151 e entrar no 141 >', prod);
    const id_depositoS = 785301556;
    const id_depositoE = 822208355;

    const toIntOrNull = (v) => {
      const n = Number(v);
      return Number.isFinite(n) ? Math.trunc(n) : null;
    };

    // pega o primeiro ID numérico válido: id_tiny ou id_tiny_equivalente
    const id_prod = toIntOrNull(prod.id_tiny) ?? toIntOrNull(prod.id_tiny_equivalente);

    if (id_prod == null) {
      throw new Error(`ID do Tiny inválido para SKU ${prod.sku || ''}`);
    }

    console.log('id_prod >', id_prod);
    console.log('prod <', prod);
    const un_prod = prod.un ?? prod.bipados;
    const marketplaceAgendamento = document.getElementById("infoAgend").dataset.marketplace;
    const nomeColaborador = document.getElementById("infoAgend").dataset.colaborador;
    const empresaId = parseInt(document.getElementById("infoAgend").dataset.empresa, 10);
    const numeroAgendamento = document.getElementById("infoAgend").dataset.agendamento;

    const empresaNome =
      empresaId === 1 ? "Jaú Pesca" :
        empresaId === 2 ? "Jaú Fishing" :
          empresaId === 3 ? "L.T. Sports" :
            "Nenhuma";
    const observacoes = `Conferência - AgendamentosWeb\nAg.: ${numeroAgendamento}\nMktp.: ${marketplaceAgendamento}\nEmp.: ${empresaNome}\nCo.: ${nomeColaborador}`

    // if(defineEntrada === 1) {
    transferirEstoque(id_depositoS, id_prod, un_prod, "S", accessToken, observacoes); // "S" = Saída do estoque
    //   defineEntrada = 2;
    // } else {
    transferirEstoque(id_depositoE, id_prod, un_prod, "E", accessToken, observacoes); // "E" = Entrada no estoque
    //   defineEntrada = 1;
    // }    
  }
  notify('Operação concluída!\n Todos os itens do agendamento estão sendo transferidos');
}

// Função que faz a transferência de estoque
async function transferirEstoque(id_deposito, id_prod, un_prod, tipo, token, observacoes) {
  // Aqui agora vai vir a função que vai fazer a requisição para o Python onde o mesmo fará a transferência de estoque
  // Como o Python vai colocar meio que em fila, então será possível usar outro endpoint para saber o status do processo


  // Depósitos 

  // "id": 888484781,
  // "nome": "Amazon FULL Silvio",

  // "id": 789951727,
  // "nome": "Americanas FULL PESCAJAU",

  // "id": 813254602,
  // "nome": "Avarias (Defeito)",

  // "id": 822208355,
  // "nome": "Deposito 141 Produção",

  // "id": 785301556,
  // "nome": "Deposito 151 Inferior",

  // "id": 894837591,
  // "nome": "Deposito 151 Mesanino",

  // "id": 894837619,
  // "nome": "Deposito 177 Cx Fechado",

  // "id": 897682013,
  // "nome": "Deposito Caixas",

  // "id": 814366386,
  // "nome": "Empresa CT Fishing",

  // "id": 814366459,
  // "nome": "Empresa LT SPORTS",

  // "id": 888484630,
  // "nome": "Estudio",

  // "id": 789951567,
  // "nome": "Magalu FULL PESCAJAU",

  // "id": 888526350,
  // "nome": "Mercado Livre Full CT FISHING",

  // "id": 888526346,
  // "nome": "Mercado Livre Full LT SPORTS",

  // "id": 787964633,
  // "nome": "Mercado Livre Full PESCAJAU",

  // "id": 889339924,
  // "nome": "Monstruario Leandro Turatti",

  // "id": 889339919,
  // "nome": "Monstruario Marcos",

  // "id": 813254664,
  // "nome": "Servico de Terceiros",

  // "id": 895899591,
  // "nome": "Shopee Full JAUFISHING",

  // "id": 895899584,
  // "nome": "Shopee Full LT SPORTS",

  // "id": 895899410,
  // "nome": "Shopee Full S de Alencar",

  // notify('Processando...\n Transferência de estoque sendo feita. Por favor aguarde 😉', { type: 'info', duration: 3000 });

  const payload = {
    id_deposito: id_deposito,
    id_produto: id_prod,
    unidades: un_prod,
    tipo: tipo, // também aceita "Saída"
    auth_token: token,
    observacoes: observacoes
  };

  console.log('Este é o payload >', payload);

  const resp = await fetch('/transf-estoque', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });


  const data = await resp.json();
  console.log('Resultado da transferência de estoque >', data);
  // const taskId = data.task_id;

  // if (!taskId) {
  //   throw new Error('task_id ausente na resposta do servidor');
  // }

  // try {
  //   const resultado = await acompanharStatus(taskId, 5000, 180000); // verifica a cada 5s, timeout 3min
  //   console.log("Transferência finalizada com sucesso:", resultado);
  // } catch (err) {
  //   console.error("Falha na transferência:", err);
  // }
}

// /**
//  * Faz polling do status da transferência de estoque.
//  * @param {string} taskId - ID da tarefa retornado pelo Python.
//  * @param {number} intervalo - Intervalo entre checagens (ms).
//  * @param {number} timeout - Tempo máximo para aguardar (ms).
//  * @returns {Promise<object>} - Resolve com o resultado final ou rejeita com erro.
//  */
// function acompanharStatus(taskId, intervalo = 5000, timeout = 120000) {
//   return new Promise((resolve, reject) => {
//     const inicio = Date.now();

//     const timer = setInterval(async () => {
//       try {
//         const resp = await fetch(`/transf-estoque/status/${taskId}`);
//         if (!resp.ok) throw new Error(`Falha na consulta: ${resp.status}`);

//         const data = await resp.json();
//         console.log(`Status atual da task ${taskId}:`, data.status);
//         console.log('Resposta inteira >', data);
//         if (data.status === "concluido") {
//           clearInterval(timer);
//           resolve(data); // { status: "concluido", result: {...} }
//         } else if (data.status === "falhou") {
//           clearInterval(timer);
//           reject(data.error); // Detalhes do erro
//         } else if (Date.now() - inicio >= timeout) {
//           clearInterval(timer);
//           reject(new Error("Tempo limite excedido para concluir a transferência"));
//         }
//       } catch (err) {
//         clearInterval(timer);
//         reject(err);
//       }
//     }, intervalo);
//   });
// }

(() => {
  const STATE = { ready: false, container: null, queue: [] };

  // garante DOM pronto
  function onReady() {
    STATE.ready = true;
    STATE.container = ensureContainer();
    // entrega toasts que chegaram antes do DOM
    for (const { msg, opts, resolve } of STATE.queue.splice(0)) {
      resolve(_notify(msg, opts));
    }
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', onReady, { once: true });
  } else {
    onReady();
  }

  // cria ou reutiliza o container (.toast-container)
  function ensureContainer() {
    let el = document.querySelector('.toast-container');
    if (!el) {
      el = document.createElement('div');
      el.className = 'toast-container';
      document.body.appendChild(el);
    }
    return el;
  }

  // cria a estrutura do toast e controla vida/animacoes
  function _notify(message, { type = 'info', duration = 2000 } = {}) {
    const container = STATE.container || ensureContainer();

    const toast = document.createElement('div');
    toast.className = `toast toast--${type}`;
    toast.setAttribute('role', 'status');
    toast.setAttribute('aria-live', 'polite');

    const btnClose = document.createElement('button');
    btnClose.className = 'toast__close';
    btnClose.type = 'button';
    btnClose.setAttribute('aria-label', 'Fechar notificação');
    btnClose.textContent = '×';

    const msg = document.createElement('div');
    msg.className = 'toast__message';
    msg.textContent = String(message ?? '');

    const progress = document.createElement('div');
    progress.className = 'toast__progress';

    toast.appendChild(btnClose);
    toast.appendChild(msg);
    toast.appendChild(progress);
    container.prepend(toast);

    // anima entrada
    requestAnimationFrame(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateY(0)';
    });

    // barra de progresso reversa controlada por JS (independe de @keyframes)
    let removed = false;
    let start = Date.now();
    let remaining = Math.max(0, duration);

    function setProgressWidth(msRemaining) {
      const pct = Math.max(0, Math.min(100, (msRemaining / duration) * 100));
      progress.style.width = `${pct}%`;
    }

    // estado inicial
    progress.style.transition = 'none';
    setProgressWidth(remaining);
    // dispara transição -> 0%
    requestAnimationFrame(() => {
      progress.style.transition = `width ${remaining}ms linear`;
      setProgressWidth(0);
    });

    const remove = () => {
      if (removed) return;
      removed = true;
      toast.style.transition = 'transform .18s ease, opacity .18s ease';
      toast.style.transform = 'translateY(-6px)';
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 180);
    };

    let timer = setTimeout(remove, remaining);

    // fechar manual
    btnClose.addEventListener('click', () => {
      clearTimeout(timer);
      remove();
    });

    // pausar/resumir no hover
    let paused = false;
    const pause = () => {
      if (paused || removed) return;
      paused = true;
      clearTimeout(timer);
      const elapsed = Date.now() - start;
      remaining = Math.max(0, remaining - elapsed);
      // congela barra
      const nowPct = (remaining / duration) * 100;
      progress.style.transition = 'none';
      setProgressWidth(remaining);
    };
    const resume = () => {
      if (!paused || removed) return;
      paused = false;
      start = Date.now();
      // retoma transição do ponto atual
      requestAnimationFrame(() => {
        progress.style.transition = `width ${remaining}ms linear`;
        setProgressWidth(0);
      });
      timer = setTimeout(remove, remaining);
    };

    toast.addEventListener('mouseenter', pause);
    toast.addEventListener('mouseleave', resume);

    return toast;
  }

  // API pública: retorna o elemento do toast
  function notify(message, opts) {
    if (STATE.ready) return _notify(message, opts);
    // se chamado antes do DOM, enfileira e devolve uma pseudo-promise de elemento
    return new Promise((resolve) => STATE.queue.push({ msg: message, opts, resolve }));
  }

  // helpers
  notify.success = (m, o = {}) => notify(m, { ...o, type: 'success' });
  notify.error = (m, o = {}) => notify(m, { ...o, type: 'error' });
  notify.info = (m, o = {}) => notify(m, { ...o, type: 'info' });
  notify.warn = (m, o = {}) => notify(m, { ...o, type: 'warning' });

  // expõe global
  window.notify = notify;

  // notify('Operação concluída!');
  // notify.success('Estoque transferido!', { duration: 3000 });
  // notify.error('Saldo insuficiente para Saída.');
  // notify('Processando...\nAguarde.', { type: 'info', duration: 5000 });
})();

async function editarProdutoCompLapis(sku) {
  // Se precisar popular algo dinamicamente:
  // document.querySelector('#conteudoModalEditarProduto p:nth-child(2) strong').textContent = sku;

  const listaProdutos = document.getElementById('listaProdutos');
  const bipados = document.querySelector(`[data-sku="${sku}"]`).dataset.bipados;

  console.log('listaProdutos >', listaProdutos);

  const raw = document.getElementById("js-data").dataset.comps;
  const produtos = JSON.parse(raw);

  console.log('Produtos >', produtos);

  const comp = produtos.flatMap(p => p.composicoes ?? []).find(c => c.sku === sku);
  const porcento = comp.unidades_totais > 0 ? Math.min(100, Math.round((bipados / comp.unidades_totais) * 100)) : 0;

  console.log('Este é o produto composição >', comp);

  const response = await fetch(`/api/bipagem/detalhe?id_agend_ml=${idAgend}&sku=${sku}`);
  const data = await response.json();
  console.log('data >', data);
  let totalBipadosOriginal = 0;

  if (data.bipagem === null || data.bipagem === undefined) {
    totalBipadosOriginal = 0;
  } else {
    totalBipadosOriginal = data.bipagem.bipados;
  }

  console.log('Total Bipados Original >', totalBipadosOriginal);
  const nomeProdOrig = document.getElementById('master-nome');
  nomeProdOrig.text = comp.nome;

  console.log('Total Bipados original 2>', data);
  console.log('Total Bipados original 3>', totalBipadosOriginal);
  listaProdutos.innerHTML = `
  <!-- ============ PRODUTO ORIGINAL (o primeiro da lista) ============ -->
          <div id="produto-ORIGINAL-${comp.id_tiny}" class="produto-item-modal" data-role="original">
            <div class="d-flex" style="display:flex; align-items:center; justify-content:space-between; gap:8px;">
              <div>
                <strong id="nome-${sku}">${comp.nome}</strong>
                <span id="sku-${sku}" class="badge">${sku}</span>
                <span id="tipo-${sku}" class="badge">Original</span>
              </div>
              <div class="small" style="font-size:.85rem; color:#6b7280;">
                Bipado: <strong id="bipado-${sku}">${totalBipadosOriginal}</strong> /
                Total: <strong id="total-${sku}">${comp.unidades_totais}</strong>
                (<span id="percent-${sku}">${porcento}</span>%)
              </div>
            </div>

            <!-- Barra de progresso -->
            <div id="progressWrap-${sku}" class="progress"
              style="height:10px; background:#e5e7eb; border-radius:6px; overflow:hidden; margin:8px 0;">
              <div id="progressFill-${sku}" class="progress-bar" role="progressbar"
                style="width:0%; background:#f59e0b; height:10px;" aria-valuenow="0" aria-valuemin="0"
                aria-valuemax="100"></div>
            </div>

            <!-- Controles de quantidade -->
            <div class="controls" style="display:flex; align-items:center; gap:8px;">
              <button id="menos-${sku}" class="btn btn-outline" onclick="removeUnEditarProduto('${sku}');" type="button">−</button>
              <input id="quantidade-${sku}" type="number" value="${totalBipadosOriginal}" min="0" step="1" style="width:100px;">
              <button id="mais-${sku}" class="btn btn-outline" onclick="addUnEditarProduto('${sku}');" type="button">+</button>

              <div class="ms-auto" style="margin-left:auto; font-size:.85rem; color:#6b7280;">
                Última ação: <strong id="status-${sku}">—</strong>
              </div>
            </div>
          </div>
          `;


  console.log('Req to DB | View EQUIVALENTES >', data);

  const fill = document.getElementById(`progressFill-${sku}`);
  fill.style.width = `${porcento}%`;
  fill.setAttribute('aria-valuenow', bipados);
  fill.setAttribute('aria-valuemax', comp.unidades_totais);



  data.equivalentes.forEach(p => {
    console.log('data,equivalentes <', p);

    const porcentoEquiv = comp.unidades_totais > 0 ? Math.min(100, Math.round((p.bipados / comp.unidades_totais) * 100)) : 0;

    listaProdutos.innerHTML += `
      <!-- ============ PRODUTO EQUIVALENTE ============ -->
      <div id="produto-EQV-${p.id_tiny_equivalente}" class="produto-item-modal" data-role="equivalente">
        <!-- lixeira no canto direito -->

        <div class="d-flex" style="display:flex; align-items:center; justify-content:space-between; gap:8px;">
          <div>
            <strong id="nome-${p.sku_bipado}">${p.nome_equivalente}</strong>
            <span id="sku-${p.sku_bipado}" class="badge">${p.sku_bipado}</span>
            <span id="tipo-${p.sku_bipado}" class="badge">Equivalente</span>
          </div>
          <div class="small" style="font-size:.85rem; color:#6b7280;">
            Bipado: <strong id="bipado-${p.sku_bipado}">${p.bipados}</strong> /
            Total: <strong id="total-${p.sku_bipado}">${comp.unidades_totais}</strong>
            (<span id="percent-${p.sku_bipado}">${porcentoEquiv}</span>%)
          </div>
        </div>

        <!-- Barra de progresso -->
        <div id="progressWrap-${p.sku_bipado}" class="progress"
          style="height:10px; background:#e5e7eb; border-radius:6px; overflow:hidden; margin:8px 0;">
          <div id="progressFill-${p.sku_bipado}" class="progress-bar" role="progressbar"
            style="width:0%; background:#3b82f6; height:10px;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
          </div>
        </div>

        <!-- Controles de quantidade -->
        <div class="controls" style="display:flex; align-items:center; gap:8px;">
          <button id="menos-${p.sku_bipado}" onclick="removeUnEditarProduto('${p.sku_bipado}');" type="button" class="btn btn-outline">−</button>
          <input id="quantidade-${p.sku_bipado}" type="number" value="${p.bipados}" min="0" step="1" style="width:100px;">
          <button id="mais-${p.sku_bipado}" onclick="addUnEditarProduto('${p.sku_bipado}');" type="button" class="btn btn-outline">+</button>


          <div class="last-action-wrap">
            <button id="excluir-${p.sku_bipado}" class="btn-icon"
                    aria-label="Excluir equivalente"
                    title="Excluir equivalente"
                    data-sku-original="${sku}"
                    data-sku-equivalente="${p.sku_bipado}"
                    onclick="excluirEquivalente(this)">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                <path d="M9 3h6a1 1 0 0 1 1 1v1h4v2H4V5h4V4a1 1 0 0 1 1-1Zm2 5h2v11h-2V8Zm-4 0h2v11H7V8Zm8 0h2v11h-2V8Z"/>
              </svg>
            </button>

            <span class="status">
              Última ação: <strong id="status-${p.sku_bipado}">—</strong>
            </span>
          </div>


        </div>
      </div>
            `;


    const fillEquiv = document.getElementById(`progressFill-${p.sku_bipado}`);
    fillEquiv.style.width = `${porcentoEquiv}%`;
    fillEquiv.setAttribute('aria-valuenow', p.bipados);
    fillEquiv.setAttribute('aria-valuemax', comp.unidades_totais);

  });

  // Mostra o modal
  document.getElementById('modal-editar-produto').style.display = 'block';

  // Evita o scroll de fundo (opcional)
  document.body.style.overflow = 'hidden';
}

function addUnEditarProduto(sku) {
  const input = document.getElementById(`quantidade-${sku}`);
  let value = Number(input.value)
  value++;
  let totalBipados = 0;
  const produtos = document.querySelectorAll('#listaProdutos [id^="produto-"]');
  const totalPermitido = Number(produtos[0].querySelector('[id^="total-"]').textContent.trim());
  console.log(produtos);

  produtos.forEach(prod => {
    const bipadoElement = prod.querySelector('[id^="quantidade-"]');

    if (bipadoElement) {
      const bipadoValue = Number(bipadoElement.value.trim());
      console.log(`Produto: Sla → Bipado: ${bipadoValue}`);
      totalBipados += bipadoValue;
    }
  });
  console.log('Total Existente:', totalBipados);
  console.log('Total Permitido', totalPermitido);

  if (++totalBipados <= totalPermitido) {
    input.value = value;
  } else {
    notify.error('Você não pode adicionar mais produtos do que o agendamento está pedindo.');
  }
}

function removeUnEditarProduto(sku) {
  const input = document.getElementById(`quantidade-${sku}`);
  let value = Number(input.value)
  value--;

  if (value >= 0) {
    input.value = value;
  } else {
    notify.error('Não é possível adicionar unidades negativas ao agendamento! \nPor favor, nem tente ;-)');
  }
}

async function salvarAlteracoes() {
  // Aqui, para otimizar a quantidade de requisições feitas ao banco 
  // Ele deve verificar o que houve mudanças, para isso, verifica se os valores são iguais 
  // ou seja, se bipados e a quantidade que está no input são iguais, se sim então ignora, caso contrário faz a alteração

  const confirmado = await salvarAlteracoesConfirmacaoGerente();
  const listaProdutos = document.querySelectorAll('#listaProdutos [id^="produto-"]');
  const listaEditados = [];

  for (let i = 0; i < listaProdutos.length; i++) {
    const bipadosOriginal = Number(listaProdutos[i].querySelector('[id^="bipado-"]').textContent.trim());
    // console.log(`Bipados de cada um #${i+1}>`, bipadosOriginal);
    const bipadosEditado = listaProdutos[i].querySelector('[id^="quantidade-"]').value;
    // console.log(`Bipados editado >`, bipadosEditado);

    if (Number(bipadosOriginal) !== Number(bipadosEditado)) {
      console.log(`Índice ${i} foi editado`);
      listaEditados.push(listaProdutos[i]);
    }
  }
  console.log('Estes foram editados >', listaEditados);

  console.log('listaProdutos >', listaProdutos);

  if (listaEditados.length > 0) {
    for (const prod of listaEditados) {
      console.log('>', prod);

      if (prod.id.includes("EQV")) {
        console.log('EQV');
        const input = prod.querySelector('[id^="quantidade-"]');
        const skuOriginal = document.getElementById('master-sku').textContent.trim();
        const skuBipado = input.id.replace("quantidade-", "");
        console.log('Esse é o SKU >', skuOriginal);


        const bipadosOriginal = Number(prod.querySelector('[id^="bipado-"]').textContent.trim());
        const bipadosEditado = prod.querySelector('[id^="quantidade-"]').value;
        const delta = bipadosEditado - bipadosOriginal;

        const payload = {
          id_agend: idAgend,
          sku_original: skuOriginal,
          sku_bipado: skuBipado,
          quant: delta
        }

        console.log('Este será o payload >', payload);

        console.log('Fazendo requisição');
        const req = await fetch('/api/equiv/add-unidades', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        const data = await req.json();

        console.log('Essa foi a resposta da requisição de edit >', data);
        if (data.ok) {
          notify.success(`Edição do produto: ${skuBipado}               \nRealizado com sucesso!`);
        } else {
          notify.success(`Ocorreu um erro ao editar o produto: ${skuBipado}               \n`);
          console.log('Erro >', data);
        }
      } else if (prod.id.includes("ORIGINAL")) {
        console.log('ORIGINAL');
        const skuOriginal = document.getElementById('master-sku').textContent.trim();
        const input = prod.querySelector(`[id^="quantidade-${skuOriginal}"]`);

        console.log('Esse é o SKU >', skuOriginal);
        console.log(`bipado-${skuOriginal}`);


        const bipadosOriginal = Number(document.getElementById(`bipado-${skuOriginal}`).textContent.trim());
        const bipadosEditado = document.getElementById(`quantidade-${skuOriginal}`).value;

        const delta = bipadosEditado - bipadosOriginal;
        console.log('Delta T>', delta);

        const payload = {
          id_agend: idAgend,
          sku: skuOriginal,
          quant: delta
        };
        console.log('Payload ORiginal >', payload);

        const req = await fetch('/api/bipar', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const data = await req.json();
        console.log('Data Resposta para o produto original >', data);

        if (data.ok) {
          notify.success(`Edição do produto original: ${skuOriginal}           \nRealizado com sucesso!`);
        } else {
          notify.success(`Ocorreu um erro ao editar o produto: ${skuOriginal}               \n`);
          console.log('Erro >', data);
        }
      }
    };
    fecharModal();
  } else {
    fecharModal();
    notify('Não houve nenhuma alteração no produto.');
  }
}

async function salvarAlteracoesConfirmacaoGerente() {
  
  return true
}

function fecharModal() {
  document.getElementById('modal-editar-produto').style.display = 'none';
  document.body.style.overflow = '';
}

// Fecha clicando fora
window.addEventListener('click', (e) => {
  const modal = document.getElementById('modal-editar-produto');
  if (e.target === modal) fecharModal();
});

// Fecha com ESC
window.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') fecharModal();
});
│  ├─ global.css
@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');


html {
    color-scheme: light;
}

body {
    font-family: 'Montserrat', sans-serif;
    background-color: #e9f1fb;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-user-drag: none;
}

.nav-item.dropdown:hover .dropdown-menu {
    display: block;
    margin-top: 0;
}

img {
    pointer-events: none;
    -webkit-user-drag: none;
    user-select: none;
}


│  └─ global.js
document.querySelectorAll('img').forEach(img => {
    img.setAttribute('draggable', 'false');
    img.addEventListener('dragstart', event => event.preventDefault());
});

document.addEventListener('dragstart', (event) => event.preventDefault());
document.addEventListener('selectstart', (event) => event.preventDefault());
document.addEventListener('copy', (event) => event.preventDefault());



├─ temp/
│  └─ ARQUIVOS AQUI SAO EXCLUIDOS
├─ template/
│  ├─ partials/
|  │  └─ form_editar_agendamento.html
<form id="form_alt" method="post" action="/alterar-agendamento">
    <div class="row g-3">
        <!-- <div class="col-md-6">
            <label for="inp_col" class="form-label">Nome do colaborador:</label>
            <input name="inp_col" id="inp_col" class="form-control" type="text" value="{{ dados.colaborador }}">
        </div> -->

        <input name="inp_ml" type="hidden" value="{{ dados.id_agend_ml }}">

        <div class="col-md-6">
            <label for="inp_mktp" class="form-label">Loja do agendamento:</label>
            <select name="inp_mktp" id="inp_mktp" class="form-control">
                <option value="4" {% if dados.id_mktp==4 %} selected {% endif %}>Amazon</option>
                <option value="2" {% if dados.id_mktp==2 %} selected {% endif %}>Magalu</option>
                <option value="1" {% if dados.id_mktp==1 %} selected {% endif %}>Mercado Livre</option>
                <option value="3" {% if dados.id_mktp==3 %} selected {% endif %}>Shopee</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_emp" class="form-label">Empresa do agendamento:</label>
            <select name="inp_emp" id="inp_emp" class="form-control">
                <option value="2" {% if dados.empresa==2 %} selected {% endif %}>Jaú Fishing</option>
                <option value="3" {% if dados.empresa==3 %} selected {% endif %}>L.T. Sports</option>
                <option value="1" {% if dados.empresa==1 %} selected {% endif %}>Jaú Pesca</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_tipo" class="form-label">Fase do agendamento:</label>
            <select name="inp_tipo" id="inp_tipo" class="form-control">
                <option value="1" {% if dados.id_tipo==1 %} selected {% endif %}>Limpeza</option>
                <option value="3" {% if dados.id_tipo==3 %} selected {% endif %}>Conferência</option>
                <option value="4" {% if dados.id_tipo==4 %} selected {% endif %}>Embalar</option>
                <option value="5" {% if dados.id_tipo==5 %} selected {% endif %}>Expedição</option>
                <option value="2" {% if dados.id_tipo==2 %} selected {% endif %}>Finalizado</option>
            </select>
        </div>
    </div>

    <input name="inp_id" type="hidden" value="{{ dados.id_bd }}">

    <div class="row mt-4">
        <div class="col">
            <input type="submit" class="btn btn-primary-custom w-100" value="Salvar Alterações"
                style="background: #0B5ED7; color: white">
        </div>
    </div>
</form>
│  ├─ agendamentos.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='agendamentos/agendamentos.css') }}
{% endblock %}

{% block content %}
<!-- Colaborador já logado -->
<input type="hidden" id="nome_colaborador" value="{{ session.nome_display_usuario }}">
<div class="container pt-4">

    <!-- 1) Botão “Filtros” — só aparece em telas < md -->
    <div class="d-md-none text-end mb-3">
        <button class="btn btn-outline-primary new-agend" type="button" data-bs-toggle="collapse"
            data-bs-target="#filterPanel" aria-expanded="false" aria-controls="filterPanel">
            <i class="bi bi-funnel-fill"></i> Filtros
        </button>
    </div>

    <!-- 2) Painel de filtros:
     - collapse esconde em mobile
     - d-md-block anula o collapse em ≥768px -->
    <div class="collapse d-md-block card mb-4 p-3" id="filterPanel">
        <div class="row g-3 row-cols-1 row-cols-sm-2 row-cols-md-4 new-agend mb-2">
            <div class="col">
                <label class="form-label">Status</label>
                <select id="inp_status_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todos</option>
                    <option value="1">Limpeza</option>
                    <option value="3">Conferência</option>
                    <option value="4">Embalar</option>
                    <option value="5">Expedição</option>
                    <option value="2">Finalizado</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Empresa</label>
                <select id="inp_emp_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todas</option>
                    <option value="0">Nenhuma</option>
                    <option value="1">Jaú Pesca</option>
                    <option value="2">Jaú Fishing</option>
                    <option value="3">L.T. Sports</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Loja</label>
                <select id="inp_mktp_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todas</option>
                    <option value="1">Mercado Livre</option>
                    <option value="2">Magalu</option>
                    <option value="3">Shopee</option>
                    <option value="4">Amazon</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Nº Pedido</label>
                <input id="inp_num_pedido" type="text" class="form-control" placeholder="Digite o número do pedido"
                    oninput="setFiltros()">
            </div>
        </div>
    </div>

    <!-- 
    <form action="/upload-excel" method="post" enctype="multipart/form-data">
        <input type="file" name="file"
            accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
        <input type="submit" value="Upload">
    </form>

    <br><br> -->

    <!-- Botão “Novo Agendamento” -->
    <a href="/agendamentos/criar" class="card add-new-agendamento mb-3 text-center text-decoration-none">
        <div class="card-body new-agend">
            <i class="bi bi-plus-circle me-2"></i> Novo Agendamento
        </div>
    </a>


    <div class="container p-1 list-scroll">
        {% for agendamento in dados %}
        <div class="card mb-3 agendamento-container emp-{{ agendamento.empresa }} tipo-{{ agendamento.id_tipo }} id-{{ agendamento.id_agend_ml }} id_mktp-{{ agendamento.id_mktp }}"
            data-centro="{{ agendamento.centro_distribuicao or '' }}">
            <div class="card-body d-block d-sm-flex justify-content-between align-items-center">
                <div>
                    <span class="badge
                        {% if agendamento.id_tipo == 1 %} status-limpeza
                        {% elif agendamento.id_tipo == 2 %} status-finalizado
                        {% elif agendamento.id_tipo == 3 %} status-conferencia
                        {% elif agendamento.id_tipo == 4 %} status-embalar
                        {% elif agendamento.id_tipo == 5 %} status-expedicao
                        {% else %} bg-dark
                        {% endif %}">
                        {% if agendamento.id_tipo == 1 %} LIMPEZA
                        {% elif agendamento.id_tipo == 2 %} FINALIZADO
                        {% elif agendamento.id_tipo == 3 %} CONFERÊNCIA
                        {% elif agendamento.id_tipo == 4 %} EMBALAR
                        {% elif agendamento.id_tipo == 5 %} EXPEDIÇÃO
                        {% else %} ERRO
                        {% endif %}
                    </span> |

                    <strong>Pedido:</strong> <span class="pedido-numero">{{ agendamento.id_agend_ml }}</span> |

                    {% if agendamento.empresa is none %}
                    <span class="text-primary">Nenhuma</span> |
                    {% else %}
                    <span class="badge
                        {% if agendamento.empresa == 0 %}empresa-nenhuma
                        {% elif agendamento.empresa == 1 %}empresa-jaupesca
                        {% elif agendamento.empresa == 2 %}empresa-jaufishing
                        {% elif agendamento.empresa == 3 %}empresa-ltsports
                        {% else %}bg-dark{% endif %}">
                        {% if agendamento.empresa == 0 %}
                        Nenhuma
                        {% elif agendamento.empresa == 1 %}
                        Jaú Pesca
                        {% elif agendamento.empresa == 2 %}
                        Jaú Fishing
                        {% elif agendamento.empresa == 3 %}
                        L.T. Sports
                        {% else %}
                        Erro
                        {% endif %}
                    </span> |
                    {% endif %}

                    {% if agendamento.id_mktp is none %}
                    <span class="text-primary">Nenhuma</span> |
                    {% else %}
                    <span class="badge
                        {% if agendamento.id_mktp == 1 %}id_mktp-mercadolivre
                        {% elif agendamento.id_mktp == 2 %}id_mktp-magalu
                        {% elif agendamento.id_mktp == 3 %}id_mktp-shopee
                        {% elif agendamento.id_mktp == 4 %}id_mktp-amazon
                        {% else %}bg-dark{% endif %}">
                        {% if agendamento.id_mktp == 1 %}
                        Mercado Livre
                        {% elif agendamento.id_mktp == 2 %}
                        Magalu
                        {% elif agendamento.id_mktp == 3 %}
                        Shopee
                        {% elif agendamento.id_mktp == 4 %}
                        Amazon
                        {% else %}
                        Erro
                        {% endif %}
                    </span> |
                    {% endif %}

                    <strong>Colaborador:</strong>
                    {% if agendamento.colaborador == '' %}
                    <span class="text-primary">Nenhum</span>
                    {% else %}
                    {% set my_list = agendamento.colaborador.split(' ') %}
                    {% if my_list|length >= 2 %}
                    <span class="text-primary">{{ my_list[0] }} {{ my_list[1][0] }}.</span>
                    {% else %}
                    <span class="text-primary">{{ my_list[0] }}</span>
                    {% endif %}
                    {% endif %}
                </div>

                <div class="d-flex flex-wrap justify-content-end flex-md-nowrap flex-md-row gap-2">

                    <!-- Botão excluir -->
                    <button class="btn btn-outline-danger btn-sm" onclick="iniciarExclusao('{{ agendamento.id_bd }}')"
                        title="Excluir Agendamento">
                        <i class="bi bi-eraser"></i>
                    </button>

                    <!-- Botão composição -->
                    <a class="btn btn-outline-secondary btn-sm" href="/imprimir-comp/{{ agendamento.id_bd }}"
                        title="Imprimir composição">
                        <i class="bi bi-box-seam"></i>
                    </a>

                    <!-- Botão visualizar -->
                    <a class="btn btn-outline-secondary btn-sm"
                        href="/retirado?id={{ agendamento.id_bd }}&tipo={{ agendamento.id_tipo }}&mudar=False"
                        title="Visualizar">
                        <i class="bi bi-eye"></i>
                    </a>

                    <!-- Botão editar -->
                    <button class="btn btn-outline-secondary btn-sm"
                        onclick="abrirModalAlteracoes('{{ agendamento.id_bd }}')" title="Editar">
                        <i class="bi bi-pencil"></i>
                    </button>

                    <!-- Botão atualizar-->
                    <button class="btn btn-outline-secondary btn-sm"
                        onclick="abrirModalAtualizarPDF('{{ agendamento.id_bd }}', '{{ agendamento.id_agend_ml }}')"
                        id="btn-modal--{{ agendamento.id_bd }}--" title="Atualizar PDF do Pedido">
                        <i class="bi bi-arrow-repeat"></i>
                    </button>


                    <!-- Botão iniciar -->
                    {% if agendamento.empresa == 0 and agendamento.colaborador == '' %}
                    <button type="button" id="btn-modal--{{ agendamento.id_bd }}--{{ agendamento.id_tipo }}"
                        class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalSelecionarEmpresa"
                        onclick="changeIdAgendamento(this)">
                        Começar
                    </button>
                    {% else %}
                    <button type="button" id="btn-modal--{{ agendamento.id_bd }}--{{ agendamento.id_tipo }}"
                        class="btn btn-primary btn-sm" onclick="continuePhase(this)">
                        Continuar
                    </button>
                    {% endif %}
                </div>

            </div>
        </div>

        {% endfor %}
    </div>

    <!-- Modal Selecionar Empresa -->
    <!-- MODAL 1: Selecionar empresa -->
    <div class="modal fade" id="modalSelecionarEmpresa" tabindex="-1" aria-labelledby="modalSelecionarEmpresaLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content text-center">
                <div class="modal-header justify-content-between">
                    <h5 class="modal-title" id="modalSelecionarEmpresaLabel">Selecione a empresa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <!-- <h5 class="fw-bold">Antes de colocar a empresa, confirme o número do agendamento</h5>

                    <div id="modal-emp-agend" class="bg-primary text-white py-2 mb-3 fw-bold rounded">
                    </div>

                    <p class="text-muted">Por favor selecione a empresa</p> -->

                    <select id="nome_empresa" class="form-select mb-3">
                        <option selected disabled>Selecione a empresa</option>
                        <option value=2>Jaú Fishing</option>
                        <option value=3>L.T. Sports</option>
                        <option value=1>Pesca Jaú</option>
                    </select>

                    <button class="btn btn-secondary" onclick="abrirModalMarketplace()">OK</button>

                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 2: Selecionar Marketplace -->
    <div class="modal fade" id="modalSelecionarMarketplace" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title">Selecione o Marketplace</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- <h5 class="fw-bold">Confirme o número do agendamento</h5>
                    <div id="modal-mktp-agend" class="bg-primary text-white py-2 mb-3 fw-bold rounded"></div> -->
                    <select id="nome_marketplace" class="form-select mb-3">
                        <option selected disabled>Selecione o Marketplace</option>
                        <option value=4>Amazon</option>
                        <option value=2>Magalu</option>
                        <option value=1>Mercado Livre</option>
                        <option value=3>Shopee</option>
                    </select>

                    <button class="btn btn-secondary" onclick="abrirModalAgendamento()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modalCentroDistribuicao" tabindex="-1" aria-labelledby="modalCentroDistribuicaoLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCentroDistribuicaoLabel">Escolher Centro de Distribuição</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <select id="nome_centro_distribuicao" class="form-select mb-3">
                        <option selected disabled>Selecione o centro</option>
                        <option value="BRSP11">Guarulhos – BRSP11</option>
                        <option value="BRRC02">Sumaré – BRRC02</option>
                        <option value="BRRC01">Perus – BRRC01</option>
                        <option value="BRSP10">SP10 – BRSP10</option>
                        <option value="SP06">Araçariguama – SP06</option>
                    </select>
                    <button class="btn btn-secondary" onclick="confirmarCentro()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 3: Tipo de Agendamento -->
    <div class="modal fade" id="modalTipoAgendamento" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title">Tipo de Agendamento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <select id="nome_tipo" class="form-select mb-3">
                        <option selected disabled>Selecione o agendamento</option>
                        <option value=1>Limpeza</option>
                        <option value=3>Conferência</option>
                        <option value=4>Embalar</option>
                        <option value=5>Expedição</option>
                    </select>
                    <button class="btn btn-secondary" onclick="abrirModalUpload()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 5: Upload (PDF ou Excel) -->
    <div class="modal fade" id="modalUploadPdf" tabindex="-1" aria-labelledby="modalUploadPdfLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header justify-content-between">
                    <h5 class="modal-title" id="modalUploadPdfLabel">Upload do Pedido</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted small" id="upload_help_text">Selecione o arquivo para upload:</p>
                    <div id="info-atualizacao-pdf" class="mb-2 text-start text-muted small" style="display: none;">
                    </div>
                    <form id="form_upload_pdf" action="/upload-pdf" method="POST" enctype="multipart/form-data">
                        <input type="file" name="path" accept="application/pdf" class="form-control mb-3" required>
                        <!-- hidden inputs preenchidos pelos modais anteriores -->
                        <input type="hidden" name="id_bd" id="upload_id_bd">
                        <input type="hidden" name="colaborador" id="upload_colaborador"
                            value="{{ session.nome_display_usuario }}">
                        <input type="hidden" name="empresa" id="upload_empresa">
                        <input type="hidden" name="marketplace" id="upload_marketplace">
                        <input type="hidden" name="centro_distribuicao" id="inp_centro_distribuicao">
                        <input type="hidden" name="tipo" id="upload_tipo">
                        <button type="submit" class="btn btn-primary w-100">Enviar PDF</button>
                    </form>
                </div>
            </div>
        </div>
    </div>



    <div class="modal fade" id="modalEditarAgendamento" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <div id="editarAgendamentoContent">Carregando...</div>
                </div>
            </div>
        </div>
    </div>

    <form id="form_retirado" action="/agendamentos/criar" method="POST" style="display: none;">
        <input type="text" id="inp_id_pedido" name="inp_id_pedido">
        <input type="text" id="inp_tipo_pedido" name="inp_tipo_pedido">
        <input type="text" id="inp_nome_emp" name="inp_nome_emp">
        <input type="text" id="inp_nome_col" name="inp_nome_col">
        <input type="text" id="inp_mktp_pedido" name="inp_mktp_pedido">
    </form>

    {% endblock %}

    {% block scriptpath %}
    {{ url_for('static', filename='agendamentos/agendamentos.js') }}
    {% endblock %}
│  ├─ alteracoes.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='alteracoes/alteracoes.css') }}
{% endblock %}

{% block content %}



<div class="container p-4">
    <div class="header-bar bg-primary text-white p-3 rounded mb-2">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Título sempre visível -->
            <h5 class="mb-0">Alterações</h5>
        </div>
    </div>
    <div class="card shadow-sm mb-4">
        <div class="card-body p-0">
            <div class="table-responsive" style="max-height:70vh; overflow-y:auto;">
                <table class="table table-hover mb-0 align-middle">
                    <thead>
                        <tr>
                            <th>ID Tiny</th>
                            <th>Produto</th>
                            <th>GTIN/EAN</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for composicao in dados %}
                        <tr>
                            <td data-label="ID Tiny">{{ composicao.id_tiny }}</td>
                            <td data-label="Produto">{{ composicao.comp_origem[0].nome }}</td>
                            <td data-label="GTIN/EAN">
                                {% if composicao.comp_origem[0].gtin %}
                                {{ composicao.comp_origem[0].gtin }}
                                {% else %}
                                <span class="text-muted fst-italic">não encontrado</span>
                                {% endif %}
                            </td>
                            <td data-label="Ações">
                                <a class="tiny-link"
                                    href="https://erp.tiny.com.br/produtos#edit/{{ composicao.id_tiny }}"
                                    target="_blank">
                                    <i class="bi bi-box-arrow-up-right"></i> Abrir no Tiny
                                </a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='alteracoes/alteracoes.js') }}
{% endblock %}
│  ├─ alterar_agendamento.html

│  ├─ base_template.html
│  ├─ compras.html
│  ├─ config.html
│  ├─ embalar.html
│  ├─ erro.html
│  ├─ erro_page.html
│  ├─ expedicao.html
│  ├─ imprimir_composicoes.html
│  ├─ index.html
│  ├─ limpeza.html
│  ├─ login.html
│  ├─ mostra_planilha.html
│  ├─ novoAgendamento.html
│  ├─ reservados.html
│  ├─ retiradoEstoque.html
│  ├─ teste.html
│  └─ view_excel.html
├─ uploads/
|  └─ UPLOADS DE PDF VEM AQUI
├─ .gitignore
├─ build.sh
├─ Dockerfile
├─ exceptions.py
├─ git
├─ main.py
├─ patch
└─ requirements.txt