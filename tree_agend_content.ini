agendamentos_web/
├─ classes/
│  ├─ controllers/
│  │  ├─ __init__.py
from .AgendamentoController import AgendamentoController
from .DatabaseController import DatabaseController
│  │  ├─ AgendamentoController.py
from classes.models import Agendamento, Produto, Composicao, JoinedComposicao, JoinedAgendamento
from classes.views import AgendamentoView
from classes.services import PdfService, SpreadsheetService
from .DatabaseController import DatabaseController
from datetime import datetime
import time
from base_jp_lab import Caller
from uuid import uuid4

class AgendamentoController:
    def __init__(self, db_controller:DatabaseController = None, caller_obj:Caller = None):
        self.agendamentos = []
        self.view = AgendamentoView()
        self.pdf_service = PdfService()
        self.csv_service = SpreadsheetService
        self.db_controller = db_controller
        self.caller = caller_obj

    #Busca nova chave Access Token
    #print(api_token_db(access_obj,))

    def insert_agendamento(self, id_bd:int = 0, id_agend_ml:str = '', id_tipo:int = 0, empresa:int = 0, id_mktp:int = 0, colaborador = '', entrada:datetime = None, centro_distribuicao:str = ''):
        self.agendamentos.append(Agendamento(id_bd, id_agend_ml, id_tipo, empresa, id_mktp, colaborador, entrada, centro_distribuicao))

    def insert_agendamento_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_agendamento_in_bd(agendamento.to_tuple())

    def search_agendamento(self, att_name:str = '', att_value:str = ''):
        return next((i for i in self.agendamentos if str(getattr(i, att_name)) == att_value), None)
    
    def insert_produto(self, agendamento:Agendamento = None,
                    id_bd:int = 0, 
                    id_tiny:str = '', 
                    id_ml:str = '', 
                    nome:str = '', 
                    sku:str = '', 
                    gtin:str = '', 
                    unidades:int = 0, 
                    estoque_error_flag:str = '',
                    imagem_url:str = ''):
        produto = Produto(id_agend=agendamento.id_bd, id_bd=id_bd, id_tiny=id_tiny, id_ml=id_ml, nome=nome, sku=sku, gtin=gtin, unidades=unidades, estoque_error_flag=estoque_error_flag, imagem_url=imagem_url) 
        agendamento.insert_produto(produto)

    def insert_produto_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_produto_in_bd(agendamento.return_produtos_in_tuple())

    def search_produto(self, agendamento:Agendamento, att_name:str = '', att_value:str = ''):
        return next((i for i in agendamento.produtos if str(getattr(i, att_name)) == att_value), None)

    def insert_composicao(self, produto:Produto = None, 
                        id_bd:int = 0, 
                        fk_id_prod:int = 0, 
                        nome:str = '', 
                        sku:str = '',
                        id_tiny:str = '',
                        gtin:str = '',
                        unidades_por_kit:int = 0,
                        unidades_de_kits:int = 0,
                        estoque_tiny:int = 0,
                        localizacao:str = '',
                        estoque_error_flag:str = ''):
        composicao = Composicao(id_bd=id_bd, fk_id_prod=fk_id_prod, nome=nome, sku=sku, prod_sku=produto.sku, id_tiny=id_tiny, gtin=gtin, prod_gtin=produto.gtin, unidades_por_kit=unidades_por_kit, unidades_de_kits=unidades_de_kits, estoque_tiny=estoque_tiny, localizacao=localizacao, estoque_error_flag=estoque_error_flag)
        produto.insert_composicao(composicao)

    def insert_composicao_in_bd(self, agendamento:Agendamento = None):
        self.db_controller.insert_composicao_in_bd(agendamento.return_all_composicoes_in_tuple())

    def insert_composicao_alteracao_in_bd(self, produto:Produto = None, comp_list_dict:list[dict] = []):
        comp_to_change = [produto.search_composicao('id_bd', i['id_bd']) for i in comp_list_dict]
        self.db_controller.insert_alteracao_in_bd([i.to_tuple_alteracao() for i in comp_to_change])

    def insert_composicao_compras_in_bd(self, produto:Produto = None, comp_list_dict:list[dict] = []):
        comp_to_change = [produto.search_composicao('id_bd', i['id_bd']) for i in comp_list_dict]
        self.db_controller.insert_compras_in_bd([i.to_tuple_compra() for i in comp_to_change])

    def search_composicao(self, produto:Produto, att_name:str = '', att_value:str = ''):
        return next((i for i in produto.composicoes if str(getattr(i, att_name)) == att_value), None)

    def create_agendamento_from_pdf(self, 
                                    pdf_path: str, 
                                    id_agend_ml: str, 
                                    id_tipo: int, 
                                    empresa: int, 
                                    id_mktp: int,
                                    colaborador: str,
                                    centro_distribuicao: None) -> Agendamento:
        """Create complete Agendamento with Produtos from PDF"""
        try:
            # Create base agendamento
            agendamento = Agendamento(
                id_agend_ml=id_agend_ml,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                centro_distribuicao=centro_distribuicao,
                colaborador=colaborador
            )
            
            # Parse PDF
            product_data_list = self.pdf_service.parse_pdf_to_dict(pdf_path)
            
            # Create products and add to agendamento
            for product_data in product_data_list:
                produto = Produto(
                    id_ml=product_data['id_ml'],
                    sku=product_data['sku'],
                    nome=product_data['nome'],
                    unidades=product_data['unidades'],
                    gtin=product_data['codigo_uni'],
                    etiqueta=product_data['etiqueta']
                )
                agendamento.insert_produto(produto)
                
                # For now assume simple products (no composition)
                # You would add composition logic here if needed
            
            self.agendamentos.append(agendamento)
            self.view.show_agendamento_created(agendamento)
            return agendamento
            
        except Exception as e:
            self.view.show_error(f"Failed to create agendamento: {str(e)}")
            raise
        
    
    def create_agendamento_from_excel(self,
                                  excel_path: str,
                                  id_tipo: int,
                                  empresa: int,
                                  id_mktp: int,
                                  colaborador: str,
                                  upload_uuid: str) -> Agendamento:
        """
        Cria um Agendamento com Produtos e Composições a partir de um arquivo
        (Excel ou CSV Magalu).
        """
        try:
            agendamento = Agendamento(
                id_agend_ml=upload_uuid,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                colaborador=colaborador
            )

            # Parse genérico (detecta extensão)
            rows = SpreadsheetService.parse_spreadsheet_to_dict(excel_path)
            for row in rows:
                # --- fluxo Excel (.xlsx/.xls) ---
                if 'sku_variacao' in row:
                    sku       = row['sku_variacao'] if row['sku_variacao'] != '-' else (row.get('sku_principal') or 'SKU não encontrado')
                    nome      = row.get('produto', '')
                    unidades  = int(row.get('unidades', 0))
                    id_ml     = str(row.get('item_id', ''))
                # --- fluxo CSV Magalu (.csv) ---
                elif 'sku' in row:
                    sku       = row['sku']
                    nome      = row.get('produto', '')
                    unidades  = int(row.get('unidades', 0))
                    id_ml     = ''
                else:
                    # linha inesperada: pula
                    continue

                produto = Produto(
                    id_ml     = id_ml,
                    nome      = nome,
                    sku       = sku,
                    unidades  = unidades
                )
                agendamento.insert_produto(produto)

            self.agendamentos.append(agendamento)
            self.view.show_agendamento_created(agendamento)
            return agendamento

        except Exception as e:
            self.view.show_error(f"Failed to create agendamento: {str(e)}")
            raise

    def create_agendamento_from_bd_data(self, agendamento:Agendamento = None):
        if agendamento is None:
            db_resp = self.db_controller.get_all_agendamentos()
            if type(db_resp) is tuple:
                # Este caso provavelmente não acontece, mas mantendo a lógica
                self.insert_agendamento(db_resp[0], db_resp[1], db_resp[2], db_resp[3], db_resp[4], db_resp[5], db_resp[7], db_resp[6])
            elif type(db_resp) is list:
                for tuple_data in db_resp:
                    # CORREÇÃO: Passando todos os parâmetros do banco de dados com os nomes corretos.
                    self.insert_agendamento(
                        id_bd=tuple_data[0],
                        id_agend_ml=tuple_data[1],
                        id_tipo=tuple_data[2],
                        empresa=tuple_data[3],
                        id_mktp=tuple_data[4],
                        colaborador=tuple_data[5],
                        centro_distribuicao=tuple_data[6],
                        entrada=tuple_data[7]
                    )
        else:
            db_resp = self.get_agendamento_by_id(agendamento)[0]
            agendamento.id_agend_ml = db_resp[1]
            agendamento.id_tipo = db_resp[2]
            agendamento.empresa = db_resp[3]
            agendamento.id_mktp = db_resp[4]
            agendamento.colaborador = db_resp[5]
            agendamento.centro_distribuicao = db_resp[6]
            entrada_db = db_resp[7] 
            if isinstance(entrada_db, str):
                try:
                    agendamento.entrada = datetime.strptime(entrada_db, '%Y-%m-%d %H:%M:%S')
                except (ValueError, TypeError):
                    agendamento.entrada = datetime.now()
            elif entrada_db is None: # Adiciona esta verificação
                agendamento.entrada = datetime.now()
            else:
                agendamento.entrada = entrada_db
            produtos = self.return_all_produtos_from_agendamento(agendamento)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9],
                                    imagem_url=prod_bd[10]
                                    )
                produto:Produto = agendamento.produtos[-1]
                composicoes = self.return_all_composicoes_from_produto(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        localizacao=comp_bd[9],
                                        estoque_error_flag=comp_bd[10])
                    
    def create_agendamento_for_alteracao(self):
        db_resp = self.db_controller.get_all_agendamentos_in_alteracoes()
        for resp in db_resp:
            self.insert_agendamento(resp[0], resp[1], resp[2], resp[3], resp[4], resp[5], resp[6])
            agendamento = self.get_last_made_agendamento()

            produtos = self.get_produtos_from_alteracoes(agendamento)
            print(produtos)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9]
                                    )
                produto:Produto = agendamento.produtos[-1]
                self.view.display_produto(produto)
                composicoes = self.get_composicao_from_alteracoes(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        estoque_error_flag=comp_bd[9])
                    
    def create_agendamento_for_compras(self):
        db_resp = self.db_controller.get_all_agendamentos_in_compras()
        for resp in db_resp:
            self.insert_agendamento(resp[0], resp[1], resp[2], resp[3], resp[4], resp[5], resp[6])
            agendamento = self.get_last_made_agendamento()

            produtos = self.get_produtos_from_compras(agendamento)
            for prod_bd in produtos:
                self.insert_produto(agendamento=agendamento, 
                                    id_bd=prod_bd[0],
                                    id_tiny=prod_bd[3],
                                    id_ml=prod_bd[2],
                                    nome=prod_bd[8],
                                    sku=prod_bd[4],
                                    gtin=prod_bd[5],
                                    unidades=prod_bd[6],
                                    estoque_error_flag=prod_bd[9]
                                    )
                produto:Produto = agendamento.produtos[-1]
                composicoes = self.get_composicao_from_compras(produto)
                for comp_bd in composicoes:
                    self.insert_composicao(produto=produto,
                                        id_bd=comp_bd[0],
                                        fk_id_prod=produto.id_bd,
                                        nome=comp_bd[5],
                                        sku=comp_bd[4],
                                        id_tiny=comp_bd[2],
                                        gtin=comp_bd[3],
                                        unidades_por_kit=comp_bd[6],
                                        unidades_de_kits=produto.unidades,
                                        estoque_tiny=comp_bd[8],
                                        estoque_error_flag=comp_bd[9])
                    
    def create_joined_agendamento(self):
        join_agend = JoinedAgendamento()
        for agendamento in self.agendamentos:
            join_agend.insert_agendamento(agendamento)
        join_agend.set_produtos()
        return join_agend
    
    def return_joined_composicoes_from_joined_agend(self, join_agend:JoinedAgendamento = None):
        return join_agend.return_comp_grouped()

    def set_empresa_colaborador_agend(self, agendamento:Agendamento, empresa:int = 0, colaborador:str = ''):
        agendamento.set_colaborador(colaborador)
        agendamento.set_empresa(empresa)
        
    def get_compras_data(self):
        return self.db_controller.get_composicoes_from_compras()

    def get_produtos_from_alteracoes(self, agendamento:Agendamento = None):
        return self.db_controller.get_produtos_from_alteracoes(agendamento.id_bd)

    def get_composicao_from_alteracoes(self, produto:Produto = None):
        return self.db_controller.get_composicao_from_alteracoes(produto.id_bd)

    def get_produtos_from_compras(self, agendamento:Agendamento = None):
        return self.db_controller.get_produtos_from_compras(agendamento.id_bd)

    def get_composicao_from_compras(self, produto:Produto = None):
        return self.db_controller.get_composicao_from_compras(produto.id_bd)

    def get_last_made_agendamento(self) -> Agendamento:
        return self.agendamentos[-1]
    
    def get_last_made_agendamento_in_bd(self):
        return self.db_controller.get_last_agendamento()

    def get_agendamento_by_id(self, agendamento:Agendamento = None):
        return self.db_controller.get_agendamento_by_bd_id(agendamento.id_bd)

    def get_prod_data_tiny(self, agendamento:Agendamento = None):
        for produto in agendamento.produtos:
            # Faz a chamada à API
            resp = self.caller.make_call('produtos', params_add={'codigo': produto.sku})
            time.sleep(1.25)

            # --- CORREÇÃO INÍCIO ---
            # Verifica se a resposta é um dicionário e se contém a chave 'itens'
            if isinstance(resp, dict) and 'itens' in resp:
                itens = resp['itens']
                if len(itens) == 1 : 
                    produto.set_gtin(itens[0].get('gtin'))
                    produto.set_id_tiny(itens[0].get('id'))
                    produto.set_is_kit(itens[0].get('tipo'))
                elif len(itens) > 1:
                    item_ativo = next((i for i in itens if i.get('situacao') == 'A'), None)
                    if item_ativo is not None:
                        produto.set_gtin(item_ativo.get('gtin'))
                        produto.set_id_tiny(item_ativo.get('id'))
                        produto.set_is_kit(item_ativo.get('tipo'))
            else:
                # Se a chamada falhou, loga um aviso e continua para o próximo produto
                print(f"AVISO: Falha ao buscar dados do produto com SKU {produto.sku} no Tiny. Resposta: {resp}")
            # --- CORREÇÃO FIM ---


    def get_comp_tiny(self, agendamento:Agendamento = None):
        for produto in agendamento.produtos:
            if produto.is_kit:
                resp = self.caller.make_call(f'produtos/{produto.id_tiny}/kit')
                time.sleep(1.25)
                for r_comp in resp:
                    self.insert_composicao(produto, fk_id_prod=produto.id_bd, nome=r_comp['produto']['descricao'], sku=r_comp['produto']['sku'], id_tiny=r_comp['produto']['id'], unidades_por_kit=r_comp['quantidade'], unidades_de_kits=produto.unidades)
            else:
                self.insert_composicao(produto, 0, produto.id_bd, produto.nome, produto.sku, produto.id_tiny, produto.gtin, 1, produto.unidades, 0, '')


    def get_comp_data_tiny(self, agendamento:Agendamento = None):
        composicoes_dict = self.get_all_composicoes_grouped(agendamento)
        for id_tiny in composicoes_dict:
            resp = self.caller.make_call(f'produtos/{id_tiny}')
            time.sleep(1.25)
            
            # --- CORREÇÃO INÍCIO ---
            # Verifica se a resposta da API foi bem-sucedida (é um dicionário)
            if not isinstance(resp, dict):
                print(f"AVISO: Falha ao buscar dados da composição com id_tiny {id_tiny}. Resposta: {resp}")
                # Pula para a próxima iteração do loop
                continue

            gtin_value = resp.get('gtin')
            estoque_info = resp.get('estoque')

            # Aplica os valores para todas as composições com o mesmo id_tiny
            for composicao in composicoes_dict[id_tiny]:
                composicao.set_gtin(gtin_value if gtin_value is not None else '')

                if estoque_info:
                    composicao.set_estoque_tiny(estoque_info.get('quantidade', 0))
                    composicao.set_localizacao(estoque_info.get('localizacao', ''))
                else:
                    composicao.set_estoque_tiny(0)
                    composicao.set_localizacao('Indefinido')
            # --- CORREÇÃO FIM ---

    def set_id_bd_for_all(self, agendamento:Agendamento = None, last_id_agend:int = 0):
        agendamento.set_id_bd(last_id_agend)
        agendamento.set_id_agend_for_produtos()

    def get_all_composicoes_grouped(self, agendamento:Agendamento = None) -> dict:
        composicoes_dict = {}
        
        for produto in agendamento.produtos:
            for composicao in produto.composicoes:
                key = composicao.id_tiny
                
                if key in composicoes_dict:
                    composicoes_dict[key].append(composicao)
                else:
                    composicoes_dict[key] = [composicao]
        
        return composicoes_dict
    
    def return_all_produtos_from_agendamento(self, agendamento:Agendamento = None):\
        return self.db_controller.get_all_produtos_from_agendamento(agendamento.id_bd)

    def return_all_composicoes_from_produto(self, produto:Produto = None):
        return self.db_controller.get_all_composicoes_from_produto(produto.id_bd)

    def return_comp_grouped(self, agendamento:Agendamento = None) -> list[Composicao]:
        composicoes_dict = {}
        
        for produto in agendamento.produtos:
            for composicao in produto.composicoes:
                # Usando SKU como chave para agrupamento (pode ser id_tiny ou outro campo único)
                key = composicao.sku
                
                if key in composicoes_dict:
                    # Se já existe, soma as unidades
                    existing = composicoes_dict[key]
                    existing.unidades_totais += composicao.unidades_totais
                    existing.insert_comp_origem(composicao)
                    existing.insert_produto_origem(produto)
                else:
                    # Se não existe, adiciona ao dicionário
                    composicoes_dict[key] = JoinedComposicao(composicao.sku, composicao.id_tiny, composicao.estoque_tiny)
                    composicoes_dict[key].unidades_totais += composicao.unidades_totais
                    composicoes_dict[key].insert_comp_origem(composicao)
                    composicoes_dict[key].insert_produto_origem(produto)
        
        return list(composicoes_dict.values())
    
    def set_error_flags_composicoes(self, agendamento:Agendamento = None):
        comp_list:list[Composicao] = self.return_comp_grouped(agendamento)
        for i in comp_list:
            i.set_flag_in_joined_comp()
        for i in agendamento.produtos:
            i.set_estoque_error_flag()

    def update_empresa_colaborador_bd(self, agendamento:Agendamento = None):
        self.db_controller.update_empresa_colaborador_agend(agendamento.id_bd, agendamento.empresa, agendamento.colaborador)
    

    def update_agendamento(self, agendamento:Agendamento = None):
        self.db_controller.update_agendamento(agendamento.id_bd, agendamento.id_agend_ml, agendamento.id_tipo, agendamento.empresa, agendamento.id_mktp, agendamento.colaborador, agendamento.centro_distribuicao)

    def update_quant_compra(self, id_comp:int = 0, quant:int = 0):
        self.db_controller.update_quant_total_compras(id_comp, quant)
        self.db_controller.clean_compras(id_comp)

    def return_agend_in_dict(self, agendamento:Agendamento = None):
        return agendamento.to_dict()
    
    def return_produtos_agend_in_dict(self, agendamento:Agendamento = None):
        return [i.to_dict() for i in agendamento.produtos]
    
    def return_comp_produtos_in_dict(self, produto:Produto = None):
        return [i.to_dict() for i in produto.composicoes]
    
    def return_comp_produtos_in_dict_for_api(self, produto:Produto = None, attrs:list = []):
        return [i.to_dict_for_api(attrs) for i in produto.composicoes]
    
    def return_all_in_dict(self, agendamento:Agendamento = None):
        temp_dict = self.return_agend_in_dict(agendamento)
        temp_dict['produtos'] = self.return_produtos_agend_in_dict(agendamento)
        for produto in temp_dict['produtos']:
            produto['composicao'] = self.return_comp_produtos_in_dict(self.search_produto(agendamento, 'id_bd', str(produto['id_bd'])))
        return temp_dict
    
    def return_joined_agend_in_dict(self, joined_agend:JoinedAgendamento = None):
        joined_agend_list = []
        for agendamento in joined_agend.agend_origem:
            joined_agend_list.append(self.return_all_in_dict(agendamento))
        return joined_agend_list
    
    def return_agend_in_tuple(self, agendamento:Agendamento = None):
        return agendamento.to_tuple()
    
    def return_produtos_agend_in_tuple(self, agendamento:Agendamento = None):
        return [i.to_tuple() for i in agendamento.produtos]
    
    def return_comp_produtos_in_tuple(self, produto:Produto = None):
        return [i.to_tuple() for i in produto.composicoes]
    
    def return_all_composicoes_to_tuple(self, agendamento:Agendamento = None):
        temp_list = []
        for produto in agendamento.produtos:
            temp_list += produto.return_composicao_in_tuple()
        return temp_list
    
    def return_composicoes_to_alteracao(self, comp_list:list[Composicao] = []):
        return [i.to_tuple_alteracao() for i in comp_list]

    def clear_agendamentos(self):
        self.agendamentos = []

    def test_connection(self):
        return self.db_controller.test_connection()
    
    
    def update_pdf_agendamento(self, id_bd: int, colaborador: str, empresa: int, id_mktp: int, id_tipo: int, pdf_path: str, new_id_agend_ml: str, centro_distribuicao: None):
        try:
            # 1) carrega todos os agendamentos do DB em memória
            self.create_agendamento_from_bd_data()
            agendamento = self.search_agendamento("id_bd", str(id_bd))
            if not agendamento:
                return False, f"Agendamento com id_bd={id_bd} não encontrado."

            # --- INÍCIO DA CORREÇÃO ---
            # Guarda o centro de distribuição original antes de qualquer modificação
            centro_original = agendamento.centro_distribuicao
            # --- FIM DA CORREÇÃO ---

            # 2) atualiza meta-dados em memória, incluindo o novo número do pedido
            agendamento.id_agend_ml = new_id_agend_ml
            agendamento.set_colaborador(colaborador)
            agendamento.set_empresa(empresa)
            agendamento.set_mktp(id_mktp)
            agendamento.set_tipo(id_tipo)
            # --- CORREÇÃO ---
            # Usa o valor original que acabamos de guardar
            agendamento.set_centro(centro_original)

            # 3) limpa produtos e composições antigas do banco
            self.db_controller.delete_composicoes_by_agendamento(id_bd)
            self.db_controller.delete_produtos_by_agendamento(id_bd)

            # 4) reprocessa o PDF usando o novo id_agend_ml
            self.create_agendamento_from_pdf(
                pdf_path=pdf_path,
                id_agend_ml=new_id_agend_ml,
                id_tipo=id_tipo,
                empresa=empresa,
                id_mktp=id_mktp,
                # --- CORREÇÃO ---
                # Passa o valor original para o novo agendamento que será criado
                centro_distribuicao=centro_original,
                colaborador=colaborador
            )
            novo = self.agendamentos[-1]
            # mantém o mesmo id_bd
            self.set_id_bd_for_all(novo, id_bd)

            # 5) refaz integração com Tiny e reinserção no banco
            self.get_prod_data_tiny(novo)
            self.get_comp_tiny(novo)
            self.get_comp_data_tiny(novo)
            self.insert_produto_in_bd(novo)
            for tpl in self.return_all_produtos_from_agendamento(novo):
                produto = self.search_produto(novo, 'etiqueta', tpl[2])
                if produto:
                    produto.set_id_bd(tpl[0])
                    produto.set_id_bd_for_composicoes()
            self.set_error_flags_composicoes(novo)
            self.insert_composicao_in_bd(novo)

            # 6) finalmente atualiza o registro de agendamento com o novo número
            self.db_controller.update_agendamento(
                id_agend_bd=novo.id_bd,
                id_agend_ml=novo.id_agend_ml,
                id_agend_tipo=novo.id_tipo,
                empresa=novo.empresa,
                id_mktp=novo.id_mktp,
                colaborador=novo.colaborador,
                # --- CORREÇÃO ---
                # Garante que o valor final salvo no banco é o correto
                centro_distribuicao=novo.centro_distribuicao
            )

            return True, "Atualizado com sucesso."

        except Exception as e:
            return False, f"Erro ao atualizar agendamento: {str(e)}"


    def insert_agendamento_in_bd(self, agendamento: Agendamento):
        if self.db_controller.exists_agendamento_ml(agendamento.id_agend_ml):
            self.view.show_error(f"Já existe um agendamento com o número {agendamento.id_agend_ml}.")
            return False
        self.db_controller.insert_agendamento_in_bd(agendamento.to_tuple())
        return True

    def get_product_image_url(self, sku: str) -> str:
        """
        Busca a URL da imagem de um produto no Tiny a partir do SKU.
        Retorna uma string vazia se não encontrar.
        """
        imagem_url = ""
        if not sku:
            return imagem_url
            
        try:
            # Etapa 1: Buscar o ID do produto pelo SKU, considerando apenas produtos ativos
            params = {'codigo': sku, 'situacao': 'A'}
            resp_sku = self.caller.make_call("produtos", params_add=params)
            time.sleep(1.25)

            if resp_sku.get('itens') and len(resp_sku['itens']) > 0:
                id_tiny = resp_sku['itens'][0].get('id')
                
                if id_tiny:
                    # Etapa 2: Buscar os detalhes do produto pelo ID
                    resp_details = self.caller.make_call(f"produtos/{id_tiny}")
                    time.sleep(1.25)
                    
                    # Etapa 3: Extrair a URL do primeiro anexo, se existir
                    if resp_details.get('anexos') and len(resp_details['anexos']) > 0:
                        imagem_url = resp_details['anexos'][0].get('url', "")
        except Exception as e:
            # Em um ambiente de produção, seria ideal logar este erro
            print(f"CONTROLADOR: Erro ao buscar imagem para o SKU {sku}: {e}")
            return "" # Retorna vazio em caso de qualquer erro
            
        return imagem_url

    def excluir_agendamento_completo(self, id_agend_bd: int) -> bool:
        """
        Orquestra a exclusão de um agendamento e todos os seus dados relacionados.
        """
        try:
            self.db_controller.delete_agendamento_completo(id_agend_bd)
            return True
        except Exception as e:
            print(f"Erro ao excluir agendamento completo (ID: {id_agend_bd}): {e}")
            return False
│  │  └─ DatabaseController.py
from base_jp_lab import Access

class DatabaseController:
    def __init__(self, access_obj:Access = None):
        self.access = access_obj

    def get_all_agendamentos(self):
        return self.access.custom_select_query("SELECT * FROM agendamento")
    
    def get_agendamento_by_bd_id(self, id_agend_bd:int = 0):
        return self.access.custom_select_query("SELECT * FROM agendamento WHERE id_agend = %s", (id_agend_bd,))
        
    def insert_agendamento_in_bd(self, agendamento_tuple:tuple = ()):
        self.access.custom_i_u_query(
        "INSERT INTO agendamento (id_agend_ml, id_tipo_agend, empresa_agend, id_mktp, colaborador_agend, centro_distribuicao, entrada_agend) VALUES (%s, %s, %s, %s, %s, %s, %s);",
        [agendamento_tuple])

    def insert_produto_in_bd(self, produtos:list[tuple] = []):
        self.access.custom_i_u_query("INSERT INTO produtos_agend (id_agend_prod, id_prod_ml, id_prod_tiny, sku_prod, gtin_prod, unidades_prod, e_kit_prod, nome_prod, estoque_flag_prod, imagem_url_prod) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", produtos)

    def insert_composicao_in_bd(self, composicoes:list[tuple] = []):
        self.access.custom_i_u_query("INSERT INTO comp_agend (id_prod_comp, id_comp_tiny, gtin_comp, sku_comp, nome_comp, unidades_por_kit_comp, unidades_totais_comp, estoque_tiny_comp, localizacao_comp, estoque_flag_comp, imagem_url_comp) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", composicoes)

    def insert_alteracao_in_bd(self, composicoes:list[tuple] = []):
        print(composicoes)
        self.access.custom_i_u_query("INSERT IGNORE INTO alteracoes_agend (id_comp_alt, id_prod_alt, id_tiny, gtin_alt, sku_alt, nome_alt) VALUES (%s, %s, %s, %s, %s, %s);", composicoes)

    def insert_compras_in_bd(self, composicoes:list[tuple] = []):
        print(composicoes)
        self.access.custom_i_u_query("INSERT INTO compras_agend (id_comp_compra, id_prod_compra, id_tiny, gtin_compra, sku_compra, nome_compra, quant_comprar) VALUES (%s, %s, %s, %s, %s, %s, %s) ON DUPLICATE KEY UPDATE quant_comprar = (quant_comprar + VALUES(quant_comprar));", composicoes)

    def update_empresa_colaborador_agend(self, id_agend_bd:int = 0, id_mktp:int = 0, empresa:int = 0, colaborador:str = ''):
        self.access.custom_i_u_query("UPDATE agendamento SET empresa_agend = %s, id_mktp = %s, colaborador_agend = %s WHERE id_agend = %s;", [(empresa, id_mktp, colaborador, id_agend_bd)])

    def update_agendamento(self, id_agend_bd:int = 0, id_agend_ml:str = '', id_agend_tipo:int = 0, empresa:int = 0, id_mktp:int = 0, colaborador:str = '', centro_distribuicao:str = ''):
        self.access.custom_i_u_query(
            "UPDATE agendamento SET id_agend_ml = %s, id_tipo_agend = %s, empresa_agend = %s, id_mktp = %s, colaborador_agend = %s, centro_distribuicao = %s WHERE id_agend = %s;",
            (id_agend_ml, id_agend_tipo, empresa, id_mktp, colaborador, centro_distribuicao, id_agend_bd)
        )

    def update_quant_total_compras(self, id_comp:int = 0, quant:id = 0):
        self.access.custom_i_u_query("UPDATE compras_agend SET quant_comprar = quant_comprar - %s WHERE id_compra = %s;", [(quant, id_comp)])

    def clean_compras(self, id_comp:int = 0):
        self.access.custom_i_u_query("DELETE FROM compras_agend WHERE id_compra = %s AND quant_comprar <= 0;", [(id_comp,)])

    # ADICIONAR CONDIÇÃO PARA CASO NADA SEJA ENCONTRADO

    def get_last_agendamento(self):
        return self.access.custom_select_query("SELECT * FROM agendamento ORDER BY id_agend DESC LIMIT 1;")[0]
    
    def get_last_produto(self):
        return self.access.custom_select_query("SELECT * FROM produtos_agend ORDER BY id_prod DESC LIMIT 1;")[0]
    
    def get_last_composicao(self):
        return self.access.custom_select_query("SELECT * FROM comp_agend ORDER BY id_comp DESC LIMIT 1;")[0]
    
    def get_all_produtos_from_agendamento(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT * FROM produtos_agend WHERE id_agend_prod = %s;", (id_agendamento,))
    
    def get_all_composicoes_from_produto(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT * FROM comp_agend WHERE id_prod_comp = %s;", (id_produto,))
    
    def get_all_agendamentos_in_alteracoes(self):
        return self.access.custom_select_query("SELECT DISTINCT a.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend;")
    
    def get_produtos_from_alteracoes(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT p.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend\
                                                 WHERE a.id_agend = %s;", (id_agendamento,))
    
    def get_composicao_from_alteracoes(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT c.*\
                                                 FROM alteracoes_agend al\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 JOIN comp_agend c\
                                                 ON al.id_prod_alt = p.id_prod AND p.id_agend_prod = a.id_agend AND al.id_comp_alt = c.id_comp\
                                                 WHERE p.id_prod = %s;", (id_produto,))
    
    def get_all_agendamentos_in_compras(self):
        return self.access.custom_select_query("SELECT DISTINCT a.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend;")
    
    def get_produtos_from_compras(self, id_agendamento:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT p.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend\
                                                 WHERE a.id_agend = %s;", (id_agendamento,))
    
    def get_composicao_from_compras(self, id_produto:int = 0):
        return self.access.custom_select_query("SELECT DISTINCT c.*\
                                                 FROM compras_agend ca\
                                                 JOIN produtos_agend p\
                                                 JOIN agendamento a\
                                                 JOIN comp_agend c\
                                                 ON ca.id_prod_compra = p.id_prod AND p.id_agend_prod = a.id_agend AND ca.id_comp_compra = c.id_comp\
                                                 WHERE p.id_prod = %s;", (id_produto,))
        
    def get_composicoes_from_compras(self):
        return self.access.custom_select_query("SELECT * FROM compras_agend;")
    
    def insert_excel_upload(self, upload_tuple: tuple):
        """Insere um registro de upload de Excel"""
        self.access.custom_i_u_query(
            "INSERT INTO excel_uploads (uuid, filename) VALUES (%s, %s);",
            [upload_tuple]
        )

    def get_excel_upload(self, uuid: str):
        """Busca um registro de upload pelo uuid"""
        return self.access.custom_select_query(
            "SELECT * FROM excel_uploads WHERE uuid = %s;", (uuid,)
        )[0]

    
    def test_connection(self):
        return self.access
    
    def delete_composicoes_by_agendamento(self, id_agendamento: int):
        return self.access.custom_i_u_query(
            """
            DELETE FROM comp_agend 
            WHERE id_prod_comp IN (
                SELECT id_prod 
                FROM produtos_agend 
                WHERE id_agend_prod = %s
            );
            """, [(id_agendamento,)]
        )

    def delete_produtos_by_agendamento(self, id_agendamento: int):
        return self.access.custom_i_u_query(
            "DELETE FROM produtos_agend WHERE id_agend_prod = %s;", [(id_agendamento,)]
        )
        
    def exists_agendamento_ml(self, ml_id: str) -> bool:
        sql = f"SELECT 1 FROM agendamento WHERE id_agend_ml = '{ml_id}'"
        return bool(self.access.custom_select_query(sql))

    def delete_agendamento_completo(self, id_agend_bd: int):
        """
        Executa a exclusão em cascata de um agendamento e todos os seus dados associados.
        A ordem das queries é fundamental para respeitar as chaves estrangeiras.
        """
        
        # Pega o id_agend_ml antes de excluir, para limpar tabelas que usam ele
        id_ml_result = self.access.custom_select_query("SELECT id_agend_ml FROM agendamento WHERE id_agend = %s;", (id_agend_bd,))
        id_agend_ml = id_ml_result[0][0] if id_ml_result else None

        # Lista de produtos associados ao agendamento
        produtos_result = self.access.custom_select_query("SELECT id_prod FROM produtos_agend WHERE id_agend_prod = %s;", (id_agend_bd,))
        id_produtos = tuple([row[0] for row in produtos_result])

        # --- INÍCIO DA CORREÇÃO ---
        if id_produtos:
            # Cria a string de placeholders, ex: "(%s, %s, %s)"
            placeholders = ', '.join(['%s'] * len(id_produtos))

            # 1. Limpa tabelas de logs/tracking usando a nova query formatada
            query_alteracoes = f"DELETE FROM alteracoes_agend WHERE id_prod_alt IN ({placeholders})"
            # O método custom_i_u_query espera uma lista de tuplas, então passamos [id_produtos]
            self.access.custom_i_u_query(query_alteracoes, [id_produtos])

            query_compras = f"DELETE FROM compras_agend WHERE id_prod_compra IN ({placeholders})"
            self.access.custom_i_u_query(query_compras, [id_produtos])
            
            # 2. Limpa as composições dos produtos
            query_composicoes = f"DELETE FROM comp_agend WHERE id_prod_comp IN ({placeholders})"
            self.access.custom_i_u_query(query_composicoes, [id_produtos])

            # 4. Limpa os produtos do agendamento (este DELETE estava correto, mas movemos para o final do bloco)
            self.access.custom_i_u_query("DELETE FROM produtos_agend WHERE id_agend_prod = %s;", [(id_agend_bd,)])
        # --- FIM DA CORREÇÃO ---


        if id_agend_ml:
            # 3. Limpa tabelas que usam o id_agend_ml (esta parte já estava correta)
            self.access.custom_i_u_query("DELETE FROM agendamento_produto_bipagem WHERE id_agend_ml = %s;", [(id_agend_ml,)])
            self.access.custom_i_u_query("DELETE FROM relatorio_agend WHERE id_agend_ml = %s;", [(id_agend_ml,)])
        
        # 5. Finalmente, exclui o agendamento principal (esta parte já estava correta)
        self.access.custom_i_u_query("DELETE FROM agendamento WHERE id_agend = %s;", [(id_agend_bd,)])
        
        return True
    
    def get_caixas_by_agendamento_ml(self, id_agend_ml: str) -> list:
        """
        Busca todas as caixas e seus respectivos itens para um determinado agendamento.
        Retorna uma lista de dicionários, onde cada dicionário representa uma caixa.
        """
        # Primeiro, busca todas as caixas do agendamento
        query_caixas = "SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml = %s ORDER BY caixa_num"
        caixas_result = self.access.custom_select_query(query_caixas, (id_agend_ml,))
        
        # Converte a lista de tuplas para uma lista simples de números de caixa
        numeros_caixas = [row[0] for row in caixas_result]
        
        resultado_final = []
        if not numeros_caixas:
            return resultado_final

        # Para cada caixa, busca seus itens
        for num in numeros_caixas:
            query_itens = """
                SELECT sku, quantidade 
                FROM embalagem_caixa_itens 
                WHERE id_agend_ml = %s AND caixa_num = %s
            """
            itens_result = self.access.custom_select_query(query_itens, (id_agend_ml, num))
            
            itens_da_caixa = [
                {"sku": item[0], "quantidade": item[1]} for item in itens_result
            ]
            
            resultado_final.append({
                "caixa_num": num,
                "itens": itens_da_caixa
            })
            
        return resultado_final
│  ├─ models/
│  │  ├─ __init__.py
from .AgendamentoModel import Agendamento
from .ProdutoModel import Produto
from .ComposicaoModel import Composicao
from .JoinedComposicaoModel import JoinedComposicao
from .DatabaseModel import Database
from .JoinedAgendamentoModel import JoinedAgendamento
│  │  ├─ AgendamentoModel.py
# agendamentos_web/classes/models/AgendamentoModel.py

from .ProdutoModel import Produto
from datetime import datetime

class Agendamento:
    """ Classe feita para gerenciar os dados de um agendamento """
    def __init__(self, 
                 id_bd:int = 0, 
                 id_agend_ml:str = '', 
                 id_tipo:int = 0,
                 empresa:int = 0,
                 id_mktp:int = 0,
                 colaborador = '',
                 entrada:datetime = datetime.now(),
                 centro_distribuicao: str = ''):
        """
        Instancia um objeto da classe Agendamento

        Args
        -----------    
            id_bd (int): ID da composição no Banco de dados.
            id_agend_ml (str): ID do agendamento no ML.
            id_tipo (int): ID do tipo do agendamento.
            empresa (int): ID da empresa do agendamento.
            colaborador (str): Nome do colaborador.

        Vars
        -----------
            produtos (list[Produto]): Lista com todos os produtos do agendamento.
        """
        self.id_bd = id_bd
        self.id_agend_ml = id_agend_ml
        self.id_tipo = id_tipo
        self.empresa = empresa
        self.id_mktp = id_mktp
        self.colaborador = colaborador
        self.centro_distribuicao = centro_distribuicao
        if isinstance(entrada, str):
            try:
                # Tenta converter a string para datetime (ajuste o formato se o do seu BD for diferente)
                self.entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M:%S')
            except (ValueError, TypeError):
                # Se a conversão falhar, usa a data/hora atual como fallback.
                self.entrada = datetime.now()
        elif entrada is None:
            # Se a entrada for None (valor padrão ou do BD), usa a data/hora atual.
            self.entrada = datetime.now()
        else:
            # Se já for um objeto datetime, apenas o atribui.
            self.entrada = entrada


        self.produtos:list[Produto] = []

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"Agendamento\
                \n\tID BD: {self.id_bd}\
                \n\tID agendamento: {self.id_agend_ml}\
                \n\tID tipo: {self.id_tipo}"

    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "id_agend_ml": self.id_agend_ml,
            "id_tipo": self.id_tipo,
            "empresa": self.empresa,
            "id_mktp": self.id_mktp,
            "colaborador": self.colaborador,
            "entrada_agend": self.entrada,
            "produtos": []
        }
    
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.id_agend_ml,
            self.id_tipo,
            self.empresa,
            self.id_mktp,
            self.colaborador,
            self.centro_distribuicao,
            self.entrada
        )

    def insert_produto(self, produto_obj:Produto = None):
        """ Insere um produto ao agendamento """
        self.produtos.append(produto_obj)

    def search_produto(self, att_name:str = '', att_value:str = ''):
        """ Busca por um produto baseado em um atributo e um valor """
        return next((i for i in self.produtos if getattr(i, att_name) == att_value), None)
    
    def set_id_bd(self, id_bd:int = 0):
        """ Insere o id do agendamento """
        self.id_bd = id_bd

    def set_colaborador(self, colaborador:str = ''):
        """ Insere o colaborador do agendamento """
        self.colaborador = colaborador

    def set_empresa(self, empresa:int = 0):
        """ Insere o id da empresa do agendamento """
        self.empresa = empresa
        
    def set_mktp(self, id_mktp:int = 0):
        """ Insere o id da empresa do agendamento """
        self.id_mktp = id_mktp
        
    def set_id_agend_for_produtos(self):
        """ Insere o id do agendamento a todos os produtos dentro dele """
        for produto in self.produtos:
            produto.set_id_agend(self.id_bd)
            
    def set_tipo(self, tipo:int = 0):
        """ Insere o tipo do agendamento """
        self.id_tipo = tipo

    # --- CORREÇÃO ADICIONADA AQUI ---
    def set_centro(self, centro_distribuicao: str = ''):
        """ Insere o centro de distribuição do agendamento """
        self.centro_distribuicao = centro_distribuicao
    # --- FIM DA CORREÇÃO ---

    def return_produtos_in_tuple(self):
        """ Retorna todos os produtos em tuples """
        return [produto.to_tuple() for produto in self.produtos]
    
    def return_all_composicoes_in_tuple(self):
        """ Retorna todas as composições em tuples """
        temp_list = []
        for produto in self.produtos:
            temp_list += produto.return_composicao_in_tuple()
        return temp_list
    
    def update_pdf_agendamento(self, id_bd: int, pdf_path: str):
        """
        Atualiza o PDF de um agendamento existente, deletando dados antigos
        e inserindo os novos a partir do novo PDF.
        """
        try:
            # 1. Confirma que o agendamento existe
            agend_data = self.db_controller.get_agendamento_by_bd_id(id_bd)
            if not agend_data:
                raise ValueError(f"Agendamento com ID {id_bd} não encontrado.")

            agendamento = Agendamento(id_bd=id_bd) # Objeto simplificado para o processo

            # 2. Deleta produtos e composições antigos (importante a ordem)
            self.db_controller.delete_composicoes_by_agend_id(id_bd)
            self.db_controller.delete_produtos_by_agend_id(id_bd)

            # 3. Processa o novo PDF
            product_data_list = self.pdf_service.parse_pdf_to_dict(pdf_path)
            
            for product_data in product_data_list:
                produto = Produto(
                    id_agend=agendamento.id_bd, # Vincula ao agendamento existente
                    id_ml=product_data.get('id_ml', ''),
                    sku=product_data.get('sku', ''),
                    nome=product_data.get('nome', ''),
                    unidades=product_data.get('unidades', 0),
                    gtin=product_data.get('codigo_uni', ''),
                    etiqueta=product_data.get('etiqueta', '')
                )
                agendamento.insert_produto(produto)

            # 4. Busca dados do Tiny para os novos produtos
            self.get_prod_data_tiny(agendamento)
            self.get_comp_tiny(agendamento)
            self.get_comp_data_tiny(agendamento)

            # 5. Insere os novos produtos e composições no BD
            self.insert_produto_in_bd(agendamento)
            
            # Recarrega o agendamento com os produtos recém-inseridos para obter os IDs
            # corretos, necessários para inserir as composições.
            agendamento.produtos = [] # Limpa a lista temporária
            self.create_agendamento_from_bd_data(agendamento)
            
            self.insert_composicao_in_bd(agendamento)

            # 6. Atualiza as flags de erro de estoque
            self.set_error_flags_composicoes(agendamento)
            
            return True, "PDF atualizado com sucesso."

        except Exception as e:
            self.view.show_error(f"Falha ao atualizar o PDF do agendamento: {str(e)}")
            return False, f"Falha ao atualizar o PDF: {str(e)}"
│  │  ├─ ComposicaoModel.py
class Composicao:
    """ Classe feita para gerenciar os dados de uma composição """
    def __init__(self, 
                id_bd:int = 0, 
                fk_id_prod:int = 0, 
                nome:str = '', 
                sku:str = '',
                prod_sku:str = '',
                id_tiny:str = '',
                gtin:str = '',
                prod_gtin:str = '',
                unidades_por_kit:int = 0,
                unidades_de_kits:int = 0,
                estoque_tiny:int = 0,
                localizacao:str = '',
                estoque_error_flag:str = '',
                imagem_url:str = ''):
        """
        Instancia um objeto da classe Composicao

        Args
        -----------   
            id_bd (int): ID da composição no Banco de dados.
            fk_id_prod (int): ID do produto no Banco de dados.
            nome (str): Nome da composição.
            sku (str): Sku da composição.
            prod_sku (str): Sku do produto que é pai dessa composição.
            id_tiny (str): ID da composição no Tiny.
            gtin (str): GTIN/EAN da composição.
            prod_gtin (Str): GTIN/EAN do produto que é pai dessa composição.
            unidades_por_kit (int): Unidades da composição por unidade do produto.
            unidades_de_kits (int): Unidades do produto.
            etiqueta (str): Etiqueta da composição.
            estoque_error_flag (str): Bandeira que diz se há algum erro na quantia de estoque.
            imagem_url (str): Imagem do anuncio do produto

        Vars
        -----------
            unidades_totais (int): Quantidade total de unidades da composição (un. por kit * un. de kits)
        """
        self.id_bd = id_bd
        self.fk_id_prod = fk_id_prod
        self.nome = nome
        self.sku = sku
        self.prod_sku = prod_sku
        self.id_tiny = id_tiny
        self.gtin = gtin
        self.prod_gtin = prod_gtin
        self.unidades_por_kit = unidades_por_kit  
        self.unidades_de_kits = unidades_de_kits
        self.unidades_totais:int = unidades_de_kits * unidades_por_kit 
        self.estoque_tiny = estoque_tiny
        self.localizacao = localizacao
        self.estoque_error_flag = estoque_error_flag
        self.imagem_url = imagem_url

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"\n\t -- Composicão -- \
                \n\t\tID BD: {self.id_bd}\
                \n\t\tID Prod BD: {self.fk_id_prod}\
                \n\t\tNome: {self.nome}\
                \n\t\tSKU: {self.sku}\
                \n\t\tGTIN: {self.gtin}\
                \n\t\tLocalização: {self.localizacao}\
                \n\t\tUnidades por kit: {self.unidades_por_kit}\
                \n\t\tUnidades de Kit: {self.unidades_de_kits}\
                \n\t\tUnidades Totais: {self.unidades_totais}"
                
    
    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "fk_id_prod": self.fk_id_prod,
            "nome": self.nome,
            "sku": self.sku,
            "id_tiny": self.id_tiny,
            "gtin": self.gtin,
            "unidades_por_kit": self.unidades_por_kit,
            "unidades_de_kits": self.unidades_de_kits,
            "unidades_totais": self.unidades_totais,
            "estoque_tiny": self.estoque_tiny,
            "localizacao": self.localizacao,
            "estoque_error_flag": self.estoque_error_flag,
            "imagem_url": self.imagem_url
        }
        
    def to_dict_for_api(self, attrs:list = []):
        temp_dict = {}
        for attr in attrs:
            temp_dict.update({attr: getattr(self, attr)})
        return temp_dict
        
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome,
            self.unidades_por_kit,
            self.unidades_totais, 
            self.estoque_tiny, 
            self.localizacao,
            self.estoque_error_flag,
            self.imagem_url
        )
    
    def to_tuple_alteracao(self):
        """ Transforma o objeto num tuple para enviar à tabela de alteração """
        return (
            self.id_bd,
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome
            )
        
    def to_tuple_compra(self):
        """ Transforma o objeto num tuple para enviar à tabela de compras """
        return (
            self.id_bd,
            self.fk_id_prod,
            self.id_tiny,
            self.gtin,
            self.sku,
            self.nome,
            self.unidades_totais
            )

    def set_gtin(self, gtin:str = ''):
        """ Insere o GTIN da composição """
        if gtin != '':
            self.gtin = gtin
        else:
            self.gtin = "GTIN/EAN não encontrado"

    def set_unidades_por_kit(self, unidades_por_kit:int = 0):
        """ Insere a quantidade de unidades por kit da composição """
        self.unidades_por_kit = unidades_por_kit

    def set_estoque_tiny(self, estoque_tiny:int = 0):
        """ Insere o estoque do tiny da composição """
        self.estoque_tiny = estoque_tiny

    def set_id_bd(self, id_bd:int = 0):
        """ Insere o ID da composição """
        self.id_bd = id_bd

    def set_fk_id_prod(self, fk_id_prod:int = 0):
        """ Insere o ID do produto pai da composição """
        self.fk_id_prod = fk_id_prod
    
    def set_localizacao(self, localizacao:str = ''):
        self.localizacao = localizacao

    def set_estoque_error_flag(self, estoque_error_flag):
        """ Insere a bandeira de estoque da composição """
        if estoque_error_flag in ['green', 'yellow', 'red']:
            self.estoque_error_flag = estoque_error_flag
        else:
            print("Valor de bandeira inválido")
            return
    
    def set_imagem_url(self, url: str): # NOVO MÉTODO
        """ Define a URL da imagem para esta composição. """
        self.imagem_url = url if url else ''
│  │  ├─ DatabaseModel.py
import mysql.connector

class Database:
    def __init__(self, user:str, password:str, host:str, port:str, name:str):
        self.user = user
        self.password = password
        self.host = host
        self.port = port
        self.name = name
        self.con = None
        self.cursor = None
    
    def __enter__(self):
        self.con = mysql.connector.connect(
            host=self.host, 
            user = self.user,
            password=self.password,
            database=self.name,
            port=self.port)
        self.cursor = self.con.cursor()

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.cursor.close()
        self.con.close()

        self.cursor = None
        self.con = None

    def custom_select_query(self, query:str) -> list|dict:
        """
        Processa uma query inteiramente feita pelo usuário
        
        Args
        ----------
            query (str): Query feita pelo usuário.
        """
        if self.con is not None:
            self.con.cursor.execute(query)
            return_val = self.con.cursor.fetchall()
            return return_val
        
    def custom_i_u_query(self, query:str, data:list) -> None:
        """
        Insere ou altera dados no banco baseado na query e nos dados enviados pelo usuário
        
        Args
        ----------
            query (str): Query feita pelo usuário.
            data (list): Lista com os dados que serão inseridos
        """
        self.con.cursor.executemany(query, data)
        self.con.db.commit()
        print('Dados inseridos/alterados')
        return
│  │  ├─ JoinedAgendamentoModel.py
from .AgendamentoModel import Agendamento
from .JoinedComposicaoModel import JoinedComposicao
from .ComposicaoModel import Composicao

class JoinedAgendamento:
    def __init__(self):
        self.agend_origem = []
        self.produtos = []
        self.joined_comps = []

    def insert_agendamento(self, agendamento:Agendamento = None):
        self.agend_origem.append(agendamento)

    def set_produtos(self):
        if len(self.agend_origem) > 0:
            for agend in self.agend_origem:
                self.produtos += agend.produtos

    def return_comp_grouped(self) -> list[Composicao]:
        composicoes_dict = {}
        
        for produto in self.produtos:
            for composicao in produto.composicoes:
                # Usando SKU como chave para agrupamento (pode ser id_tiny ou outro campo único)
                key = composicao.sku
                
                if key in composicoes_dict:
                    # Se já existe, soma as unidades
                    existing = composicoes_dict[key]
                    existing.unidades_totais += composicao.unidades_totais
                    existing.insert_comp_origem(composicao)
                    existing.insert_produto_origem(produto)
                else:
                    # Se não existe, adiciona ao dicionário
                    composicoes_dict[key] = JoinedComposicao(composicao.sku, composicao.id_tiny, composicao.estoque_tiny)
                    composicoes_dict[key].unidades_totais += composicao.unidades_totais
                    composicoes_dict[key].insert_comp_origem(composicao)
                    composicoes_dict[key].insert_produto_origem(produto)
        
        return list(composicoes_dict.values())
        
│  │  ├─ JoinedComposicaoModel.py
from .ComposicaoModel import Composicao
from .ProdutoModel import Produto

class JoinedComposicao:
    """ Classe feita para gerenciar os dados da união de várias composições """
    def __init__(self,
                sku:str = '',
                id_tiny:str = '',
                estoque_tiny:int = 0):
        self.sku = sku
        self.id_tiny = id_tiny
        self.estoque_tiny = estoque_tiny
        self.unidades_totais:int = 0
        self.comp_origem:list[Composicao] = []
        self.produto_origem:list[Produto] = []
        self.estoque_error_flag:str = ''

    def __repr__(self):
        return f"\n\t -- Junção de Composicões -- \
                    \n\t\tSKU: {self.sku}\
                    \n\t\tUnidades Totais: {self.unidades_totais}"
    
    def to_dict(self):
        return {
                "sku": self.sku,
                "id_tiny": self.id_tiny,
                "unidades_totais": self.unidades_totais,
                "composicao": [i.to_dict() for i in self.comp_origem],
                "produtos_origem": [i.to_dict() for i in self.produto_origem],
                "estoque_error_flag": self.estoque_error_flag
            }

    def insert_comp_origem(self, composicao:Composicao = None):
        self.comp_origem.append(composicao)

    def insert_produto_origem(self, produto:Produto = None):
        self.produto_origem.append(produto)

    def set_flag_in_joined_comp(self):
        joined_comp_flag = ''
        if self.unidades_totais > self.estoque_tiny:
            joined_comp_flag = 'red'
        elif self.unidades_totais < self.estoque_tiny:
            joined_comp_flag = 'green'

        if joined_comp_flag == 'green':
            for i in self.comp_origem:
                i.set_estoque_error_flag('green')
        else:
            for composicao in self.comp_origem:
                if composicao.unidades_totais > composicao.estoque_tiny:
                    composicao.set_estoque_error_flag('red')
                elif composicao.unidades_totais == composicao.estoque_tiny:
                    composicao.set_estoque_error_flag('yellow')            
│  │  └─ ProdutoModel.py
from .ComposicaoModel import Composicao

class Produto:
    """ Classe feita para gerenciar os dados de um produto """
    def __init__(self, 
                id_agend:int = 0,
                id_bd:int = 0,
                id_tiny:str = '',
                id_ml:str = '',
                nome:str = '',
                sku:str = '',
                gtin:str = '',
                etiqueta:str = '',
                unidades:int = 0,
                estoque_error_flag:str = '',
                imagem_url:str = ''):
        """
        Instancia um objeto da classe Produto

        Args
        -----------   
            id_agend (int): ID do agendamento no Banco de dados.
            id_bd (int): ID do produto no Banco de dados.
            id_tiny (str): ID do produto no Tiny.
            id_ml (str): ID do produto no ML.
            nome (str): Nome do produto.
            sku (str): Sku do produto.
            gtin (str): GTIN/EAN do produto.
            etiqueta (str): Etiqueta do produto.
            unidades (int): Unidades do produto.
            estoque_error_flag (str): Bandeira que diz se há algum erro na quantia de estoque.

        Vars
        -----------
            is_kit (bool): É ou não um kit
        """
        self.id_agend = id_agend
        self.id_bd = id_bd
        self.id_tiny = id_tiny
        self.id_ml = id_ml
        self.nome = nome
        self.sku = sku
        self.gtin = gtin
        self.etiqueta = etiqueta
        self.unidades = unidades
        self.estoque_error_flag = estoque_error_flag
        self.is_kit:bool = False 
        self.imagem_url = imagem_url

        self.composicoes:list[Composicao] = []

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"\n -- Produto -- \
                \n\tID BD: {self.id_bd}\
                \n\tID Agend BD: {self.id_agend}\
                \n\tID Tiny: {self.id_tiny}\
                \n\tNome: {self.nome}\
                \n\tSKU: {self.sku}\
                \n\tGTIN: {self.gtin}\
                \n\tEtiqueta: {self.etiqueta}\
                \n\tÉ kit: {self.is_kit}\
                \n\tUnidades: {self.unidades}"
    
    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "id_tiny": self.id_tiny,
            "id_ml": self.id_ml,
            "nome": self.nome,
            "sku": self.sku,
            "gtin": self.gtin,
            "etiqueta": self.etiqueta,
            "unidades": self.unidades,
            "estoque_error_flag": self.estoque_error_flag,
            "imagem_url": self.imagem_url,
            "composicao": []
        }
    
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.id_agend,
            self.id_ml,
            self.id_tiny,
            self.sku,
            self.gtin,
            self.unidades,
            self.is_kit, 
            self.nome, 
            self.estoque_error_flag,
            self.imagem_url
        )
    
    
    def set_id_tiny(self, id_tiny:str = ''):
        """ Insere o id do produto no Tiny """
        self.id_tiny = id_tiny

    def set_gtin(self, gtin:str = ''):
        """ Insere o GTIN/EAN """
        if gtin != '':
            self.gtin = gtin
        else:
            self.gtin = "GTIN/EAN não encontrado"

    def set_is_kit(self, is_kit:bool = False):
        """ Insere se é ou não um kit  """
        if is_kit == 'K':
            self.is_kit = True
        else:
            self.is_kit = False

    def insert_composicao(self, composicao_obj:Composicao = None):
        """ Insere uma composição no objeto """
        self.composicoes.append(composicao_obj)

    def search_composicao(self, att_name:str = '', att_value:str = ''):
        """ Busca por uma composição baseado em um atributo e um valor """
        return next((i for i in self.composicoes if getattr(i, att_name) == att_value), None)
    
    def set_id_bd(self, id_bd:int = 0):
        """ Insere o id do produto no banco de dados """
        self.id_bd = id_bd

    def set_id_agend(self, id_agend:int = 0):
        """ Insere o id do agendamento """
        self.id_agend = id_agend

    def set_estoque_error_flag(self):
        """ Vê as bandeiras em sua composição e, a partir delas, decide qual será a sua """
        flags = [i.estoque_error_flag for i in self.composicoes]
        if 'red' in flags:
            self.estoque_error_flag = 'red'
        elif 'yellow' in flags:
            self.estoque_error_flag = 'yellow'
        else:
            self.estoque_error_flag = 'green'

    def set_imagem_url(self, url: str): # <-- NOVO MÉTODO
        """ Define a URL da imagem para este produto. """
        self.imagem_url = url if url else ''
        
    def set_id_bd_for_composicoes(self):
        """ Insere o id_bd do produto em todas as suas composições """
        for composicao in self.composicoes:
            composicao.set_fk_id_prod(self.id_bd)
    
    def return_composicao_in_tuple(self):
        """ Retorna toda a composição do produto numa lista de tuples """
        return [comp.to_tuple() for comp in self.composicoes]

│  ├─ services/
│  │  ├─ __init__.py
from .PdfService import PdfService
from .SpreadsheetService import SpreadsheetService
│  │  ├─ PdfService.py
# PdfService.py
import pandas as pd
import camelot
import os
from typing import List, Dict

class PdfService:
    """Handles all PDF parsing and raw data extraction"""
    
    TEMP_FOLDER = 'temp'
    
    @staticmethod
    def parse_pdf_to_dict(pdf_path: str) -> list[Dict]:
        """Extract product data from PDF and return as list of dicts"""
        try:
            # Read PDF tables
            tables = camelot.read_pdf(pdf_path, pages='all')
            tables.export('temp/pdf_data.csv', f='csv')
            
            # Combine tables
            dfs = []
            for i in range(1, tables.n + 1):
                df = pd.read_csv(f'temp/pdf_data-page-{i}-table-1.csv', thousands=',')
                dfs.append(df)
                os.remove(f'temp/pdf_data-page-{i}-table-1.csv')
            
            combined_df = pd.concat(dfs, ignore_index=True)
            
            # Parse into product dictionaries
            products = []
            for _, row in combined_df.iterrows():
                product_str = row['PRODUTO'].replace('\n', ' ').replace(' ', ',')
                parts = product_str.split(',')
                
                product_data = {
                    'id_ml': parts[2],
                    'codigo_uni': parts[5],
                    'sku': parts[7],
                    'nome': ' '.join(parts[8:]).replace(',', ' ').strip(),
                    'unidades': row['UNIDADES'],
                    'etiqueta': row['ETIQUETA #'].split('#')[1]
                }
                products.append(product_data)
            
            os.remove(pdf_path)
            return products
            
        except Exception as e:
            raise ValueError(f"PDF parsing failed: {str(e)}")
│  │  └─ SpreadsheetService.py
# classes/services/SpreadsheetService.py
import pandas as pd
import os
from typing import List, Dict

class SpreadsheetService:
    """Manipula a leitura e processamento de planilhas (Excel, CSV Magalu, etc.)."""

    @staticmethod
    def parse_spreadsheet_to_dict(path: str) -> List[Dict]:
        """
        Detecta o tipo de arquivo e retorna uma lista de dicts normalizados.
        - .xlsx/.xls: fluxo genérico de marketplace (agrupa duplicatas etc.)
        - .csv     : fluxo Magalu (colunas fixas SKU, Nome do Produto, Pedidos Finalizados, mandar)
        """
        ext = os.path.splitext(path)[1].lower()

        if ext in (".xls", ".xlsx"):
            # fluxo atual de Excel (openpyxl)
            df = pd.read_excel(path, engine="openpyxl")

            # normalização de nomes de colunas
            df = df.rename(columns={
                'ID do Item':        'item_id',
                'Produto':           'produto',
                'ID da Variação':    'variacao_id',
                'Nome da Variação':  'nome_variacao',
                'SKU da Variação':   'sku_variacao',
                'SKU Principle':     'sku_principal',
                'Unidades (Pedido pago)': 'unidades'
            })

            # descartar linhas sem quantidade
            df = df[df['unidades'].notna()]

            # agrupar duplicatas somando 'unidades'
            df_agg = (
                df
                .groupby(
                    ['item_id','sku_variacao','sku_principal','produto','nome_variacao'],
                    as_index=False
                )
                .agg({'unidades':'sum'})
            )

            return df_agg.to_dict(orient='records')

        elif ext == ".csv":
            # fluxo específico para CSV Magalu
            try:
                df = pd.read_csv(path, sep=';')
            except UnicodeDecodeError:
                df = pd.read_csv(path, sep=';', encoding='latin-1')

            # renomeia colunas para o nosso esquema
            df = df.rename(columns={
                'SKU': 'sku',
                'Nome do Produto': 'produto',
                'mandar': 'unidades'
            })

            # mantém só o que importa
            df = df[['sku', 'produto', 'unidades']]

            # preenche strings faltantes e força tudo como texto
            df['sku']     = df['sku'].fillna('').astype(str)
            df['produto'] = df['produto'].fillna('').astype(str)

            # converte unidades para número, invalidando o que não for
            df['unidades'] = pd.to_numeric(df['unidades'], errors='coerce')

            # joga fora linhas sem unidades válidas (>0)
            df = df[df['unidades'].notna() & (df['unidades'] > 0)]

            # agora é seguro converter para int
            df['unidades'] = df['unidades'].astype(int)

            return df.to_dict(orient='records')


        else:
            raise ValueError(f"Formato não suportado pelo parser: {ext}")

│  ├─ views/
│  │  ├─ AgendamentoView.py
from classes.models import Agendamento, Produto, Composicao
from datetime import datetime

class Agendamento:
    """ Classe feita para gerenciar os dados de um agendamento """
    def __init__(self, 
                id_bd:int = 0, 
                id_agend_ml:str = '', 
                id_tipo:int = 0,
                empresa:int = 0,
                id_mktp:int = 0,
                colaborador = '',
                entrada:datetime = datetime.now()):
        """
        Instancia um objeto da classe Agendamento

        Args
        -----------   
            id_bd (int): ID da composição no Banco de dados.
            id_agend_ml (str): ID do agendamento no ML.
            id_tipo (int): ID do tipo do agendamento.
            empresa (int): ID da empresa do agendamento.
            colaborador (str): Nome do colaborador.

        Vars
        -----------
            produtos (list[Produto]): Lista com todos os produtos do agendamento.
        """
        self.id_bd = id_bd
        self.id_agend_ml = id_agend_ml
        self.id_tipo = id_tipo
        self.empresa = empresa
        self.id_mktp = id_mktp
        self.colaborador = colaborador
        self.entrada = entrada

        self.produtos:list[Produto] = []

    def __repr__(self):
        """ Formata como o objeto deve ser transformado em uma string """
        return f"Agendamento\
                \n\tID BD: {self.id_bd}\
                \n\tID agendamento: {self.id_agend_ml}\
                \n\tID tipo: {self.id_tipo}"

    def to_dict(self):
        """ Transforma o objeto num dicionário """
        return {
            "id_bd": self.id_bd,
            "id_agend_ml": self.id_agend_ml,
            "id_tipo": self.id_tipo,
            "empresa": self.empresa,
            "id_mktp": self.id_mktp,
            "colaborador": self.colaborador,
            "entrada_agend": self.entrada,
            "produtos": []
        }
    
    def to_tuple(self):
        """ Transforma o objeto num tuple """
        return (
            self.id_agend_ml,
            self.id_tipo,
            self.empresa,
            self.id_mktp,
            self.colaborador,
            self.entrada
        )

    def insert_produto(self, produto_obj:Produto = None):
        """ Insere um produto ao agendamento """
        self.produtos.append(produto_obj)

    def search_produto(self, att_name:str = '', att_value:str = ''):
        """ Busca por um produto baseado em um atributo e um valor """
        return next((i for i in self.produtos if getattr(i, att_name) == att_value), None)
    
    def set_id_bd(self, id_bd:int = 0):
        """ Insere o id do agendamento """
        self.id_bd = id_bd

    def set_colaborador(self, colaborador:str = ''):
        """ Insere o colaborador do agendamento """
        self.colaborador = colaborador

    def set_empresa(self, empresa:int = 0):
        """ Insere o id da empresa do agendamento """
        self.empresa = empresa
        
    def set_mktp(self, id_mktp:int = 0):
        """ Insere o id da empresa do agendamento """
        self.id_mktp = id_mktp
        
    def set_id_agend_for_produtos(self):
        """ Insere o id do agendamento a todos os produtos dentro dele """
        for produto in self.produtos:
            produto.set_id_agend(self.id_bd)

    def return_produtos_in_tuple(self):
        """ Retorna todos os produtos em tuples """
        return [produto.to_tuple() for produto in self.produtos]
    
    def return_all_composicoes_in_tuple(self):
        """ Retorna todas as composições em tuples """
        temp_list = []
        for produto in self.produtos:
            temp_list += produto.return_composicao_in_tuple()
        return temp_list

from classes.models import Agendamento, Produto, Composicao

class AgendamentoView:
    def display_agendamento(self, agendamento:Agendamento = None):
        print(agendamento)

    def display_produto(self, produto:Produto = None):
        print(produto)

    def display_all_produtos(self, agendamento:Agendamento = None):
        for produto in agendamento.produtos:
            print(produto)

    def display_composicao(self, composicao:Composicao = None):
        print(composicao)

    def display_all_composicoes(self, produto:Produto = None):
        for composicao in produto.composicoes:
            print(composicao)

    def display_all_in_agend(self, agendamento:Agendamento = None):
        print(agendamento)
        for produto in agendamento.produtos:
            print(produto)
            for composicao in produto.composicoes:
                print(composicao)

    def show_agendamento_created(self, agendamento:Agendamento = None):
        print(f"Agendamento criado com sucesso\n ID do agendamento: {agendamento.id_agend_ml}")
        print(f"Contém {len(agendamento.produtos)} produtos")
        
    def show_error(self, message):
        print(f"Error: {message}")
│  │  └─ __init__.py
from .AgendamentoView import AgendamentoView
│  └─ __init__.py
from .controllers import AgendamentoController, DatabaseController
from .models import Agendamento, Produto, Composicao
from .views import AgendamentoView
from .services import PdfService
├─ migrations/
│  └─ 001_create_excel_uploads.sql
├─ rotas/
│  ├─ __init__.py
from .homepage import *
from .auth import *
from .config import *
from .process_pdf import *
from .agendamentos import *
from .alteracoes import *
from .upload_pdf import *
from .retiradoEstoque import *
from .health_check import *
from .teste import *
from .alterar_agendamento import *
from .downloads import *
from .erro import *
from .imprimir_composicoes import *
from .atualizar_pdf import *
from .upload_excel import *
from .view_excel import *
from .reservados import *
from .embalar import *
from .expedicao import *
from .excluir_agendamento import * 
│  ├─ agendamentos.py
from main import app, render_template, agendamento_controller, ParametroInvalido
from flask import session
from datetime import datetime

""" Leva para as páginas 'novoAgendamento' e 'agendamentos' """
@app.route("/agendamentos/<acao>")
def agendamentos(acao):
    if acao == "criar":
        return render_template("novoAgendamento.html")
    elif acao == "ver":
        # 1) Carrega tudo em memória
        agendamento_controller.clear_agendamentos()
        agendamento_controller.create_agendamento_from_bd_data()
        todos = agendamento_controller.agendamentos

        # — Ordena do mais recente para o mais antigo pela data de entrada
        todos.sort(key=lambda a: a.entrada or datetime.min, reverse=True)
        # 2) Filtra pelo role
        role = session.get("role", "all")
        if role == "limp_conf":
            # só Limpeza (1) e Conferência (3)
            dados = [a for a in todos if a.id_tipo in (1, 3)]
        elif role == "emb_exp":
            # só Embalar (4) e Expedição (5)
            dados = [a for a in todos if a.id_tipo in (4, 5)]
        else:
            # 'all' ou qualquer outro role vê tudo
            dados = todos

        # 3) Renderiza só os permitidos
        return render_template("agendamentos.html", dados=dados)

    else:
        raise ParametroInvalido()

│  ├─ alteracoes.py
from main import (
    app, 
    render_template, 
    request, 
    redirect,
    url_for,
    jsonify,
    agendamento_controller, 
    caller, 
    ParametroInvalido, 
    MetodoInvalido, 
    LimiteRequests)
import time

""" Leva para as páginas 'alteracoes' e 'compras' """
@app.route("/alteracoes/<acao>", methods=["GET", "POST"])
def alteracoes(acao):
    if acao == "alterar":
        if request.method == "POST":
            agendamento_controller.clear_agendamentos()

            agendamento_controller.insert_agendamento(request.json["id_agend"])
            agendamento_obj = agendamento_controller.get_last_made_agendamento()
            agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
            # agendamento_controller.view.display_all_in_agend(agendamento_obj)

            produto_obj = agendamento_controller.search_produto(
                agendamento_obj, "id_bd", str(request.json["id_prod"])
            )

            agendamento_controller.insert_composicao_alteracao_in_bd(
                produto_obj, request.json["itens"]
            )

            return "Dados para serem alterados foram inseridos no banco de dados!"
        elif request.method == "GET":
            agendamento_controller.clear_agendamentos()
            agendamento_controller.create_agendamento_for_alteracao()
            joined_agend = agendamento_controller.create_joined_agendamento()

            return render_template(
                "alteracoes.html",
                dados=agendamento_controller.return_joined_composicoes_from_joined_agend(
                    joined_agend
                )
            )
        else:
            raise MetodoInvalido()
    elif acao == "comprar":
        if request.method == "POST":
            agendamento_controller.clear_agendamentos()

            agendamento_controller.insert_agendamento(request.json["id_agend"])
            agendamento_obj = agendamento_controller.get_last_made_agendamento()
            agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
            # agendamento_controller.view.display_all_in_agend(agendamento_obj)

            produto_obj = agendamento_controller.search_produto(
                agendamento_obj, "id_bd", str(request.json["id_prod"])
            )

            agendamento_controller.insert_composicao_compras_in_bd(
                produto_obj, request.json["itens"]
            )

            return "Dados para serem comprados foram inseridos no banco de dados!"
        else:
            agendamento_controller.clear_agendamentos()

            return render_template(
                "compras.html",
                dados=agendamento_controller.get_compras_data()
            )
    else:
        raise ParametroInvalido()


@app.route("/dados-compra-tiny/<id_tiny>")
async def teste(id_tiny):
    
    try:
        resp = caller.make_call(f"produtos/{id_tiny}")
        time.sleep(5)
    except BaseException:
        raise LimiteRequests()
    return resp

@app.route("/dados-estoque/<id_tiny>")
async def dados_estoque(id_tiny):
    try:
        resp = caller.make_call(f"estoque/{id_tiny}")
        time.sleep(5)
        if isinstance(resp, dict) and "status" in resp and resp["status"] >= 400:
            # Se caller.make_call retorna um dicionário com um status de erro
            return jsonify(resp), resp["status"]
        return jsonify(resp)
    except LimiteRequests:
        raise LimiteRequests()
    except Exception as e:
        print(f"Erro inesperado ao chamar a API externa: {e}")
        return jsonify({"error": "Erro interno ao processar a requisição"}), 500

@app.route('/remover-compra/<id>/<quant>')
async def remover(id, quant):
    agendamento_controller.update_quant_compra(id, quant)
    return render_template(
                "compras.html",
                dados=agendamento_controller.get_compras_data()
            )
│  ├─ alterar_agendamento.py
from main import (
    app,
    render_template,
    request,
    agendamento_controller,
    redirect,
    url_for,
    MetodoInvalido
)

@app.route("/alterar-agendamento", methods=["POST", "GET"])
def alt_agend():
    if request.method == "GET":
        # carregar em memória o agendamento a partir do BD
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=int(request.args["id"]))
        agend_obj = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend_obj)

        # se for chamada via AJAX (modal), devolve só o partial
        if request.args.get("modal") == "true":
            return render_template(
                "partials/form_editar_agendamento.html",
                dados=agendamento_controller.get_last_made_agendamento()
            )

        # caso contrário, página completa
        return render_template(
            "alterar_agendamento.html",
            dados=agendamento_controller.get_last_made_agendamento()
        )

    elif request.method == "POST":
        try:
            # 1) Pega o ID do agendamento que veio no form
            id_bd = int(request.form["inp_id"])

            # 2) Busca o registro atual no BD para extrair o colaborador
            registro = agendamento_controller.db_controller.get_agendamento_by_bd_id(id_bd)
            colaborador_atual = registro[0][5] if registro and registro[0][5] else ""
            centro_atual = registro[0][6] if registro and registro[0][6] else ""

            # 3) Recria em memória o objeto de agendamento (mantendo colaborador)
            agendamento_controller.clear_agendamentos()
            agendamento_controller.insert_agendamento(
                id_bd,
                request.form["inp_ml"],
                int(request.form["inp_tipo"]),
                int(request.form["inp_emp"]),
                int(request.form["inp_mktp"]),
                colaborador_atual,
                centro_distribuicao=centro_atual
            )

            # 4) Executa o UPDATE no BD
            agendamento_controller.update_agendamento(
                agendamento_controller.get_last_made_agendamento()
            )

            # resposta para AJAX
            if request.headers.get("X-Requested-With") == "XMLHttpRequest":
                return "ok", 200

            # redireciona com flag de sucesso
            return redirect(url_for("agendamentos", acao="ver", alterado="ok"))

        except Exception as e:
            print(f"Erro ao alterar agendamento: {e}")

            if request.headers.get("X-Requested-With") == "XMLHttpRequest":
                return "erro", 500

            return redirect(url_for("agendamentos", acao="ver", erro="alteracao"))

    else:
        raise MetodoInvalido()

│  ├─ atualizar_agend.py
from main import app, redirect, url_for, request, caller
from collections import Counter

""" Faz o BackEnd atualizar partes de um kit que foram alterados no tiny """
# NÃO FOI REPASSADO PARA A NOVA INFRA
@app.route('/atualizar')
def atualizar_agend():
    bd_data = caller.access.custom_select_query(f'SELECT  p.id_prod_tiny, c.id_comp_tiny FROM comp_agend c JOIN produtos_agend p WHERE id_prod_comp = {request.args['prod_id']} AND c.id_prod_comp = p.id_prod;')
    id_tiny = bd_data[0][0]
    ids_comp = [int(i[1]) for i in bd_data]
    resp = caller.make_call(f'produtos/{id_tiny}/kit')
    ids_kit = [i['produto']['id'] for i in resp]
    if Counter(ids_comp) == Counter(ids_kit):
        print("TUDO IGUAL")
    else:
        print(ids_comp)
        print(ids_kit)
        remove = [(i, request.args['prod_id']) for i in ids_comp if i not in ids_kit]
        caller.access.custom_i_u_query('UPDATE comp_agend SET substituido_comp = 1 WHERE id_comp_tiny = %s AND id_prod_comp = %s', remove)
    return redirect(url_for('retirado_estoque', id=request.args['id'], tipo=request.args['tipo']))
│  ├─ atualizar_pdf.py
import os
import time
from flask import request, redirect, url_for, flash
from werkzeug.utils import secure_filename

# Importe as variáveis globais da sua aplicação (app, controller, etc.)
from main import app, agendamento_controller 

@app.route('/atualizar-pdf', methods=['POST'])
def atualizar_pdf_route():
    # Valida se os campos necessários foram enviados no formulário
    if 'path' not in request.files or 'id_bd_atualizar' not in request.form:
        flash('Requisição inválida. Faltam parâmetros.', 'danger')
        # Redireciona para a página de visualização de agendamentos
        return redirect(url_for('agendamentos', acao='ver'))

    file = request.files['path']
    id_bd = request.form.get('id_bd_atualizar')

    if file.filename == '' or not id_bd:
        flash('Dados incompletos. Selecione um arquivo e tente novamente.', 'warning')
        return redirect(url_for('agendamentos', acao='ver'))

    # Verifica se o arquivo é um PDF
    if file and file.filename.endswith('.pdf'):
        try:
            # Garante um nome de arquivo seguro e único
            filename = secure_filename(f"update_{id_bd}_{int(time.time())}.pdf")
            
            # Define o caminho para salvar o arquivo (ajuste a pasta se necessário)
            upload_folder = app.config.get('UPLOAD_FOLDER', 'uploads') 
            if not os.path.exists(upload_folder):
                os.makedirs(upload_folder)
            pdf_path = os.path.join(upload_folder, filename)
            
            file.save(pdf_path)

            # Chama o método do controller para processar a atualização
            success, message = agendamento_controller.update_pdf_agendamento(int(id_bd), pdf_path)
            
            # Remove o arquivo temporário após o processamento
            os.remove(pdf_path) 

            if success:
                # Adiciona o parâmetro 'atualizado=ok' para o feedback no front-end
                return redirect(url_for('agendamentos', acao='ver', atualizado='ok'))
            else:
                flash(f'Erro na atualização: {message}', 'danger')
                return redirect(url_for('agendamentos', acao='ver'))

        except Exception as e:
            flash(f'Ocorreu um erro inesperado: {str(e)}', 'danger')
            return redirect(url_for('agendamentos', acao='ver'))
    
    # Se o arquivo não for um PDF
    flash('Formato de arquivo inválido. Por favor, envie um PDF.', 'warning')
    return redirect(url_for('agendamentos', acao='ver'))
│  ├─ auth.py
# rotas/auth.py
from flask import (
    Blueprint,
    render_template,
    request,
    redirect,
    url_for,
    session,
    flash
)
from hashlib import sha256
from base_jp_lab import Access

bp_auth = Blueprint(
    'auth',
    __name__,
    template_folder='../templates'   # ajusta se necessário
)

# instância de acesso; se preferir, mova para um arquivo de config comum
access = Access(
    "Bruno_Lallo",
    "ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF",
    "192.168.15.200",
    "3306",
    "jp_bd",
)

def render_error_page(error_title, error_msg, referrer):
    return render_template(
        'error_page.html',
        error_title=error_title,
        error_msg=error_msg,
        referrer=referrer
    )

@bp_auth.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return render_template('login.html')

    usuario = request.form.get('usuario', '').strip()
    senha    = request.form.get('senha', '')

    rows = access.custom_select_query(
        "SELECT id_usuario, nome_usuario, nome_display_usuario, senha_usuario, role "
        "FROM usuarios WHERE nome_usuario = %s",
        (usuario,)
    )

    # Se não encontrou ou a senha não bate, retorna o mesmo erro genérico
    if not rows or sha256(senha.encode()).hexdigest() != rows[0][3]:
        return render_template('login.html', login_error="Usuário ou senha incorretos")

    # Autenticação ok
    user_id, _, display_name, _, role = rows[0]
    session.clear()
    session['id_usuario']           = user_id
    session['nome_display_usuario'] = display_name
    session['role'] = role
    return redirect(url_for('homepage'))


@bp_auth.route('/logout')
def logout():
    session.clear()
    flash('Você saiu do sistema.', 'info')
    return redirect(url_for('auth.login'))

│  ├─ config.py
from main import app, render_template

""" Leva para a página 'config' """
@app.route('/config')
def config():
    return render_template('config.html')
│  ├─ downloads.py
from main import app, request, pd, send_from_directory, redirect, url_for, ParametroInvalido
import datetime

@app.route("/compra-planilha/<extensao>", methods=['POST'])
def compra_para_csv(extensao):
    if extensao == 'excel' or extensao == 'csv' or extensao == 'pdf':
        filename = f'compras-{datetime.datetime.today().strftime('%d-%m-%Y')}.{'csv' if extensao == 'csv' else 'xlsx'}'
        df = pd.DataFrame(eval(request.form['dados']))
        if extensao == 'csv':
            df.to_csv(f'temp/{filename}', index=False, encoding='utf-8')
        elif extensao == 'excel':
            df.to_excel(f'temp/{filename}', index=False)
        elif extensao == 'pdf':
            return 'IMPLEMENTAÇÃO AINDA NÃO FEITA' # TODO Implementar construção e download de PDF
        else:
            raise ParametroInvalido()
        return redirect(url_for('download_compra', filename=filename))
    else:
        return redirect(url_for('erro', error_title='Teste', error_msg='Teste-MSG'))
    
@app.route("/download-compra/<filename>")
def download_compra(filename):
    file = send_from_directory('temp', filename)
    return file

# TODO Limpar arquivos criados após o envio. FONTE: https://stackoverflow.com/questions/53747258/flask-send-file-not-sending-file
│  ├─ embalar.py
from flask import Blueprint, render_template, request, jsonify
from base_jp_lab import Caller
from classes.models.DatabaseModel import Database
from classes.controllers.DatabaseController import DatabaseController
from classes.controllers.AgendamentoController import AgendamentoController
import mysql.connector


bp_embalar = Blueprint("embalar", __name__, template_folder="templates")

# Configuração de acesso ao MySQL
_db_config = {
'host': '192.168.15.200',
'port': 3306,
'user': 'Bruno_Lallo',
'password': 'ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF',
'database': 'jp_bd',
'autocommit': True
}

@bp_embalar.route("/api/embalar/buscar_anuncios", methods=["GET"])
def buscar_anuncios():
    id_agendamento = request.args.get("id_agendamento")
    if not id_agendamento:
        return jsonify({"error": "ID do agendamento não fornecido."}), 400

    try:
        # 1) instanciar DB, Caller e controller de agendamento
        db = Database()
        db_ctrl = DatabaseController(db)
        caller = Caller()
        ag_ctrl = AgendamentoController(db_ctrl, caller)

        # 2) monta objeto Agendamento
        ag = ag_ctrl.create_agendamento_from_bd_data(id_agendamento)
        if not ag:
            return jsonify({"error": "Agendamento não encontrado."}), 404

        anuncios = []
        for produto in ag.produtos:
            pd = produto.to_dict()

            # === busca URL da imagem no Tiny ===
            try:
                detalhes = caller.make_call(f"produtos/{produto.id_tiny}")
                anexos = detalhes.get("anexos", [])
                pd["imagemUrl"] = anexos[0].get("url", "") if anexos else ""
            except Exception:
                pd["imagemUrl"] = ""

            # === busca composição real do kit no Tiny ===
            try:
                kits_resp = caller.make_call(f"produtos/{produto.id_tiny}/kits")
                kits = kits_resp.get("kits", [])
                pd["composicoes"] = [{
                    "nome":             kit.get("nome"),
                    "sku":              kit.get("sku"),
                    "unidades_totais":  kit.get("quantidade", 0),
                    # compara quantidade pedida x estoque disponível no Tiny (se houver)
                    "estoque_error_flag": (
                        "red" if kit.get("quantidade", 0) > kit.get("estoque_tiny", 0)
                        else "green"
                    )
                } for kit in kits]
            except Exception:
                # fallback para a composição que você já tinha
                pd["composicoes"] = [c.to_dict() for c in produto.composicoes]

            anuncios.append(pd)

        return jsonify({"success": True, "anuncios": anuncios})

    except Exception as e:
        print(f"Erro ao buscar anúncios: {e}")
        return jsonify({"error": "Erro interno do servidor ao buscar anúncios."}), 500

@bp_embalar.route("/api/embalar/bipar", methods=["POST"])
def bipar_embalagem():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    id_prod_ml = data.get("id_prod_ml")
    if not id_agend or not id_prod_ml: # E verificamos a nova variável
        return jsonify(error="Parâmetros 'id_agend_ml' e 'id_prod_ml' são obrigatórios."), 400

    insert_sql = """
        INSERT INTO embalagem_bipados (id_agend_ml, id_prod_ml, bipados)
        VALUES (%s, %s, 1)
        ON DUPLICATE KEY UPDATE bipados = bipados + 1
    """
    select_sql = """
        SELECT bipados FROM embalagem_bipados WHERE id_agend_ml = %s AND id_prod_ml = %s
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(insert_sql, (id_agend, id_prod_ml))
        cur.execute(select_sql, (id_agend, id_prod_ml))
        row = cur.fetchone()
        novo_total = row[0] if row else 0
        cur.close()
        conn.close()
        return jsonify(id_prod_ml=id_prod_ml, bipados=novo_total)
    except Exception as e:
        print(f"Erro em bipar_embalagem: {e}")
        return jsonify(error=str(e)), 500

@bp_embalar.route('/api/embalar/bipados/<id_agend_ml>')
def api_embalar_bipados(id_agend_ml):
    select_sql = """
        SELECT id_prod_ml, bipados
        FROM embalagem_bipados
        WHERE id_agend_ml = %s
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(select_sql, (id_agend_ml,))
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return jsonify([{'id_prod_ml': r[0], 'bipados': r[1]} for r in rows])
    except Exception as e:
        print(f"Erro em api_embalar_bipados: {e}")
        return jsonify(error=str(e)), 500
    
# cria uma nova caixa
@bp_embalar.route("/api/embalar/caixa", methods=["POST"])
def criar_caixa():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    if not id_agend:
        return jsonify(error="id_agend_ml obrigatório"), 400

    # conta quantas caixas já existem pra esse agendamento
    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM embalagem_caixas WHERE id_agend_ml=%s", (id_agend,))
    num = cur.fetchone()[0] + 1
    cur.execute("INSERT INTO embalagem_caixas (id_agend_ml, caixa_num) VALUES (%s, %s)",
                (id_agend, num))
    conn.commit()
    cur.close()
    conn.close()
    return jsonify(caixa_num=num), 201

@bp_embalar.route("/api/embalar/caixa/item", methods=["POST"])
def adicionar_item_caixa():
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    caixa_num = data.get("caixa_num")
    sku = data.get("sku")
    if not all([id_agend, caixa_num, sku]):
        return jsonify(error="Parâmetros inválidos"), 400

    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor()
    # tenta inserir, ou incrementa se já existir
    cur.execute("""
        INSERT INTO embalagem_caixa_itens (id_agend_ml, caixa_num, sku, quantidade)
        VALUES (%s,%s,%s,1)
        ON DUPLICATE KEY UPDATE quantidade = quantidade + 1
    """, (id_agend, caixa_num, sku))
    conn.commit()
    # lê quantidade atual
    cur.execute("""
    SELECT quantidade FROM embalagem_caixa_itens
    WHERE id_agend_ml=%s AND caixa_num=%s AND sku=%s
    """, (id_agend, caixa_num, sku))
    qtd = cur.fetchone()[0]
    cur.close()
    conn.close()
    return jsonify(caixa_num=caixa_num, sku=sku, quantidade=qtd), 200

@bp_embalar.route("/api/embalar/caixa/<id_agend_ml>", methods=["GET"])
def buscar_caixas(id_agend_ml):
    conn = mysql.connector.connect(**_db_config)
    cur  = conn.cursor(dictionary=True)
    # primeiro todas as caixas
    cur.execute("SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml=%s ORDER BY caixa_num", (id_agend_ml,))
    caixas = [r["caixa_num"] for r in cur.fetchall()]
    resultado = []
    for num in caixas:
        cur.execute("""
            SELECT sku, quantidade FROM embalagem_caixa_itens
            WHERE id_agend_ml=%s AND caixa_num=%s
        """, (id_agend_ml, num))
        rows = cur.fetchall()
        itens = [{"sku":   row["sku"],
            "quantidade": row["quantidade"]}
            for row in rows
        ]
        resultado.append({"caixa_num": num, "itens": itens})
    cur.close()
    conn.close()
    return jsonify(resultado)


@bp_embalar.route('/api/embalar/iniciar', methods=['POST'])
def iniciar_embalagem():
    """Cria um registro para um produto no início da embalagem com 0 bipados."""
    data = request.get_json() or {}
    id_agend = data.get("id_agend_ml")
    id_prod_ml = data.get("id_prod_ml")

    if not id_agend or not id_prod_ml:
        return jsonify(error="Parâmetros 'id_agend_ml' e 'id_prod_ml' são obrigatórios."), 400

    # Insere com 0 ou atualiza para 0 se já existir por algum motivo
    sql = """
        INSERT INTO embalagem_bipados (id_agend_ml, id_prod_ml, bipados)
        VALUES (%s, %s, 0)
        ON DUPLICATE KEY UPDATE bipados = 0
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur = conn.cursor()
        cur.execute(sql, (id_agend, id_prod_ml))
        conn.commit()
        cur.close()
        conn.close()
        return jsonify(success=True, message="Produto iniciado na embalagem.")
    except Exception as e:
        print(f"Erro em iniciar_embalagem: {e}")
        return jsonify(error=str(e)), 500

│  ├─ erro.py
from main import app, render_template, ParametroInvalido, MetodoInvalido, LimiteRequests, ArquivoInvalido

def error_handler(err):
    err_txt = err.description.split('///')
    return render_template("erro.html", erro_title=err_txt[0], erro_msg_primary=err_txt[1], erro_msg_secondary=err_txt[2], erro_code=err.code)

app.register_error_handler(ParametroInvalido, error_handler)
app.register_error_handler(MetodoInvalido, error_handler)
app.register_error_handler(LimiteRequests, error_handler)
app.register_error_handler(ArquivoInvalido, error_handler)
│  ├─ excluir_agendamento.py
from main import app, jsonify, agendamento_controller

@app.route('/agendamento/excluir/<int:id_agendamento>', methods=['DELETE'])
def excluir_agendamento_route(id_agendamento):
    """
    Rota para lidar com requisições de exclusão de agendamentos.
    """
    if not id_agendamento:
        return jsonify({"success": False, "message": "ID do agendamento não fornecido."}), 400

    sucesso = agendamento_controller.excluir_agendamento_completo(id_agendamento)

    if sucesso:
        return jsonify({"success": True, "message": "Agendamento excluído com sucesso."})
    else:
        return jsonify({"success": False, "message": "Erro ao excluir o agendamento."}), 500
│  ├─ expedicao.py
from flask import jsonify, redirect, url_for
from main import app, render_template, agendamento_controller, db_controller, ParametroInvalido, access
from datetime import datetime
import json

@app.route('/expedicao/<int:id_agend_bd>')
def expedicao(id_agend_bd: int):
    if not id_agend_bd:
        raise ParametroInvalido()

    # 1. Carrega o agendamento corretamente (esta parte está certa)
    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(id_bd=id_agend_bd)
    agendamento_obj = agendamento_controller.get_last_made_agendamento()
    agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)

    if not agendamento_obj or not agendamento_obj.id_agend_ml:
        return "Erro: Agendamento não encontrado no banco de dados.", 404

    # 2. Busca os dados das caixas (esta parte está certa)
    caixas_data = db_controller.get_caixas_by_agendamento_ml(agendamento_obj.id_agend_ml)

    # 3. *** CORREÇÃO ESSENCIAL ***
    # Prepara a lista de produtos para ser enviada ao JavaScript.
    # Isso resolve o erro 'TypeError' pois converte os objetos Python para dicionários aqui.
    produtos_para_json = [p.to_dict() for p in agendamento_obj.produtos]

    # 4. Renderiza o template, passando a nova lista preparada
    return render_template(
        "expedicao.html", 
        dados_agend=agendamento_obj,
        caixas=caixas_data,
        todos_os_produtos_json=produtos_para_json  # Passa a lista já pronta
    )
    
@app.route('/expedicao/finalizar/<int:id_agend_bd>', methods=['POST'])
def finalizar_embalagem(id_agend_bd):
    """
    Finaliza a fase de embalagem, gera um relatório e move o agendamento para a expedição.
    """
    try:
        # 1. Carrega o agendamento completo a partir do banco de dados
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=id_agend_bd)
        agend = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend)

        if not agend:
            return jsonify({"success": False, "message": "Agendamento não encontrado."}), 404

        # 2. Busca dados das caixas e itens embalados para o relatório
        caixas_result = access.custom_select_query(
            "SELECT caixa_num FROM embalagem_caixas WHERE id_agend_ml = %s ORDER BY caixa_num",
            (agend.id_agend_ml,)
        )
        
        caixas_relatorio = []
        if caixas_result:
            for caixa_row in caixas_result:
                caixa_num = caixa_row[0]
                # Busca os itens na caixa, incluindo o nome do produto
                itens_result = access.custom_select_query(
                    """SELECT i.sku, i.quantidade, p.nome_prod
                    FROM embalagem_caixa_itens i
                    LEFT JOIN produtos_agend p ON i.sku = p.sku_prod AND p.id_agend_prod = %s
                    WHERE i.id_agend_ml = %s AND i.caixa_num = %s
                    """,
                    (agend.id_bd, agend.id_agend_ml, caixa_num)
                )
                itens_caixa = [{"sku": item[0], "quantidade": item[1], "nome": item[2]} for item in itens_result] if itens_result else []
                caixas_relatorio.append({"caixa_numero": caixa_num, "itens": itens_caixa})

        # 3. Monta o payload do relatório de embalagem
        relatorio_payload = {
            "tipo_relatorio": "embalagem",
            "termino_embalagem": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            "detalhes_embalagem": {
                "total_caixas": len(caixas_relatorio),
                "caixas": caixas_relatorio
            }
        }

        # 4. Busca o relatório de conferência existente para adicionar as novas informações
        relatorio_final = {}
        relatorio_existente_raw = access.custom_select_query(
            "SELECT relatorio FROM relatorio_agend WHERE id_agend_ml = %s", (agend.id_agend_ml,)
        )
        if relatorio_existente_raw and relatorio_existente_raw[0][0]:
            relatorio_final = json.loads(relatorio_existente_raw[0][0])

        # Adiciona os dados de embalagem ao relatório geral
        relatorio_final['RelatorioEmbalagem'] = relatorio_payload

        # 5. Salva o relatório atualizado no banco
        access.custom_i_u_query(
            """INSERT INTO relatorio_agend (id_agend_ml, relatorio) VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE relatorio = VALUES(relatorio)""",
            [(agend.id_agend_ml, json.dumps(relatorio_final, ensure_ascii=False))]
        )

        # 6. Altera o tipo do agendamento para Expedição (ID 5)
        agend.set_tipo(5)
        agendamento_controller.update_agendamento(agend)

        return jsonify({"success": True, "message": "Embalagem finalizada. Agendamento movido para expedição."})

    except Exception as e:
        print(f"Erro ao finalizar embalagem: {e}")
        return jsonify({"success": False, "message": str(e)}), 500
│  ├─ health_check.py
from main import app, agendamento_controller, jsonify

@app.route("/health")
def health_check():
    try:
        # Test database connection
        agendamento_controller.test_connection()
        return jsonify({"status": "healthy", "database": "connected"}), 200
    except Exception as e:
        return jsonify({"status": "unhealthy", "error": str(e)}), 500

│  ├─ homepage.py
from main import app, render_template, session

""" Leva para a página 'index' e cria varíaveis na sessão """
@app.route('/')
def homepage():
    session['id_agendamento'] = ''
    session['agend_process_done'] = False
    session['estoque_tiny_done'] = False
    return render_template('index.html')
│  ├─ imprimir_composicoes.py
from main import app, render_template, agendamento_controller, jsonify

@app.get("/imprimir-comp/<id_agend>")
def imprimir_composicao(id_agend:int):
    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(id_bd=id_agend)
    
    agendamento_obj = agendamento_controller.get_last_made_agendamento()
    
    agendamento_controller.create_agendamento_from_bd_data(agendamento_obj)
    
    return_val = agendamento_controller.return_comp_grouped(agendamento_obj)
    
    print(return_val[0].comp_origem[0].localizacao)

    return render_template("imprimir_composicoes.html", comps=sorted(return_val, key=lambda obj: obj.comp_origem[0].localizacao), agendamento=agendamento_obj)

│  ├─ process_pdf.py
from main import app, redirect, url_for, agendamento_controller
from classes.models import Agendamento

""" Faz o BackEnd processar o arquivo PDF baixado e envia os dados ao banco de dados """
@app.route('/process-pdf/<path>/<type>')
def process_pdf(path, type):
    pdf_path = f"{app.config['UPLOAD_FOLDER']}/{path}"
    agendamento_controller.create_agendamento_from_pdf(
        pdf_path=pdf_path,
        id_agend_ml=path.split('-')[1],
        id_tipo=type,
        empresa=0,
        id_mktp=1,
        colaborador=''
    )
    agendamento:Agendamento = agendamento_controller.agendamentos[-1]
    agendamento_controller.get_prod_data_tiny(agendamento)
    agendamento_controller.get_comp_tiny(agendamento)
    agendamento_controller.get_comp_data_tiny(agendamento)

    agendamento_controller.insert_agendamento_in_bd(agendamento)
    # Como é feito após uma inserção, nunca acontecerá de não haver resposta
    id_agend_bd = agendamento_controller.get_last_made_agendamento_in_bd()[0]

    agendamento_controller.set_id_bd_for_all(agendamento, id_agend_bd)

    agendamento_controller.insert_produto_in_bd(agendamento)

    for i in agendamento_controller.return_all_produtos_from_agendamento(agendamento):
        produto = agendamento_controller.search_produto(agendamento, 'etiqueta', i[2])
        produto.set_id_bd(i[0])
        produto.set_id_bd_for_composicoes()

    agendamento_controller.set_error_flags_composicoes(agendamento)

    agendamento_controller.insert_composicao_in_bd(agendamento)

    return redirect(url_for('agendamentos', acao='ver'))

│  ├─ reservados.py
from main import app, render_template

@app.route('/reservados')
def reservados():
    # aqui você pode buscar os "reservados" no banco e passar ao template
    dados_reservados = []  # substitua pela sua lógica
    return render_template('reservados.html', dados=dados_reservados)

│  ├─ retiradoEstoque.py
import json
import mysql.connector
from flask import render_template, Blueprint, request, jsonify, current_app as app, redirect, url_for
from datetime import datetime
from classes.models import Agendamento
from main import agendamento_controller

bp_retirado = Blueprint('retirado', __name__)

# Configuração de acesso ao MySQL
_db_config = {
    'host': '192.168.15.200',
    'port': 3306,
    'user': 'Bruno_Lallo',
    'password': 'ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF',
    'database': 'jp_bd',
    'autocommit': True
}

@bp_retirado.route('/api/bipar', methods=['POST'])
def api_bipar():
    data     = request.get_json() or {}
    id_agend = data.get('id_agend')
    sku      = data.get('sku')
    quant    = int(data.get('quant', 1))

    if not id_agend or not sku:
        return jsonify(error="Parâmetros 'id_agend' e 'sku' são obrigatórios"), 400

    insert_sql = """
        INSERT INTO agendamento_produto_bipagem (id_agend_ml, sku, bipados)
        VALUES (%s, %s, %s)
        ON DUPLICATE KEY UPDATE bipados = bipados + %s
    """
    select_sql = """
        SELECT bipados
        FROM agendamento_produto_bipagem
        WHERE id_agend_ml = %s
        AND sku         = %s
    """

    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(insert_sql, (id_agend, sku, quant, quant))
        cur.execute(select_sql, (id_agend, sku))
        row = cur.fetchone()
        novo = row[0] if row else 0
        cur.close()
        conn.close()
        return jsonify(sku=sku, bipados=novo)
    except Exception as e:
        app.logger.exception("Erro em api_bipar")
        return jsonify(error=str(e)), 500


@bp_retirado.route('/api/bipados/<int:id_agend>')
def api_bipados_agend(id_agend):
    select_sql = """
        SELECT sku, bipados
        FROM agendamento_produto_bipagem
        WHERE id_agend_ml = %s
    """
    try:
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(select_sql, (id_agend,))
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return jsonify([{'sku': r[0], 'bipados': r[1]} for r in rows])
    except Exception as e:
        app.logger.exception("Erro em api_bipados_agend")
        return jsonify(error=str(e)), 500


@bp_retirado.route('/retirado', methods=['GET', 'POST'])
def retirado_estoque():
    if request.method == "GET":
        agendamento_controller.clear_agendamentos()
        # Corrigido para lidar com IDs que podem não ser inteiros inicialmente
        id_agendamento = request.args['id']
        agendamento_controller.insert_agendamento(id_bd=int(id_agendamento))
        agend: Agendamento = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(agend)
        agendamento_controller.set_error_flags_composicoes(agend)

        tipo = int(request.args.get('tipo', 0))

        if tipo == 1:
            return render_template(
            'limpeza.html',
            dados=agendamento_controller.search_agendamento('id_bd', str(agend.id_bd)),
            comps=agendamento_controller.return_all_in_dict(agend)
            )

        elif tipo == 4: # Fase "Embalar"
            comps = []
            for p in agend.produtos:
                pd = p.to_dict() 
                pd['imagemUrl'] = pd.pop('imagem_url', '') 
                pd['composicoes'] = []
                for c in p.composicoes:
                    comp_dict = c.to_dict()
                    comp_dict['imagem_url'] = comp_dict.get('imagem_url', '')
                    pd['composicoes'].append(comp_dict)
                comps.append(pd)
            return render_template(
                'embalar.html',
                dados=agend,
                comps=comps, 
                dados_agend=agend
            )

        elif tipo == 5:
            return redirect(url_for('expedicao', id_agend_bd=agend.id_bd))

        else:
            pode_mudar = request.args.get('mudar', 'False').lower() == 'true'
            return render_template(
                'retiradoEstoque.html',
                dados=agendamento_controller.return_comp_grouped(agend),
                pode_mudar=pode_mudar,
                dados_agend=agendamento_controller.get_last_made_agendamento()
            )

    # ─── se for POST (finaliza e redireciona para embalar) ───────────────────
    agendamento_controller.clear_agendamentos()
    agendamento_controller.insert_agendamento(request.form['inp_id_pedido'])
    agend: Agendamento = agendamento_controller.get_last_made_agendamento()
    agendamento_controller.create_agendamento_from_bd_data(agend)
    agendamento_controller.set_error_flags_composicoes(agend)
    agendamento_controller.set_empresa_colaborador_agend(
        agend,
        request.form.get('inp_nome_emp', ''),
        request.form.get('inp_nome_col', '')
    )
    agendamento_controller.update_empresa_colaborador_bd(agend)

    # Marca como embalar
    agend.set_tipo(4)
    agendamento_controller.update_agendamento(agend)

    # ─── Recria o comps serializável para o POST também ────────────────
    comps = []
    for p in agend.produtos:
        pd = p.to_dict()
        # Busca e adiciona a URL da imagem
        pd['imagemUrl'] = agendamento_controller.get_product_image_url(p.sku)
        pd['composicoes'] = [c.to_dict() for c in p.composicoes]
        comps.append(pd)
    # ────────────────────────────────────────────────────────────────────

    return render_template(
        'embalar.html',
        dados=agendamento_controller.search_agendamento('id_bd', agend.id_bd),
        comps=comps,
        dados_agend=agend
    )


@bp_retirado.route('/relatorio/finalizar/<int:id_agend>', methods=['POST'])
def finalizar_conferencia(id_agend):
    """
    Finaliza a fase de conferência, gera um relatório e move o agendamento para Embalar.
    """
    try:
        # Carrega o agendamento em memória
        agendamento_controller.clear_agendamentos()
        agendamento_controller.insert_agendamento(id_bd=id_agend)
        ag = agendamento_controller.get_last_made_agendamento()
        agendamento_controller.create_agendamento_from_bd_data(ag)

        # ----- O bloco de geração de relatório permanece o mesmo -----
        inicio = ag.entrada
        termino = datetime.now()
        duracao = termino - inicio
        informacoes = {
            "Agendamento": ag.id_agend_ml,
            "Empresa": {1:"Jaú Pesca",2:"Jaú Fishing",3:"L.T. Sports"}.get(ag.empresa, ""),
            "DataInicio": inicio.strftime("%d/%m/%Y %Hh %Mm %Ss"),
            "DataTerminoConferencia": termino.strftime("%d/%m/%Y %Hh %Mm %Ss"),
            "Permanencia": f"{duracao.seconds//3600:02d}h {(duracao.seconds%3600)//60:02d}m {duracao.seconds%60:02d}s"
        }
        colaboradores = [{"Colaborador": ag.colaborador}]
        rel = []
        for p in ag.produtos:
            total = sum(c.unidades_totais for c in p.composicoes) or p.unidades
            kits = [{"codigo_tiny_kit": c.id_tiny, "sku_kit": c.prod_sku} for c in p.composicoes]
            historico = []
            rel.append({
                "sku": p.sku, "codigo_de_barras":p.gtin, "codigo_tiny": p.id_tiny or None,
                "nome": p.nome, "unidades_totais": str(total), "faz_parte_de": kits, "historico": historico
            })
        payload = {
            "Informacoes": informacoes, "Colaboradores": colaboradores, "RelatorioConferencia": rel
        }
        # ----------------------------------------------------------------

        # Salva no banco
        conn = mysql.connector.connect(**_db_config)
        cur  = conn.cursor()
        cur.execute(
            "INSERT INTO relatorio_agend (id_agend_ml, relatorio) VALUES (%s, %s) ON DUPLICATE KEY UPDATE relatorio = VALUES(relatorio)",
            (ag.id_agend_ml, json.dumps(payload, ensure_ascii=False))
        )
        conn.commit()
        cur.close()
        conn.close()

        # Marca como Embalar (ID 4)
        ag.set_tipo(4)
        agendamento_controller.update_agendamento(ag)

        # Retorna uma resposta de sucesso padronizada
        return jsonify({"success": True, "message": "Conferência finalizada! O agendamento foi movido para a Embalagem."})

    except Exception as e:
        app.logger.exception("Falha ao finalizar conferência e salvar relatório")
        return jsonify({"success": False, "message": f"Erro ao finalizar: {e}"}), 500
│  ├─ teste.py
from main import app, render_template, agendamento_controller

@app.route('/teste-2')
def teste_2():
    agendamento_controller.clear_agendamentos()
    agendamento_controller.create_agendamento_for_compras()
    for i in agendamento_controller.agendamentos:
        print(len(i.produtos))
    dados = agendamento_controller.create_joined_agendamento()
    #print(dados)
    return render_template('teste.html', dados=agendamento_controller.return_joined_agend_in_dict(dados))
    #agendamento_controller.clear_agendamentos()
    #agendamento_controller.insert_agendamento(1)
    #agendamento_controller.create_agendamento_from_bd_data(agendamento_controller.get_last_made_agendamento())
    #return render_template('teste.html', dados=agendamento_controller.return_all_in_dict(agendamento_controller.get_last_made_agendamento()))
│  ├─ upload_excel.py
from werkzeug.utils import secure_filename
from main import (
    app,
    request,
    redirect,
    url_for,
    flash,
    render_template,
    session,
    ALLOWED_EXTENSIONS,
    MetodoInvalido,
    ArquivoInvalido,
    agendamento_controller,
    db_controller  
)
import os
import uuid
import random
import string
import pandas as pd

def mime_permitido(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/upload-excel', methods=['POST'])
def upload_excel():
    try:
        file = request.files.get('file')
        if not file or not mime_permitido(file.filename):
            flash("Arquivo inválido ou não selecionado", 'danger')
            raise ArquivoInvalido()

        # salva o arquivo no disco
        filename = secure_filename(file.filename)
        save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(save_path)

        # 1) registro do upload
        upload_uuid = str(uuid.uuid4())
        db_controller.insert_excel_upload((upload_uuid, filename))

        # 2) cria o Agendamento em memória a partir do Excel
        ag = agendamento_controller.create_agendamento_from_excel(
            excel_path=save_path,
            id_tipo=int(request.form.get('tipo', 0)),
            empresa=int(request.form.get('empresa', 0)),
            id_mktp=int(request.form.get('marketplace', 0)),
            colaborador=request.form.get('colaborador', ''),
            upload_uuid=upload_uuid
        )

        agendamento = agendamento_controller.agendamentos[-1]
        agendamento_controller.get_prod_data_tiny(agendamento)
        agendamento_controller.get_comp_tiny(agendamento)
        agendamento_controller.get_comp_data_tiny(agendamento)

        # ─── NOVO ───
        # 2.5) gera um pedido fake de 8 dígitos e sobrescreve o id_agend_ml
        fake_pedido = ''.join(random.choices(string.digits, k=8))
        ag.id_agend_ml = fake_pedido
        # ───────────

        # 3) insere o Agendamento no BD e pega seu id interno (id_bd)
        agendamento_controller.insert_agendamento_in_bd(ag)
        last_id = agendamento_controller.get_last_made_agendamento_in_bd()[0]
        agendamento_controller.set_id_bd_for_all(ag, last_id)

        # 4) insere os produtos
        agendamento_controller.insert_produto_in_bd(ag)

        # 5) atualiza os produtos em memória com o id_prod que foi gerado no insert
        for rec in agendamento_controller.return_all_produtos_from_agendamento(ag):
            inserted_prod_id = rec[0]    # id_prod do BD
            sku_prod          = rec[4]    # sku_prod vindo do tuple
            produto_obj = agendamento_controller.search_produto(ag, 'sku', sku_prod)
            if produto_obj:
                produto_obj.set_id_bd(inserted_prod_id)
                produto_obj.set_id_bd_for_composicoes()

        # 6) insere as composições (foreign-key já ajustado pelo passo 5)
        agendamento_controller.insert_composicao_in_bd(ag)

        # 7) redireciona para a view do Excel (ou cleaning) passando o uuid
        return redirect(url_for('agendamentos', acao='ver') + "?upload=ok_excel")

    except Exception as e:
        print(f"Erro ao processar EXCEL: {e}")
        erro_msg = "erro_desconhecido"
        err_str = str(e).lower()
        if "gtin" in err_str:
            erro_msg = "gtin_vazio"
        elif "arquivo inválido" in err_str:
            erro_msg = "arquivo_invalido"
        elif "excel" in err_str:
            erro_msg = "erro_excel"
        elif "database" in err_str:
            erro_msg = "erro_banco"

        return redirect(
            url_for('agendamentos', acao='ver')
            + f"?upload=fail&erro={erro_msg}"
        )

│  ├─ upload_pdf.py
import re
from mysql.connector import IntegrityError
from werkzeug.utils import secure_filename
from main import (
    app,
    request,
    redirect,
    url_for,
    flash,
    session,
    ALLOWED_EXTENSIONS,
    MetodoInvalido,
    ArquivoInvalido,
    agendamento_controller
)
import os


def mime_permitido(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/upload-pdf', methods=['POST'])
def upload():
    print(request.form)
    try:
        # 1) valida upload
        if 'path' not in request.files:
            flash("PDF não foi enviado")
            raise ArquivoInvalido()

        file = request.files['path']
        if file.filename == '' or not mime_permitido(file.filename):
            flash('Arquivo inválido ou não selecionado')
            raise ArquivoInvalido()

        # 2) salva o PDF
        filename = secure_filename(file.filename)
        path_pdf = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(path_pdf)

        # 3) extrai id do ML do nome do arquivo
        try:
            novo_id_ml = filename.split('-')[1]
        except IndexError:
            return redirect('/error/0')

        # 4) Dados do formulário
        id_bd_str = request.form.get('id_bd', '').strip() or '0'
        try:
            id_bd = int(id_bd_str)
        except ValueError:
            id_bd = 0

        colab   = session.get('nome_display_usuario', '')
        empresa = int(request.form.get('empresa', '0'))
        mktp    = int(request.form.get('marketplace', '0'))
        tipo    = int(request.form.get('tipo', '0'))
        centro  = request.form.get('centro_distribuicao', None) 
        
        id_agendamento = novo_id_ml

        # === ATUALIZAÇÃO ===
        if id_bd:
            sucesso, msg = agendamento_controller.update_pdf_agendamento(
                id_bd=id_bd,
                colaborador=colab,
                empresa=empresa,
                id_mktp=mktp,
                id_tipo=tipo,
                pdf_path=path_pdf,
                new_id_agend_ml=novo_id_ml,
                centro_distribuicao=centro
            )
            if not sucesso:
                raise Exception(msg)
            # CORREÇÃO: Mudei o parâmetro para 'atualizado=ok' para dar um feedback melhor ao usuário
            return redirect(url_for('agendamentos', acao='ver', atualizado='ok'))

        # === NOVO AGENDAMENTO ===

        # --- VERIFICAÇÃO DE DUPLICIDADE MOVIDA PARA CÁ ---
        # Agora, a checagem só acontece se NÃO for uma atualização (id_bd é 0 ou nulo)
        if agendamento_controller.db_controller.exists_agendamento_ml(id_agendamento):
            print(f"Tentativa de criar agendamento duplicado: {id_agendamento}")
            os.remove(path_pdf) 
            return redirect(url_for('agendamentos', acao='ver', upload='fail', erro='duplicado', pedido=id_agendamento))
        
        agendamento_controller.create_agendamento_from_pdf(
            pdf_path=path_pdf,
            id_agend_ml=id_agendamento,
            id_tipo=tipo,
            empresa=empresa,
            id_mktp=mktp,
            colaborador=colab,
            centro_distribuicao=centro
        )
        agendamento = agendamento_controller.agendamentos[-1]
        agendamento_controller.get_prod_data_tiny(agendamento)
        agendamento_controller.get_comp_tiny(agendamento)
        agendamento_controller.get_comp_data_tiny(agendamento)
        
        # O try/except aqui ainda é útil para outros erros de banco de dados
        try:
            agendamento_controller.insert_agendamento_in_bd(agendamento)
        except IntegrityError as e:
            if e.errno == 1062:
                pedido = agendamento.id_agend_ml
                return redirect(
                    url_for('agendamentos', acao='ver', upload='fail', erro='duplicado', pedido=pedido)
                )

        id_agend_bd = agendamento_controller.get_last_made_agendamento_in_bd()[0]
        agendamento_controller.set_id_bd_for_all(agendamento, id_agend_bd)
        agendamento_controller.insert_produto_in_bd(agendamento)

        for tpl in agendamento_controller.return_all_produtos_from_agendamento(agendamento):
            produto = agendamento_controller.search_produto(agendamento, 'id_ml', tpl[2])
            if not produto:
                app.logger.warning(f"Produto não encontrado para o id_ml {tpl[2]}")
                continue
            
            produto.set_id_bd(tpl[0])
            produto.set_id_bd_for_composicoes()

        agendamento_controller.set_error_flags_composicoes(agendamento)
        agendamento_controller.insert_composicao_in_bd(agendamento)

        return redirect(url_for('agendamentos', acao='ver') + "?upload=ok_pdf")

    except Exception as e:
        print(f"Erro ao processar PDF: {e}")
        msg = str(e).lower()

        # primeiro, testamos duplicado
        if "já existe" in msg or "duplicado" in msg:
            # tenta extrair o número do pedido de dentro da mensagem
            m = re.search(r'(\d+)', str(e))
            pedido = m.group(1) if m else ''
            return redirect(
                url_for('agendamentos', acao='ver')
                + f'?upload=fail&erro=duplicado&pedido={pedido}'
            )

        # senão, mapeamos os outros erros como antes
        erro_msg = "erro_desconhecido"
        if "gtin" in msg:
            erro_msg = "gtin_vazio"
        elif "arquivo inválido" in msg:
            erro_msg = "arquivo_invalido"
        elif "pdf" in msg:
            erro_msg = "erro_pdf"
        elif "database" in msg:
            erro_msg = "erro_banco"

        return redirect(
            url_for('agendamentos', acao='ver')
            + f'?upload=fail&erro={erro_msg}'
        )
│  └─ view_excel.py
from main import app, db_controller, render_template
import pandas as pd, os

@app.route('/view-excel/<uuid>')
def show_excel(uuid):
    rec = db_controller.get_excel_upload(uuid)
    _, _, filename, _ = rec
    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    df = pd.read_excel(path, engine='openpyxl')
    html = df.to_html(classes='table table-striped table-hover', index=False)
    return render_template('view_excel.html', filename=filename, data_table=html)
├─ static/
│  ├─ agendamentos/
│  │  ├─ agendamentos.css
│  │  └─ agendamentos.js
│  ├─ alteracoes/
│  │  ├─ alteracoes.css
│  │  └─ alteracoes.js
│  ├─ alterar_agendamento/
│  │  ├─ alt_agend.css
│  │  └─ alt_agend.js
│  ├─ compras/
│  │  ├─ compras.css
│  │  └─ compras.js
│  ├─ config/
│  │  └─ config.css
│  ├─ embalar/
│  │  ├─ embalar.css
│  │  └─ embalar.js
│  ├─ erro/
│  │  ├─ erro.css
│  │  └─ erro.js
│  ├─ expedicao/
│  │  ├─ expedicao.css
│  │  └─ expedicao.js
│  ├─ homepage/
│  │  ├─ homepage.css
│  │  └─ homepage.js
│  ├─ imprimir_composicoes/
│  │  ├─ imprimir_composicoes.css
│  │  └─ imprimir_composicoes.js
│  ├─ limpeza/
│  │  ├─ limpeza.css
│  │  └─ limpeza.js
│  ├─ login/
│  │  ├─ login.css
│  │  └─ login.js
│  ├─ novoAgendamento/
│  │  └─ novoAgend.css
│  ├─ reservados/
│  │  ├─ reservados.css
│  │  └─ reservados.js
│  ├─ resources/
│  │  ├─ logo.png
│  │  ├─ sem_img.png
│  │  ├─ seta_baixo.png
│  │  └─ wallpaper_jaupesca.svg
│  ├─ retiradoEstoque/
│  │  ├─ retiradoEstoque.css
│  │  └─ retiradoEstoque.js
│  ├─ global.css
│  └─ global.js
├─ temp/
│  └─ ARQUIVOS AQUI SAO EXCLUIDOS
├─ template/
│  ├─ partials/
|  │  └─ form_editar_agendamento.html
<form id="form_alt" method="post" action="/alterar-agendamento">
    <div class="row g-3">
        <!-- <div class="col-md-6">
            <label for="inp_col" class="form-label">Nome do colaborador:</label>
            <input name="inp_col" id="inp_col" class="form-control" type="text" value="{{ dados.colaborador }}">
        </div> -->

        <input name="inp_ml" type="hidden" value="{{ dados.id_agend_ml }}">

        <div class="col-md-6">
            <label for="inp_mktp" class="form-label">Loja do agendamento:</label>
            <select name="inp_mktp" id="inp_mktp" class="form-control">
                <option value="4" {% if dados.id_mktp==4 %} selected {% endif %}>Amazon</option>
                <option value="2" {% if dados.id_mktp==2 %} selected {% endif %}>Magalu</option>
                <option value="1" {% if dados.id_mktp==1 %} selected {% endif %}>Mercado Livre</option>
                <option value="3" {% if dados.id_mktp==3 %} selected {% endif %}>Shopee</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_emp" class="form-label">Empresa do agendamento:</label>
            <select name="inp_emp" id="inp_emp" class="form-control">
                <option value="2" {% if dados.empresa==2 %} selected {% endif %}>Jaú Fishing</option>
                <option value="3" {% if dados.empresa==3 %} selected {% endif %}>L.T. Sports</option>
                <option value="1" {% if dados.empresa==1 %} selected {% endif %}>Jaú Pesca</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_tipo" class="form-label">Fase do agendamento:</label>
            <select name="inp_tipo" id="inp_tipo" class="form-control">
                <option value="1" {% if dados.id_tipo==1 %} selected {% endif %}>Limpeza</option>
                <option value="3" {% if dados.id_tipo==3 %} selected {% endif %}>Conferência</option>
                <option value="4" {% if dados.id_tipo==4 %} selected {% endif %}>Embalar</option>
                <option value="5" {% if dados.id_tipo==5 %} selected {% endif %}>Expedição</option>
                <option value="2" {% if dados.id_tipo==2 %} selected {% endif %}>Finalizado</option>
            </select>
        </div>
    </div>

    <input name="inp_id" type="hidden" value="{{ dados.id_bd }}">

    <div class="row mt-4">
        <div class="col">
            <input type="submit" class="btn btn-primary-custom w-100" value="Salvar Alterações"
                style="background: #0B5ED7; color: white">
        </div>
    </div>
</form>
│  ├─ agendamentos.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='agendamentos/agendamentos.css') }}
{% endblock %}

{% block content %}
<!-- Colaborador já logado -->
<input type="hidden" id="nome_colaborador" value="{{ session.nome_display_usuario }}">
<div class="container pt-4">

    <!-- 1) Botão “Filtros” — só aparece em telas < md -->
    <div class="d-md-none text-end mb-3">
        <button class="btn btn-outline-primary new-agend" type="button" data-bs-toggle="collapse"
            data-bs-target="#filterPanel" aria-expanded="false" aria-controls="filterPanel">
            <i class="bi bi-funnel-fill"></i> Filtros
        </button>
    </div>

    <!-- 2) Painel de filtros:
     - collapse esconde em mobile
     - d-md-block anula o collapse em ≥768px -->
    <div class="collapse d-md-block card mb-4 p-3" id="filterPanel">
        <div class="row g-3 row-cols-1 row-cols-sm-2 row-cols-md-4 new-agend mb-2">
            <div class="col">
                <label class="form-label">Status</label>
                <select id="inp_status_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todos</option>
                    <option value="1">Limpeza</option>
                    <option value="3">Conferência</option>
                    <option value="4">Embalar</option>
                    <option value="5">Expedição</option>
                    <option value="2">Finalizado</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Empresa</label>
                <select id="inp_emp_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todas</option>
                    <option value="0">Nenhuma</option>
                    <option value="1">Jaú Pesca</option>
                    <option value="2">Jaú Fishing</option>
                    <option value="3">L.T. Sports</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Loja</label>
                <select id="inp_mktp_pedido" class="form-select" onchange="setFiltros()">
                    <option selected>Todas</option>
                    <option value="1">Mercado Livre</option>
                    <option value="2">Magalu</option>
                    <option value="3">Shopee</option>
                    <option value="4">Amazon</option>
                </select>
            </div>
            <div class="col">
                <label class="form-label">Nº Pedido</label>
                <input id="inp_num_pedido" type="text" class="form-control" placeholder="Digite o número do pedido"
                    oninput="setFiltros()">
            </div>
        </div>
    </div>

    <!-- 
    <form action="/upload-excel" method="post" enctype="multipart/form-data">
        <input type="file" name="file"
            accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
        <input type="submit" value="Upload">
    </form>

    <br><br> -->

    <!-- Botão “Novo Agendamento” -->
    <a href="/agendamentos/criar" class="card add-new-agendamento mb-3 text-center text-decoration-none">
        <div class="card-body new-agend">
            <i class="bi bi-plus-circle me-2"></i> Novo Agendamento
        </div>
    </a>


    <div class="container p-1 list-scroll">
        {% for agendamento in dados %}
        <div class="card mb-3 agendamento-container emp-{{ agendamento.empresa }} tipo-{{ agendamento.id_tipo }} id-{{ agendamento.id_agend_ml }} id_mktp-{{ agendamento.id_mktp }}"
            data-centro="{{ agendamento.centro_distribuicao or '' }}">
            <div class="card-body d-block d-sm-flex justify-content-between align-items-center">
                <div>
                    <span class="badge
                        {% if agendamento.id_tipo == 1 %} status-limpeza
                        {% elif agendamento.id_tipo == 2 %} status-finalizado
                        {% elif agendamento.id_tipo == 3 %} status-conferencia
                        {% elif agendamento.id_tipo == 4 %} status-embalar
                        {% elif agendamento.id_tipo == 5 %} status-expedicao
                        {% else %} bg-dark
                        {% endif %}">
                        {% if agendamento.id_tipo == 1 %} LIMPEZA
                        {% elif agendamento.id_tipo == 2 %} FINALIZADO
                        {% elif agendamento.id_tipo == 3 %} CONFERÊNCIA
                        {% elif agendamento.id_tipo == 4 %} EMBALAR
                        {% elif agendamento.id_tipo == 5 %} EXPEDIÇÃO
                        {% else %} ERRO
                        {% endif %}
                    </span> |

                    <strong>Pedido:</strong> <span class="pedido-numero">{{ agendamento.id_agend_ml }}</span> |

                    {% if agendamento.empresa is none %}
                    <span class="text-primary">Nenhuma</span> |
                    {% else %}
                    <span class="badge
                        {% if agendamento.empresa == 0 %}empresa-nenhuma
                        {% elif agendamento.empresa == 1 %}empresa-jaupesca
                        {% elif agendamento.empresa == 2 %}empresa-jaufishing
                        {% elif agendamento.empresa == 3 %}empresa-ltsports
                        {% else %}bg-dark{% endif %}">
                        {% if agendamento.empresa == 0 %}
                        Nenhuma
                        {% elif agendamento.empresa == 1 %}
                        Jaú Pesca
                        {% elif agendamento.empresa == 2 %}
                        Jaú Fishing
                        {% elif agendamento.empresa == 3 %}
                        L.T. Sports
                        {% else %}
                        Erro
                        {% endif %}
                    </span> |
                    {% endif %}

                    {% if agendamento.id_mktp is none %}
                    <span class="text-primary">Nenhuma</span> |
                    {% else %}
                    <span class="badge
                        {% if agendamento.id_mktp == 1 %}id_mktp-mercadolivre
                        {% elif agendamento.id_mktp == 2 %}id_mktp-magalu
                        {% elif agendamento.id_mktp == 3 %}id_mktp-shopee
                        {% elif agendamento.id_mktp == 4 %}id_mktp-amazon
                        {% else %}bg-dark{% endif %}">
                        {% if agendamento.id_mktp == 1 %}
                        Mercado Livre
                        {% elif agendamento.id_mktp == 2 %}
                        Magalu
                        {% elif agendamento.id_mktp == 3 %}
                        Shopee
                        {% elif agendamento.id_mktp == 4 %}
                        Amazon
                        {% else %}
                        Erro
                        {% endif %}
                    </span> |
                    {% endif %}

                    <strong>Colaborador:</strong>
                    {% if agendamento.colaborador == '' %}
                    <span class="text-primary">Nenhum</span>
                    {% else %}
                    {% set my_list = agendamento.colaborador.split(' ') %}
                    {% if my_list|length >= 2 %}
                    <span class="text-primary">{{ my_list[0] }} {{ my_list[1][0] }}.</span>
                    {% else %}
                    <span class="text-primary">{{ my_list[0] }}</span>
                    {% endif %}
                    {% endif %}
                </div>

                <div class="d-flex flex-wrap justify-content-end flex-md-nowrap flex-md-row gap-2">

                    <!-- Botão excluir -->
                    <button class="btn btn-outline-danger btn-sm" onclick="iniciarExclusao('{{ agendamento.id_bd }}')"
                        title="Excluir Agendamento">
                        <i class="bi bi-eraser"></i>
                    </button>

                    <!-- Botão composição -->
                    <a class="btn btn-outline-secondary btn-sm" href="/imprimir-comp/{{ agendamento.id_bd }}"
                        title="Imprimir composição">
                        <i class="bi bi-box-seam"></i>
                    </a>

                    <!-- Botão visualizar -->
                    <a class="btn btn-outline-secondary btn-sm"
                        href="/retirado?id={{ agendamento.id_bd }}&tipo={{ agendamento.id_tipo }}&mudar=False"
                        title="Visualizar">
                        <i class="bi bi-eye"></i>
                    </a>

                    <!-- Botão editar -->
                    <button class="btn btn-outline-secondary btn-sm"
                        onclick="abrirModalAlteracoes('{{ agendamento.id_bd }}')" title="Editar">
                        <i class="bi bi-pencil"></i>
                    </button>

                    <!-- Botão atualizar-->
                    <button class="btn btn-outline-secondary btn-sm"
                        onclick="abrirModalAtualizarPDF('{{ agendamento.id_bd }}', '{{ agendamento.id_agend_ml }}')"
                        id="btn-modal--{{ agendamento.id_bd }}--" title="Atualizar PDF do Pedido">
                        <i class="bi bi-arrow-repeat"></i>
                    </button>


                    <!-- Botão iniciar -->
                    {% if agendamento.empresa == 0 and agendamento.colaborador == '' %}
                    <button type="button" id="btn-modal--{{ agendamento.id_bd }}--{{ agendamento.id_tipo }}"
                        class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalSelecionarEmpresa"
                        onclick="changeIdAgendamento(this)">
                        Começar
                    </button>
                    {% else %}
                    <button type="button" id="btn-modal--{{ agendamento.id_bd }}--{{ agendamento.id_tipo }}"
                        class="btn btn-primary btn-sm" onclick="continuePhase(this)">
                        Continuar
                    </button>
                    {% endif %}
                </div>

            </div>
        </div>

        {% endfor %}
    </div>

    <!-- Modal Selecionar Empresa -->
    <!-- MODAL 1: Selecionar empresa -->
    <div class="modal fade" id="modalSelecionarEmpresa" tabindex="-1" aria-labelledby="modalSelecionarEmpresaLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content text-center">
                <div class="modal-header justify-content-between">
                    <h5 class="modal-title" id="modalSelecionarEmpresaLabel">Selecione a empresa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <!-- <h5 class="fw-bold">Antes de colocar a empresa, confirme o número do agendamento</h5>

                    <div id="modal-emp-agend" class="bg-primary text-white py-2 mb-3 fw-bold rounded">
                    </div>

                    <p class="text-muted">Por favor selecione a empresa</p> -->

                    <select id="nome_empresa" class="form-select mb-3">
                        <option selected disabled>Selecione a empresa</option>
                        <option value=2>Jaú Fishing</option>
                        <option value=3>L.T. Sports</option>
                        <option value=1>Pesca Jaú</option>
                    </select>

                    <button class="btn btn-secondary" onclick="abrirModalMarketplace()">OK</button>

                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 2: Selecionar Marketplace -->
    <div class="modal fade" id="modalSelecionarMarketplace" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title">Selecione o Marketplace</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- <h5 class="fw-bold">Confirme o número do agendamento</h5>
                    <div id="modal-mktp-agend" class="bg-primary text-white py-2 mb-3 fw-bold rounded"></div> -->
                    <select id="nome_marketplace" class="form-select mb-3">
                        <option selected disabled>Selecione o Marketplace</option>
                        <option value=4>Amazon</option>
                        <option value=2>Magalu</option>
                        <option value=1>Mercado Livre</option>
                        <option value=3>Shopee</option>
                    </select>

                    <button class="btn btn-secondary" onclick="abrirModalAgendamento()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modalCentroDistribuicao" tabindex="-1" aria-labelledby="modalCentroDistribuicaoLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCentroDistribuicaoLabel">Escolher Centro de Distribuição</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <select id="nome_centro_distribuicao" class="form-select mb-3">
                        <option selected disabled>Selecione o centro</option>
                        <option value="BRSP11">Guarulhos – BRSP11</option>
                        <option value="BRRC02">Sumaré – BRRC02</option>
                        <option value="BRRC01">Perus – BRRC01</option>
                        <option value="BRSP10">SP10 – BRSP10</option>
                        <option value="SP06">Araçariguama – SP06</option>
                    </select>
                    <button class="btn btn-secondary" onclick="confirmarCentro()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 3: Tipo de Agendamento -->
    <div class="modal fade" id="modalTipoAgendamento" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header">
                    <h5 class="modal-title">Tipo de Agendamento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <select id="nome_tipo" class="form-select mb-3">
                        <option selected disabled>Selecione o agendamento</option>
                        <option value=1>Limpeza</option>
                        <option value=3>Conferência</option>
                        <option value=4>Embalar</option>
                        <option value=5>Expedição</option>
                    </select>
                    <button class="btn btn-secondary" onclick="abrirModalUpload()">OK</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL 5: Upload (PDF ou Excel) -->
    <div class="modal fade" id="modalUploadPdf" tabindex="-1" aria-labelledby="modalUploadPdfLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
                <div class="modal-header justify-content-between">
                    <h5 class="modal-title" id="modalUploadPdfLabel">Upload do Pedido</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted small" id="upload_help_text">Selecione o arquivo para upload:</p>
                    <div id="info-atualizacao-pdf" class="mb-2 text-start text-muted small" style="display: none;">
                    </div>
                    <form id="form_upload_pdf" action="/upload-pdf" method="POST" enctype="multipart/form-data">
                        <input type="file" name="path" accept="application/pdf" class="form-control mb-3" required>
                        <!-- hidden inputs preenchidos pelos modais anteriores -->
                        <input type="hidden" name="id_bd" id="upload_id_bd">
                        <input type="hidden" name="colaborador" id="upload_colaborador"
                            value="{{ session.nome_display_usuario }}">
                        <input type="hidden" name="empresa" id="upload_empresa">
                        <input type="hidden" name="marketplace" id="upload_marketplace">
                        <input type="hidden" name="centro_distribuicao" id="inp_centro_distribuicao">
                        <input type="hidden" name="tipo" id="upload_tipo">
                        <button type="submit" class="btn btn-primary w-100">Enviar PDF</button>
                    </form>
                </div>
            </div>
        </div>
    </div>



    <div class="modal fade" id="modalEditarAgendamento" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <div id="editarAgendamentoContent">Carregando...</div>
                </div>
            </div>
        </div>
    </div>

    <form id="form_retirado" action="/agendamentos/criar" method="POST" style="display: none;">
        <input type="text" id="inp_id_pedido" name="inp_id_pedido">
        <input type="text" id="inp_tipo_pedido" name="inp_tipo_pedido">
        <input type="text" id="inp_nome_emp" name="inp_nome_emp">
        <input type="text" id="inp_nome_col" name="inp_nome_col">
        <input type="text" id="inp_mktp_pedido" name="inp_mktp_pedido">
    </form>

    {% endblock %}

    {% block scriptpath %}
    {{ url_for('static', filename='agendamentos/agendamentos.js') }}
    {% endblock %}
│  ├─ alteracoes.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='alteracoes/alteracoes.css') }}
{% endblock %}

{% block content %}



<div class="container p-4">
    <div class="header-bar bg-primary text-white p-3 rounded mb-2">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Título sempre visível -->
            <h5 class="mb-0">Alterações</h5>
        </div>
    </div>
    <div class="card shadow-sm mb-4">
        <div class="card-body p-0">
            <div class="table-responsive" style="max-height:70vh; overflow-y:auto;">
                <table class="table table-hover mb-0 align-middle">
                    <thead>
                        <tr>
                            <th>ID Tiny</th>
                            <th>Produto</th>
                            <th>GTIN/EAN</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for composicao in dados %}
                        <tr>
                            <td data-label="ID Tiny">{{ composicao.id_tiny }}</td>
                            <td data-label="Produto">{{ composicao.comp_origem[0].nome }}</td>
                            <td data-label="GTIN/EAN">
                                {% if composicao.comp_origem[0].gtin %}
                                {{ composicao.comp_origem[0].gtin }}
                                {% else %}
                                <span class="text-muted fst-italic">não encontrado</span>
                                {% endif %}
                            </td>
                            <td data-label="Ações">
                                <a class="tiny-link"
                                    href="https://erp.tiny.com.br/produtos#edit/{{ composicao.id_tiny }}"
                                    target="_blank">
                                    <i class="bi bi-box-arrow-up-right"></i> Abrir no Tiny
                                </a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='alteracoes/alteracoes.js') }}
{% endblock %}
│  ├─ alterar_agendamento.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='alterar_agendamento/alt_agend.css') }}
{% endblock %}

{% block content %}
<form id="form_alt" method="post" action="/alterar-agendamento">
    <div class="row g-3">
        <!-- <div class="col-md-6">
            <label for="inp_col" class="form-label">Nome do colaborador:</label>
            <input name="inp_col" id="inp_col" class="form-control" type="text" value="{{ dados.colaborador }}">
        </div> -->

        <input name="inp_ml" type="hidden" value="{{ dados.id_agend_ml }}">

        <div class="col-md-6">
            <label for="inp_mktp" class="form-label">Loja do agendamento:</label>
            <select name="inp_mktp" id="inp_mktp" class="form-control">
                <option value="4" {% if dados.id_mktp==4 %} selected {% endif %}>Amazon</option>
                <option value="2" {% if dados.id_mktp==2 %} selected {% endif %}>Magalu</option>
                <option value="1" {% if dados.id_mktp==1 %} selected {% endif %}>Mercado Livre</option>
                <option value="3" {% if dados.id_mktp==3 %} selected {% endif %}>Shopee</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_emp" class="form-label">Empresa do agendamento:</label>
            <select name="inp_emp" id="inp_emp" class="form-control">
                <option value="2" {% if dados.empresa==2 %} selected {% endif %}>Jaú Fishing</option>
                <option value="3" {% if dados.empresa==3 %} selected {% endif %}>L.T. Sports</option>
                <option value="1" {% if dados.empresa==1 %} selected {% endif %}>Jaú Pesca</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="inp_tipo" class="form-label">Fase do agendamento:</label>
            <select name="inp_tipo" id="inp_tipo" class="form-control">
                <option value="1" {% if dados.id_tipo==1 %} selected {% endif %}>Limpeza</option>
                <option value="3" {% if dados.id_tipo==3 %} selected {% endif %}>Conferência</option>
                <option value="4" {% if dados.id_tipo==4 %} selected {% endif %}>Embalar</option>
                <option value="5" {% if dados.id_tipo==5 %} selected {% endif %}>Expedição</option>
                <option value="2" {% if dados.id_tipo==2 %} selected {% endif %}>Finalizado</option>
            </select>
        </div>
    </div>

    <input name="inp_id" type="hidden" value="{{ dados.id_bd }}">

    <div class="row mt-4">
        <div class="col">
            <input type="submit" class="btn btn-primary-custom w-100" value="Salvar Alterações"
                style="background: #0B5ED7; color: white">
        </div>
    </div>
</form>
{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='alterar_agendamento/alt_agend.js') }}
{% endblock %}
│  ├─ base_template.html
<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="{{ url_for('static', filename='global.css') }}">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="{% block stylepath %} {% endblock %}">
  <link rel="shortcut icon" href="https://cdn-icons-png.flaticon.com/512/7092/7092001.png" type="image/x-icon">
  <title>{% block title %}Agendamentos Web{% endblock %}</title>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid justify-content-between align-items-center">

      <!-- Menu Hamburguer (Mobile) -->
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <!-- Conteúdo à esquerda -->
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0 fs-6">
          <!-- Agendamentos -->
          <li class="nav-item px-2">
            <a class="nav-link" href="{{ url_for('agendamentos', acao='ver') }}">
              Agendamentos
            </a>
          </li>


          <!-- Correções -->
          <li class="nav-item dropdown px-2">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown2" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Correções
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown2">
              <li><a class="dropdown-item" href="{{ url_for('alteracoes', acao='alterar') }}">Alterações</a></li>
              <li><a class="dropdown-item" href="{{ url_for('alteracoes', acao='comprar') }}">Compras</a></li>
            </ul>
          </li>

          <!-- Reservados -->
          <li class="nav-item px-2">
            <a class="nav-link" href="{{ url_for('reservados') }}">
              Reservados
            </a>
          </li>

          <!-- Config -->
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('config') }}">
              Configurações
            </a>
          </li>

        </ul>
      </div>

      <!-- Logo à direita -->
      <a class="navbar-brand ms-auto" href="{{ url_for('homepage') }}">
        <img src="{{ url_for('static', filename='/resources/logo.png') }}" alt="Logo Jaú Pesca"
          style="max-height: 40px;">
      </a>

    </div>
  </nav>


  {% block content %}
  {% endblock %}

  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
    integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
    integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
    crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="{% block scriptpath %} {% endblock %}"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>Swal.bindClickHandler();</script>
  <script src="../static/embalar/BrowserPrint-3.1.250.min.js"></script>
</body>

</html>
│  ├─ compras.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='compras/compras.css') }}
{% endblock %}

{% block content %}
<div class="container p-4">
    <div class="header-bar bg-primary text-white p-3 rounded mb-2">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Título sempre visível -->
            <h5 class="mb-0">Composição do agendamento</h5>
            <div class="dropdown">
                <button class="btn btn-outline-light d-flex align-items-center gap-2 dropdown-toggle px-3 py-2"
                    type="button" id="dropdownMenuDownload" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-download"></i> Baixar
                </button>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm rounded-3 animate__animated animate__fadeIn"
                    aria-labelledby="dropdownMenuDownload">
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#"
                            onclick="turnTableDataToJson('csv')">
                            <i class="bi bi-filetype-csv"></i> CSV
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#"
                            onclick="turnTableDataToJson('excel')">
                            <i class="bi bi-file-earmark-excel"></i> Excel
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#" onclick="window.print()">
                            <i class="bi bi-printer"></i> Imprimir
                        </button>
                    </li>
                </ul>
            </div>
            <!-- src="{{ url_for('static', filename='/resources/logo.png') }}" -->
        </div>
    </div>
    <div class="card shadow-sm mb-4" id="container-table">
        <div class="print-header">
            <img src="{{ url_for('static', filename='/resources/logo.png') }}" alt="Logo" class="print-logo">
            <h2 class="print-title" style="margin-bottom: 15px;">Lista de Compras</h2>
            <div class="print-meta" style="margin-bottom: 10px;">
                <span id="data-hoje"></span> &nbsp;&nbsp;
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive" style="max-height:70vh; overflow-y:auto;">
                <table class="table table-hover align-middle">
                    <thead>
                        <tr>
                            <th>Produto</th>
                            <th>Fornecedor</th>
                            <th>Código</th>
                            <th>Total</th>
                            <th>Tiny</th>
                            <th>Faltam</th>
                            <th>Comprar</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for compra in dados %}
                        <tr>
                            <td data-label="Produto">{{ compra[6] }}</td>
                            <td data-label="Fornecedor" id="fornecedor-{{ compra[3] }}">Buscando…</td>
                            <td data-label="Código" id="cod-fornecedor-{{ compra[3] }}">Buscando…</td>
                            <td data-label="Total" id="qnt-total-{{ compra[3] }}">{{
                                compra[7] }}</td>
                            <td data-label="Tiny" id="estoque-tiny-{{ compra[3] }}">Buscando…</td>
                            <td data-label="Faltam" id="qnt-faltante-{{ compra[3] }}">Buscando…</td>
                            <td data-label="Comprar" id="qnt-compra-{{ compra[3] }}">
                                <div class="input-wrapper">
                                    <input type="number" value="0" min="0" oninput="autoResizeInput(this)">
                                    <span class="input-mirror"></span>
                                </div>
                                <div>
                                    <button id="remover-{{ compra[0] }}" type="button" onclick="removeComprado(this)">
                                        Remover </button>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='compras/compras.js') }}
{% endblock %}
│  ├─ config.html
{% extends "base_template.html" %}

{% block title %}Configurações{% endblock %}

{% block stylepath %}
{{ url_for('static', filename='config/config.css') }}
{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <!-- Coluna do Usuário -->
        <div class="col-lg-4 mb-4 text-center">
            <div class="card perfil-card mx-auto">
                <img src="https://cdn-icons-png.flaticon.com/512/17468/17468680.png" class="perfil-avatar mt-4"
                    alt="Avatar de {{ session.nome_display_usuario }}">
                <div class="card-body">
                    <h4 class="card-title">{{ session.nome_display_usuario }}</h4>
                    <a href="{{ url_for('auth.logout') }}"
                        class="btn btn-outline-danger btn-sm mt-2 d-inline-flex align-items-center">
                        <i class="bi bi-box-arrow-right me-2"></i>
                        Sair
                    </a>
                </div>
            </div>
        </div>
        <!-- Coluna das Impressoras -->
        <div class="col-lg-8">
            <div class="printer-card mb-4">
                <video width="128" height="128" preload="none"
                    style="background: transparent url('https://cdn-icons-png.flaticon.com/512/6172/6172550.png') 50% 50% / contain no-repeat;"
                    autoplay loop muted playsinline>
                    <source src="https://cdn-icons-mp4.flaticon.com/512/6172/6172550.mp4" type="video/mp4">
                </video>
                <div>
                    <strong>Impressora relatório atual</strong><br>
                    <span>Nenhuma impressora selecionada</span><br>
                    <button class="btn btn-outline-secondary btn-sm mt-1 pt-2">Escolher impressora</button>
                </div>
            </div>
            <div class="printer-card mb-4">
                <video width="128" height="128" preload="none"
                    style="background: transparent url('https://cdn-icons-png.flaticon.com/512/8717/8717997.png') 50% 50% / contain no-repeat;"
                    autoplay loop muted playsinline>
                    <source src="https://cdn-icons-mp4.flaticon.com/512/8717/8717997.mp4" type="video/mp4">
                </video>
                <div>
                    <strong>Impressora etiqueta atual</strong><br>
                    <span>Nenhuma impressora selecionada</span><br>
                    <button class="btn btn-outline-secondary btn-sm mt-1 pt-2">Escolher impressora</button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
│  ├─ embalar.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for("static", filename="embalar/embalar.css") }}
{% endblock %}

{% block content %}
<br>
<div class="container">
    <div class="header-bar mb-3 p-3 rounded" data-id-ml="{{ dados_agend.id_agend_ml }}"
        data-id-bd="{{ dados_agend.id_bd }}" data-empresa="{{ dados_agend.empresa }}"
        data-centro="{{ dados_agend.centro_distribuicao or '' }}">
        <h5 class="mb-2">Embalagem</h5>
        <div class="d-flex flex-wrap align-items-center gap-3 mt-3">
            <div><strong>Empresa:</strong>
                {% if dados_agend.empresa == 0 %}Nenhuma
                {% elif dados_agend.empresa == 1 %}Jaú Pesca
                {% elif dados_agend.empresa == 2 %}Jaú Fishing
                {% elif dados_agend.empresa == 3 %}L.T. Sports
                {% endif %}
            </div>
            <div><strong>Agendamento:</strong> {{ dados_agend.id_agend_ml }}</div>
            <div><strong>Colaborador:</strong> {{ dados_agend.colaborador or 'Nenhum' }}</div>
            {% set data = dados_agend.entrada %}
            <div><strong>Data:</strong> {{ data.strftime('%d/%m/%y') }}</div>
            <div><strong>Hora:</strong> {{ data.strftime('%Hh%M') }}</div>
            <div><strong>Centro:</strong> {{ dados_agend.centro_distribuicao }}</div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-5">
            <div class="mb-3" style="padding-right: 10px;">
                <div style="display: flex; justify-content: space-between;">
                    <label for="input-embalar" class="form-label fw-bold">Código ou SKU</label>
                    <label class="form-label"><span style="font-weight: 600;">F1</span> = Etiqueta ML + JP</label>
                    <label class="form-label"><span style="font-weight: 600;">F2</span> = Etiqueta ML</label>
                </div>
                <input type="text" id="input-embalar" class="form-control" placeholder="Digite aqui o GTIN ou SKU">
            </div>

            <div class="d-flex justify-content-between flex-wrap gap-3 p-3 mb-3 border rounded bg-white"
                style="margin-right: 10px;">
                <p id="tempoP" class="mb-0"><strong>🕒 Tempo:</strong> 00h 00m 00s</p>
                <p id="finalizadosP" class="mb-0"><strong>✅ Finalizados:</strong> 0</p>
            </div>

            <div id="caixa-actions-container">
                <template id="template-nova-caixa">
                    <div id="btn-nova-caixa" class="card add-new-box text-center text-decoration-none">
                        <div class="card-body nova_caixa">
                            <i class="bi bi-plus-circle me-2"></i> Nova Caixa
                        </div>
                    </div>
                </template>

                <template id="template-finalizar-embalagem">
                    <a href="#" id="btn-finalizar-embalagem"
                        class="card add-new-box text-center text-decoration-none bg-success text-white ajuste_btn_finalizar">
                        <div class="card-body nova_caixa">
                            <i class="bi bi-check-circle-fill me-2"></i> Finalizar Embalagem
                        </div>
                    </a>
                </template>
                <div>
                    <div id="caixas-container" class="mb-4 d-flex flex-column gap-3">
                    </div>
                </div>
            </div>

            <!-- <template id="template-nova-caixa">
                <div id="btn-nova-caixa" class="card add-new-box text-center text-decoration-none">
                    <div class="card-body nova_caixa">
                        <i class="bi bi-plus-circle me-2"></i> Nova Caixa
                    </div>
                </div>
            </template> -->
        </div>

        <div class="col-md-7">
            <ul id="lista-anuncios">
                {% for produto in dados.produtos %}
                <li class="produto-item" data-original-sku="{{ produto.sku }}" data-sku="{{ produto.sku }}"
                    data-id-ml="{{ produto.id_ml }}" data-gtin="{{ produto.gtin }}" data-id-tiny="{{ produto.id_tiny }}"
                    data-unidades="{{ produto.unidades }}">
                    <div class="produto-info">{{ produto.nome }}</div>
                    <div class="produto-meta">
                        <span class="sku">{{ produto.sku }}</span>
                        <i class="bi bi-info-circle"></i>
                        <span class="unidades">Unidades: {{ produto.unidades }}</span>
                    </div>
                </li>
                {% endfor %}
            </ul>

            <div id="window-right">
                <ul id="lista-anuncio-selecionado"></ul>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalSelecioneAnuncio" tabindex="-1" aria-labelledby="modalSelecioneAnuncioLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalSelecioneAnuncioLabel">Selecione o anúncio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body" id="modalSelecioneAnuncioBody">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalConfirmeAnuncio" tabindex="-1" aria-labelledby="modalConfirmeAnuncioLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConfirmeAnuncioLabel">Confirme o anúncio selecionado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body" id="modalConfirmeAnuncioBody">
            </div>
            <div class="modal-footer">
                <button type="button" id="btnConfirmarAnuncio" class="btn btn-primary">Confirmar</button>
            </div>
        </div>
    </div>
</div>


<div id="js-data" data-comps='{{ comps | tojson | safe }}' style="display:none;"></div>
<div id="placeholder-image" data-url="{{ url_for('static', filename='resources/sem_img.webp') }}"></div>
{% endblock %}
{% block scriptpath %}
{{ url_for("static", filename="embalar/embalar.js") }}
{% endblock %}
│  ├─ erro.html
{% extends "base_template.html" %}

{% block stylepath %}
    {{ url_for('static', filename='erro/erro.css') }}
{% endblock %}

{% block content %}

<div class="erro-container">
    <div id="erro-titulo">
        <h2 id="err-title">{{ erro_title }}</h2> 
        <span>
            <video width="256" height="256" preload="none"
                style="background: transparent  url('https://cdn-icons-png.flaticon.com/512/11201/11201846.png') 50% 50% / fit no-repeat;"
                autoplay="autoplay" muted="muted" playsinline="">
                <source src="https://cdn-icons-mp4.flaticon.com/512/11201/11201846.mp4" type="video/mp4">
            </video>
        </span>
    </div>
    <div id="erro-mensagem" class="mb-4">
        <p id="err-msg-pri">{{ erro_msg_primary }}</p>
        <p id="err-msg-sec">{{ erro_msg_secondary }}</p>
    </div>
    <div>
        <p id="err-code">Código de erro: {{ erro_code }}</p>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
    integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
    integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
    crossorigin="anonymous"></script>
{% endblock %}

{% block scriptpath %}
    {{ url_for('static', filename='erro/erro.css') }}
{% endblock %}

│  ├─ expedicao.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='expedicao/expedicao.css') }}
{% endblock %}


{% block content %}
<div class="container pt-4">
    <!-- CABEÇALHO -->
    <div class="header-bar mb-3 p-3 rounded bg-primary text-white" data-id-ml="{{ dados_agend.id_agend_ml }}"
        data-id-bd="{{ dados_agend.id_bd }}">
        <h5 class="mb-2">Expedição</h5>
        <div class="d-flex flex-wrap align-items-center gap-3 mt-3">
            <div>
                <strong style="color: #FDD484;">Empresa:</strong>
                {% if dados_agend.empresa == 0 %}Nenhuma
                {% elif dados_agend.empresa == 1 %}Jaú Pesca
                {% elif dados_agend.empresa == 2 %}Jaú Fishing
                {% elif dados_agend.empresa == 3 %}L.T. Sports
                {% endif %}
            </div>
            <div>
                <strong style="color: #FDD484;">Agendamento:</strong>
                {{ dados_agend.id_agend_ml }}
            </div>
            <div>
                <strong style="color: #FDD484;">Colaborador:</strong>
                {{ dados_agend.colaborador or 'Nenhum' }}
            </div>
            {% set data = dados_agend.entrada %}
            <div>
                <strong style="color: #FDD484;">Data:</strong>
                {{ data.strftime('%d/%m/%y') }}
            </div>
            <div>
                <strong style="color: #FDD484;">Hora:</strong>
                {{ data.strftime('%Hh%M') }}
            </div>
        </div>
    </div>

    <h4>Caixas para Expedir</h4>

    <div>
        {% if caixas %}
        <div class="row row-cols-1 row-cols-md-4 g-4 mt-1"
            style="max-height: 62vh !important; overflow-y: auto !important;">
            {% for caixa in caixas %}
            <div class="col">
                <div class="card h-100 shadow-sm caixa-card" data-caixa="{{ caixa.caixa_num }}" data-state="0">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Caixa #{{ caixa.caixa_num }}</h6>
                        <img class="card-icon me-2" src="{{ url_for('static', filename='resources/caixa.png') }}"
                            width="32" height="32" alt="Ícone da caixa">
                        <span class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-eye"></i>
                        </span>
                    </div>
                    <ul class="list-group list-group-flush">
                        {% for item in caixa.itens %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <!-- <span class="sku">{{ item.sku }}</span> -->
                            <span class="badge bg-secondary rounded-pill">
                                {{ caixa.itens|length }} tipo(s)
                            </span>
                            <span class="badge bg-primary rounded-pill">
                                Qtd: {{ item.quantidade }}
                            </span>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
    {% else %}
    <div class="alert alert-warning text-center" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>
        Nenhuma caixa foi registrada para este agendamento no processo de embalagem.
    </div>
    {% endif %}

</div>
{% endblock %}

│  ├─ imprimir_composicoes.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='imprimir_composicoes/imprimir_composicoes.css') }}
{% endblock %}

{% block content %}
<div class="container p-4">
    <div class="header-bar bg-primary text-white p-3 rounded mb-2">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Título sempre visível -->
            <h5 class="mb-0 id-{{ agendamento.id_agend_ml }}">Composição - Pedido {{ agendamento.id_agend_ml }}</h5>
            <div class="dropdown">
                <button class="btn btn-outline-light d-flex align-items-center gap-2 dropdown-toggle px-3 py-2"
                    type="button" id="dropdownMenuDownload" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-download"></i> Baixar
                </button>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm rounded-3 animate__animated animate__fadeIn"
                    aria-labelledby="dropdownMenuDownload">
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#"
                            onclick="turnTableDataToJson('csv')">
                            <i class="bi bi-filetype-csv"></i> CSV
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#"
                            onclick="turnTableDataToJson('excel')">
                            <i class="bi bi-file-earmark-excel"></i> Excel
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item d-flex align-items-center gap-2" href="#" onclick="window.print()">
                            <i class="bi bi-printer"></i> Imprimir
                        </button>
                    </li>
                </ul>
            </div>
            <!-- src="{{ url_for('static', filename='/resources/logo.png') }}" -->
        </div>
    </div>
    <div id="container-table" class="card-body p-0">
        <div class="print-header">
            <img src="{{ url_for('static', filename='/resources/logo.png') }}" alt="Logo" class="print-logo">
            <h2 class="print-title id-{{ agendamento.id_agend_ml }}" style="margin-bottom: 15px;">Composição - Pedido {{
                agendamento.id_agend_ml }}</h2>
            <div class="print-meta" style="margin-bottom: 10px;">
                <span id="data-hoje"></span> &nbsp;|&nbsp;
                <span id="nome-colaborador">{{ agendamento.colaborador }}</span>
            </div>
        </div>
        <div class="table-responsive" style="max-height:70vh; overflow-y:auto;">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>SKU</th>
                        <th>Nome</th>
                        <th>Total</th>
                        <th class="hdr-loc">Localização</th>
                        <th class="hdr-151i">Inferior</th>
                        <th class="hdr-151m">Mezanino</th>
                        <th class="hdr-cx">Caixa</th>
                    </tr>
                </thead>
                <tbody>
                    {% for composicao in comps %}
                    <tr>
                        <td class="print-font">{{ composicao.sku }}</td>
                        <td class="print-font" id_tiny="{{ composicao.id_tiny }}">{{ composicao.comp_origem[0].nome }}
                        </td>
                        <td class="print-position">{{ composicao.unidades_totais }}</td>

                        {% if composicao.comp_origem[0].localizacao == "" %}
                        <td class="print-font">Nenhum</td>
                        {% else %}
                        <td class="print-position  print-font">{{ composicao.comp_origem[0].localizacao }}</td>
                        {% endif %}

                        <td class="print-position" id="qnt-151i">Buscando...</td>
                        <td class="print-position" id="qnt-151m">Buscando...</td>
                        <td class="print-position" id="qnt-177">Buscando...</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% endblock %}

    {% block scriptpath %}
    {{ url_for('static', filename='imprimir_composicoes/imprimir_composicoes.js') }}
    {% endblock %}
│  ├─ index.html
{% extends "base_template.html" %}

{% block stylepath %}
    {{ url_for('static', filename='homepage/homepage.css') }}
{% endblock %}

{% block content %}

    <br><br><br>
    <div class="container pt-5">
    <br><br><br>
        <div class="row marcador align-items-center">
            <div class="col mx-auto text-center">
                <img class="img-fluid" src="{{ url_for('static', filename='resources/wallpaper_jaupesca.svg') }}">
            </div>
        </div>

    </div>

{% endblock %}

│  ├─ limpeza.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='limpeza/limpeza.css') }}
{% endblock %}

{% block content %}
<br>
<div class="container">
    <!-- cabeçalho principal -->
    <div class="header-bar bg-primary text-white p-3 rounded">
        <div class="d-flex justify-content-between align-items-center">
            <!-- sempre visível -->
            <h5 class="mb-0">Limpeza do agendamento</h5>

            <!-- botão só em sm -->
            <button id="btnToggleDetalhes" class="btn btn-link text-white p-0 d-block d-md-none" type="button"
                data-bs-toggle="collapse" data-bs-target="#detalhesAgendamento" aria-expanded="false"
                aria-controls="detalhesAgendamento">
                <i class="bi bi-chevron-down fs-4"></i>
            </button>


        </div>

        <!-- detalhes: collapsible -->
        <div id="detalhesAgendamento" class="collapse d-md-block mt-2" data-bs-parent=".header-bar">
            <div class="d-flex flex-wrap align-items-center gap-3">
                {% if dados.empresa == 0 %}
                <div><strong style="color: #FDD484;">Empresa:</strong> Nenhuma</div>
                {% elif dados.empresa == 1 %}
                <div><strong style="color: #FDD484;">Empresa:</strong> Jaú Pesca</div>
                {% elif dados.empresa == 2 %}
                <div><strong style="color: #FDD484;">Empresa:</strong> Jaú Fishing</div>
                {% elif dados.empresa == 3 %}
                <div><strong style="color: #FDD484;">Empresa:</strong> L.T. Sports</div>
                {% endif %}

                <div><strong style="color: #FDD484;">Agendamento:</strong> {{ dados.id_agend_ml }}</div>
                <div><strong style="color: #FDD484;">Colaborador:</strong> {{ dados.colaborador or 'Nenhum' }}</div>

                {% set data_formatada = dados.entrada.strftime('%d/%m/%y') %}
                {% set hora_formatada = dados.entrada.strftime('%Hh%M') %}

                <div><strong style="color: #FDD484;">Data:</strong> {{ data_formatada }}</div>
                <div><strong style="color: #FDD484;">Hora:</strong> {{ hora_formatada }}</div>
            </div>
        </div>

    </div>
</div>


<div class="container pt-4">
    <div class="overflow-auto" style="max-height: 70vh;">

        {% for produto in dados.produtos %}
        <div class="produto-item d-flex flex-column me-2" data-sku="{{ produto.sku }}"
            data-total="{{ produto.unidades }}">
            <div class="card border-2 mb-3
                {% if produto.estoque_error_flag == 'green' %} border-success
                {% elif produto.estoque_error_flag == 'yellow' %} border-warning
                {% elif produto.estoque_error_flag == 'red' %} border-danger
                {% endif %}">

                <div class="card-body">
                    <div class="row w-100">
                        <div class="col-12 col-md-4 mb-2">
                            <span class="text-truncate d-block" style="color: #007A85; max-width: 100%;"
                                title="{{ produto.nome }}">
                                Nome: <span style="color: black;">{{ produto.nome }}</span>
                            </span>
                            <span style="color: #007A85;">
                                SKU: <span style="color: black;">{{ produto.sku }}</span>
                            </span>
                        </div>

                        <div class="col-12 col-md-2 mb-2">
                            <span style="color: #007A85;">ID Tiny: <span style="color: black;">{{ produto.id_tiny
                                    }}</span></span><br>
                            <span style="color: #007A85;">GTIN: <span style="color: black;">{{ produto.gtin
                                    }}</span></span>
                        </div>

                        <div class="col-12 col-md-2 mb-2">
                            <span style="color: #007A85;">Etiqueta: <span style="color: black;">{{ produto.id_ml
                                    }}</span></span><br>
                            <span style="color: #007A85;">Unidades: <span style="color: black;">{{ produto.unidades
                                    }}</span></span>
                        </div>

                        <div
                            class="d-flex justify-content-md-end justify-content-start align-items-start gap-3 mb-2 col-12 col-md-4">

                            <div id="show-more-arrow-{{ loop.index }}" onclick="showTable(this)">
                                <img src="{{ url_for('static', filename='resources/seta_baixo.png') }}"
                                    alt="Seta para baixo" class="img-fluid" style="max-width: 25px; height: auto;">
                            </div>
                            <button id="btn-alt-{{ loop.index }}" onclick="altBtn(this)" class="btn btn-primary btn-sm">
                                <i class="bi bi-pencil"></i>
                            </button>

                            <button id="btn-corr-{{ loop.index }}" onclick="getEleToCorrection(this)"
                                class="btn btn-success btn-sm shadow-sm" disabled>
                                <i class="bi bi-check2-square"></i>
                            </button>
                        </div>

                    </div>
                </div>
            </div>

            <div id="table-{{ loop.index }}" class="table-comp table-responsive display-hidden shadow-sm p-2 bg-white"
                style="margin: -1rem 0rem 1rem 0rem;">
            </div>
        </div>
        {% endfor %}

    </div>
</div>

<template id="my-template">
    <swal-title>
        Como continuar agora?
    </swal-title>
    <swal-icon type="warning" color="red"></swal-icon>
    <swal-button type="confirm">Salvar agora</swal-button>
    <swal-button type="cancel">Salvar depois</swal-button>
    <swal-button type="deny">Cancelar</swal-button>
    <swal-param name="allowEscapeKey" value="false" />
    <swal-param name="customClass" value='{ "popup": "my-popup" }' />
    <swal-function-param name="didOpen" value="popup => console.log(popup)" />
</template>

<script>
    agend_id = JSON.parse('{{ request.url | tojson }}').split('?')[1].split('&')[0].split('=')[1]
    agend_tipo = JSON.parse('{{ request.url | tojson }}').split('?')[1].split('&')[1].split('=')[1]
    dados = JSON.parse('{{ comps | tojson }}')
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='limpeza/limpeza.js') }}
{% endblock %}
│  ├─ login.html
{% extends "base_template.html" %}

{% block title %}Login{% endblock %}

{% block stylepath %}
{{ url_for('static', filename='login/login.css') }}
{% endblock %}

{% block content %}
<div class="container vh-100">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="col-12 col-sm-8 col-md-6 col-lg-4">
            <div class="card shadow login-card">
                <div class="card-body p-4">
                    <div class="text-center mb-4">
                        <img src="https://cdn-icons-png.flaticon.com/512/17468/17468680.png" class="avatar"
                            alt="Avatar do usuário">
                    </div>
                    <form action="" method="post" novalidate>
                        <div class="mb-3">
                            <label for="usuario" class="form-label">Usuário</label>
                            <input type="text" class="form-control" id="usuario" name="usuario"
                                placeholder="Digite seu usuário" required>
                        </div>
                        <div class="mb-3">
                            <label for="senha" class="form-label">Senha</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="senha" name="senha"
                                    placeholder="Digite sua senha" required>
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-success">Entrar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scriptpath %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="{{ url_for('static', filename='login/login.js') }}"></script>

{% if login_error %}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        Swal.fire({
            icon: 'error',
            title: 'Falha no login',
            text: '{{ login_error }}',
            confirmButtonText: 'Ok'
        });
    });
</script>
{% endif %}
{% endblock %}
│  ├─ mostra_planilha.html
{% extends "base_template.html" %}

{% block content %}
<div class="container pt-4">
    <h2>Visualização da Planilha Excel</h2>
    <div class="table-responsive">
        {{ html_table | safe }}
    </div>
    <a href="{{ url_for('index') }}" class="btn btn-secondary mt-4">Voltar</a>
</div>
{% endblock %}

│  ├─ novoAgendamento.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='novoAgendamento/novoAgend.css') }}
{% endblock %}

{% block content %} <br><br>
<div class="container">
  <div class="container">
    <div class="row">

      <div class="col-md-3 text-center">
        <button class="btn btn-outline-primary w-100 mb-2" onclick="mostrarPainel('limpeza')">Limpeza</button>
        <button class="btn btn-outline-primary w-100 mb-2" onclick="mostrarPainel('conferencia')">Conferência</button>
        <button class="btn btn-outline-primary w-100 mb-2" onclick="mostrarPainel('embalar')">Embalar</button>
        <button class="btn btn-outline-primary w-100 mb-2" onclick="mostrarPainel('expedicao')">Expedição</button>
      </div>

      <div class="col-md-9">
        <div id="conteudoPainel" class="d-none p-4 border border-primary rounded"
          style="min-height: 300px; background-color: white;">
        </div>
      </div>
    </div>
  </div>

  <script>
    function mostrarPainel(etapa) {
      const painel = document.getElementById("conteudoPainel");
      painel.classList.remove("d-none");

      let titulo = '';
      let imagem = '';
      let tipo = 0;

      if (etapa == 'limpeza') {
        titulo = "Limpeza";
        imagem = "https://cdn-icons-png.flaticon.com/512/2897/2897785.png";
        tipo = 1
      }
      else if (etapa === "conferencia") {
        titulo = "Conferência";
        imagem = "https://cdn-icons-png.flaticon.com/512/5164/5164023.png";
        tipo = 3;
      } else if (etapa === "embalar") {
        titulo = "Embalar";
        imagem = "https://cdn-icons-png.flaticon.com/512/3638/3638887.png";
        tipo = 4;
      } else if (etapa === "expedicao") {
        titulo = "Expedição";
        imagem = "https://cdn-icons-png.flaticon.com/512/11344/11344700.png";
        tipo = 5;
      }

      painel.innerHTML = `
              <div class="text-center">
                <div class="mb-4 d-flex justify-content-center align-items-center gap-3">
                  <img src="${imagem}" alt="${titulo}" style="width: 50px;">
                  <h4 class="mb-0">${titulo}</h4>
                </div>
        
                <div class="border border-primary border-dashed p-4 rounded" style="border-style: dashed;">
                  <label for="path" class="d-block text-center" style="cursor: pointer;">
                    <img src="https://cdn-icons-png.flaticon.com/512/337/337946.png" alt="Upload" style="width: 40px; opacity: 0.6;"><br>
                    <span class="mt-2 d-inline-block">
                      <span class="text-primary text-decoration-underline">Faça upload do PDF </span>
                      e clique no botão abaixo para continuar.
                    </span>
                    <br>
                    <br>
                  </label>
                  <form method="post" action="/upload-pdf" enctype=multipart/form-data>
                    <input type="hidden" id="type" name="type" value=${tipo}>
                    <input type="file" id="path" name="path" accept="application/pdf" hidden>
                    <input type="submit">
                  </form>
                </div>
              </div>
            `;
    }
  </script>
  {% endblock %}
│  ├─ reservados.html
{% extends "base_template.html" %}

{% block content %}

<h6>Teste reservados</h6>

{% endblock %}

│  ├─ retiradoEstoque.html
{% extends "base_template.html" %}

{% block stylepath %}
{{ url_for('static', filename='retiradoEstoque/retiradoEstoque.css') }}
{% endblock %}

{% block content %}
<br>
<div class="container">
  <!-- Header -->
  <div>
    <div class="header-bar bg-primary text-white p-3 rounded mb-3">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Retirada do estoque</h5>
        <button id="btnToggleRetirada" class="btn btn-link text-white p-0 d-block d-md-none" type="button"
          data-bs-toggle="collapse" data-bs-target="#detalhesRetirada" aria-expanded="false"
          aria-controls="detalhesRetirada">
          <i class="bi bi-chevron-down fs-4"></i>
        </button>
      </div>
      <div id="detalhesRetirada" class="collapse d-md-block mt-3">
        <div class="d-flex flex-wrap align-items-center gap-3">
          <div>
            <strong style="color: #FDD484;">Empresa:</strong>
            {% if dados_agend.empresa == 0 %}Nenhuma
            {% elif dados_agend.empresa == 1 %}Jaú Pesca
            {% elif dados_agend.empresa == 2 %}Jaú Fishing
            {% elif dados_agend.empresa == 3 %}L.T. Sports
            {% endif %}
          </div>
          <div><strong style="color: #FDD484;">Agendamento:</strong> {{ dados_agend.id_agend_ml }}</div>
          <div><strong style="color: #FDD484;">Colaborador:</strong> {{ dados_agend.colaborador or 'Nenhum' }}</div>
          {% set data = dados_agend.entrada %}
          <div><strong style="color: #FDD484;">Data:</strong> {{ data.strftime('%d/%m/%y') }}</div>
          <div><strong style="color: #FDD484;">Hora:</strong> {{ data.strftime('%Hh%M') }}</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main row -->
  <div class="row">
    <!-- Coluna de inputs e indicadores -->
    <div class="col-md-5">
      <div class="mb-3">
        <div class="row">
          <div class="col">
            <label class="form-label fw-bold">Código ou SKU</label>
            <input type="text" id="skuInput" class="form-control" placeholder="Digite aqui" {% if not pode_mudar
              %}disabled{% endif %}>
          </div>
          <div class="col">
            <label class="form-label fw-bold">Insira a quantidade</label>
            <input type="number" id="quantidadeInput" class="form-control" value="1" min="1" {% if not pode_mudar
              %}disabled{% endif %}>
          </div>
        </div>
      </div>

      <div class="d-flex justify-content-between flex-wrap gap-3 p-3 mb-3 border rounded bg-white">
        <p id="tempoP" class="mb-0"><strong>🕒 Tempo:</strong> 00h 00m 00s</p>
        <p id="andamentoP" class="mb-0"><strong>🔄 Em andamento:</strong> Nenhum</p>
        <p id="estimadoP" class="mb-0"><strong>⏳ Estimado:</strong> 00h 45m 00s</p>
        <p id="finalizadosP" class="mb-0"><strong>✅ Finalizados:</strong> Nenhum</p>
        <div id="finalizarContainer" class="d-none mt-2 w-100">
          <button id="btnFinalizar" class="btn btn-outline-success btn-lg w-100" onclick="finalizarAgendamento()">
            <i class="bi bi-check-circle me-2"></i>Finalizar Agendamento
          </button>
        </div>
      </div>

      <!-- Bloco para itens concluídos -->
      <div id="concluidosContainer" class="info-box mb-3 overflow-auto" style="max-height: 30vh;">
        <!-- JS injeta aqui os itens com bipados >= total -->
      </div>
    </div>

    <!-- Lista de produtos pendentes -->
    <div class="col-md-7">
      <div id="pendentesContainer" class="overflow-auto" style="max-height: 70vh;">
        {% for composicao in dados %}
        <div class="produto-item d-flex flex-column mb-3 me-2" data-sku="{{ composicao.sku }}"
          data-total="{{ composicao.unidades_totais }}" data-bipados="0">
          <div class="d-flex justify-content-between align-items-center">
            <span class="text-truncate d-inline-block w-100" style="max-width: 400px;" title="{{ composicao.nome }}">
              {{ composicao.comp_origem[0].nome }}
            </span>
            <div class="d-flex align-items-center gap-3">
              <span class="text-success">{{ composicao.sku }}</span>
              <span class="bipados text-nowrap">Bipados: 0</span>
            </div>
          </div>
          <div class="progress mt-2" style="height: 12px;">
            <div class="progress-bar bg-warning text-secondary" role="progressbar" style="width: 0%;" aria-valuenow="0"
              aria-valuemin="0" aria-valuemax="{{ composicao.unidades_totais }}">
              0%
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scriptpath %}
{{ url_for('static', filename='retiradoEstoque/retiradoEstoque.js') }}
{% endblock %}
│  ├─ teste.html
{% extends "base_template.html" %}

{% block content %}
    {% for i in dados %}
        {{ i.id_bd}} // {{ i.id_agend_ml }}
        <br>
        {% for produto in i.produtos  %}
            {% for composicao in produto.composicao %}
                {{ composicao.nome }}
                <br>
            {% endfor %}
            <br>
        {% endfor %}
        <br>
        <br>
        <br>
    {% endfor %}
    
{% endblock %}
│  └─ view_excel.html
{% extends "base_template.html" %}

{% block stylepath %}
{# Você pode adicionar um CSS específico se precisar #}
<style>
    .table-container { 
        max-height: 80vh; 
        overflow: auto; 
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
    }
    h1 {
        border-bottom: 2px solid #dee2e6; 
        padding-bottom: 10px; 
        margin-bottom: 20px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid pt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1>Conteúdo do Arquivo: <span class="text-primary">{{ filename }}</span></h1>
        <a href="{{ url_for('agendamentos', acao='ver') }}" class="btn btn-secondary">Voltar aos Agendamentos</a>
    </div>

    <div class="table-container my-3">
        {{ data_table|safe }}
    </div>
</div>
{% endblock %}

{% block scriptpath %}
{# Você pode adicionar um JS específico se precisar #}
{% endblock %}
├─ uploads/
|  └─ UPLOADS DE PDF VEM AQUI
├─ .gitignore
├─ build.sh
├─ Dockerfile
├─ exceptions.py
├─ git
├─ main.py
from flask import (
    Flask,
    render_template,
    request,
    flash,
    redirect,
    url_for,
    session,
    jsonify,
    send_from_directory,
    send_file,
    after_this_request,
    abort,
    Response
)
from flask import session as flask_session, request as flask_request, redirect as flask_redirect, url_for as flask_url_for

from base_jp_lab import Access, Caller
from classes import AgendamentoController, DatabaseController
from flask_cors import CORS
import pandas as pd
from exceptions import (
    ParametroInvalido,
    MetodoInvalido,
    LimiteRequests,
    ArquivoInvalido
)
from flask_socketio import SocketIO, join_room, emit

# … suas constantes de upload e secret key …
UPLOAD_FOLDER = "uploads"
ALLOWED_EXTENSIONS = {"pdf", "csv", "xlsx"}

app = Flask(__name__)
CORS(app)

app.secret_key = "test_key"
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# -------------------------------
# Proteção de rotas por login
# -------------------------------
@app.before_request
def require_login():
    # libera apenas login, estáticos e nossas APIs REST de bipagem
    open_endpoints = {
        'auth.login',               # rota de login
        'static',                   # arquivos estáticos
        'retirado.api_bipar',       # POST /api/bipar
        'retirado.api_bipados_agend'# GET  /api/bipados/<id_agend>
    }
    ep = flask_request.endpoint or ''
    if ep not in open_endpoints and 'id_usuario' not in flask_session:
        return flask_redirect(flask_url_for('auth.login'))
# -------------------------------

# 1) cria a instância de Access (MySQL) — ela já gerencia o pool
access = Access(
    "Bruno_Lallo",
    "ji}dx(v{M,z2j+f>[/}%_Vr-0?nI}W*@Dw68NnHJ+tMu&ZkF",
    "192.168.15.200",
    "3306",
    "jp_bd",
)

# 2) passa essa instância para o Caller (não a classe!)
caller = Caller(access, "tiny")

# 3) cria os controllers usando a mesma instância de Access
db_controller         = DatabaseController(access)
agendamento_controller = AgendamentoController(db_controller, caller)

# registra blueprint de autenticação
from rotas.auth import bp_auth
app.register_blueprint(bp_auth)

# registra blueprint de retirada de estoque (bipagem)
from rotas.retiradoEstoque import bp_retirado
app.register_blueprint(bp_retirado)

from rotas.embalar import bp_embalar
app.register_blueprint(bp_embalar)

# registra as demais rotas da sua aplicação (homepage, agendamentos, etc.)
from rotas import *

if __name__ == "__main__":
    # veja seu mapa de URLs já com retiradoEstoque registrado
    # print(app.url_map)
    app.run(host='0.0.0.0', port=8345)
├─ patch
└─ requirements.txt